/**
 * Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
 * this source code is governed by the MIT license that can be found in
 * the LICENSE file.
 */

// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from '@hey-api/client-nuxt';
import type { GetGithubSvgData, GetGithubSvgResponse, GetGithubSvgError, GetGithubRepoSvgData, GetGithubRepoSvgResponse, GetGithubRepoSvgError, ListGithubAssetsData, ListGithubAssetsResponse, ListGithubAssetsError, GetGithubAssetData, GetGithubAssetResponse, GetGithubAssetError, GetGithubAssetReleaseData, GetGithubAssetReleaseResponse, GetGithubAssetReleaseError, ListGithubEventsData, ListGithubEventsResponse, ListGithubEventsError, GetGithubEventData, GetGithubEventResponse, GetGithubEventError, ListGithubGistsData, ListGithubGistsResponse, ListGithubGistsError, GetGithubGistData, GetGithubGistResponse, GetGithubGistError, ListGithubReleasesData, ListGithubReleasesResponse, ListGithubReleasesError, ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesResponse, ListOutdatedGithubReleasesError, GetGithubReleaseData, GetGithubReleaseResponse, GetGithubReleaseError, ListGithubReleaseAssetsData, ListGithubReleaseAssetsResponse, ListGithubReleaseAssetsError, GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryResponse, GetGithubReleaseRepositoryError, ListGithubRepositoriesData, ListGithubRepositoriesResponse, ListGithubRepositoriesError, GetGithubRepositoryData, GetGithubRepositoryResponse, GetGithubRepositoryError, ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsResponse, ListGithubRepositoryLabelsError, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError, GetGithubUserData, GetGithubUserResponse, GetGithubUserError, ListLabelsData, ListLabelsResponse, ListLabelsError, CreateLabelData, CreateLabelResponse, CreateLabelError, GetLabelsCountData, GetLabelsCountResponse, GetLabelsCountError, DeleteLabelData, DeleteLabelResponse, DeleteLabelError, GetLabelData, GetLabelResponse, GetLabelError, UpdateLabelData, UpdateLabelResponse, UpdateLabelError, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError, ListLabelPostsData, ListLabelPostsResponse, ListLabelPostsError, GetOpenApiData, GetOpenApiResponse, GetOpenApiError, ListPostsData, ListPostsResponse, ListPostsError, CreatePostData, CreatePostResponse, CreatePostError, RegeneratePostsData, RegeneratePostsError, DeletePostData, DeletePostResponse, DeletePostError, GetPostData, GetPostResponse, GetPostError, UpdatePostData, UpdatePostResponse, UpdatePostError, GetPostAuthorData, GetPostAuthorResponse, GetPostAuthorError, ListPostLabelsData, ListPostLabelsResponse, ListPostLabelsError, GetSelfData, GetSelfResponse, GetSelfError, GetCodingStatsData, GetCodingStatsResponse, GetCodingStatsError, GetGithubStatsData, GetGithubStatsResponse, GetGithubStatsError, ListUsersData, ListUsersResponse, ListUsersError, GetUserData, GetUserResponse, GetUserError, ListUserPostsData, ListUserPostsResponse, ListUserPostsError, GetServiceVersionData, GetServiceVersionResponse, GetServiceVersionError } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { listGithubAssetsResponseTransformer, getGithubAssetResponseTransformer, getGithubAssetReleaseResponseTransformer, listGithubEventsResponseTransformer, getGithubEventResponseTransformer, listGithubGistsResponseTransformer, getGithubGistResponseTransformer, listGithubReleasesResponseTransformer, listOutdatedGithubReleasesResponseTransformer, getGithubReleaseResponseTransformer, listGithubReleaseAssetsResponseTransformer, getGithubReleaseRepositoryResponseTransformer, listGithubRepositoriesResponseTransformer, getGithubRepositoryResponseTransformer, listGithubRepositoryLabelsResponseTransformer, listGithubRepositoryReleasesResponseTransformer, listLabelsResponseTransformer, createLabelResponseTransformer, getLabelsCountResponseTransformer, getLabelResponseTransformer, updateLabelResponseTransformer, listLabelGithubRepositoriesResponseTransformer, listLabelPostsResponseTransformer, listPostsResponseTransformer, createPostResponseTransformer, getPostResponseTransformer, updatePostResponseTransformer, getPostAuthorResponseTransformer, listPostLabelsResponseTransformer, getSelfResponseTransformer, listUsersResponseTransformer, getUserResponseTransformer, listUserPostsResponseTransformer } from './transformers.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Dynamic SVG generator based off title/description parameters.
 * Dynamic SVG generator based off title/description parameters.
 */
export const getGithubSvg = <TComposable extends Composable, DefaultT extends GetGithubSvgResponse = GetGithubSvgResponse>(options: Options<TComposable, GetGithubSvgData, GetGithubSvgResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubSvgResponse | DefaultT, GetGithubSvgError, DefaultT>({
        url: '/gh/svg',
        ...options
    });
};

/**
 * Dynamic SVG generator based off repo.
 * Dynamic SVG generator based off repo.
 */
export const getGithubRepoSvg = <TComposable extends Composable, DefaultT extends GetGithubRepoSvgResponse = GetGithubRepoSvgResponse>(options: Options<TComposable, GetGithubRepoSvgData, GetGithubRepoSvgResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubRepoSvgResponse | DefaultT, GetGithubRepoSvgError, DefaultT>({
        url: '/gh/svg/{ownerID}/{repoID}',
        ...options
    });
};

/**
 * List githubassets
 * List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubAssets = <TComposable extends Composable, DefaultT extends ListGithubAssetsResponse = ListGithubAssetsResponse>(options: Options<TComposable, ListGithubAssetsData, ListGithubAssetsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubAssetsResponse | DefaultT, ListGithubAssetsError, DefaultT>({
        responseTransformer: listGithubAssetsResponseTransformer,
        url: '/github-assets',
        ...options
    });
};

/**
 * Retrieve a githubasset
 * Retrieve a single GithubAsset entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAsset = <TComposable extends Composable, DefaultT extends GetGithubAssetResponse = GetGithubAssetResponse>(options: Options<TComposable, GetGithubAssetData, GetGithubAssetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubAssetResponse | DefaultT, GetGithubAssetError, DefaultT>({
        responseTransformer: getGithubAssetResponseTransformer,
        url: '/github-assets/{githubassetID}',
        ...options
    });
};

/**
 * Get a githubassets associated release
 * Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAssetRelease = <TComposable extends Composable, DefaultT extends GetGithubAssetReleaseResponse = GetGithubAssetReleaseResponse>(options: Options<TComposable, GetGithubAssetReleaseData, GetGithubAssetReleaseResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubAssetReleaseResponse | DefaultT, GetGithubAssetReleaseError, DefaultT>({
        responseTransformer: getGithubAssetReleaseResponseTransformer,
        url: '/github-assets/{githubassetID}/release',
        ...options
    });
};

/**
 * List githubevents
 * List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubEvents = <TComposable extends Composable, DefaultT extends ListGithubEventsResponse = ListGithubEventsResponse>(options: Options<TComposable, ListGithubEventsData, ListGithubEventsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubEventsResponse | DefaultT, ListGithubEventsError, DefaultT>({
        responseTransformer: listGithubEventsResponseTransformer,
        url: '/github-events',
        ...options
    });
};

/**
 * Retrieve a githubevent
 * Retrieve a single GithubEvent entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubEvent = <TComposable extends Composable, DefaultT extends GetGithubEventResponse = GetGithubEventResponse>(options: Options<TComposable, GetGithubEventData, GetGithubEventResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubEventResponse | DefaultT, GetGithubEventError, DefaultT>({
        responseTransformer: getGithubEventResponseTransformer,
        url: '/github-events/{githubeventID}',
        ...options
    });
};

/**
 * List githubgists
 * List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubGists = <TComposable extends Composable, DefaultT extends ListGithubGistsResponse = ListGithubGistsResponse>(options: Options<TComposable, ListGithubGistsData, ListGithubGistsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubGistsResponse | DefaultT, ListGithubGistsError, DefaultT>({
        responseTransformer: listGithubGistsResponseTransformer,
        url: '/github-gists',
        ...options
    });
};

/**
 * Retrieve a githubgist
 * Retrieve a single GithubGist entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubGist = <TComposable extends Composable, DefaultT extends GetGithubGistResponse = GetGithubGistResponse>(options: Options<TComposable, GetGithubGistData, GetGithubGistResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubGistResponse | DefaultT, GetGithubGistError, DefaultT>({
        responseTransformer: getGithubGistResponseTransformer,
        url: '/github-gists/{githubgistID}',
        ...options
    });
};

/**
 * List githubreleases
 * List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleases = <TComposable extends Composable, DefaultT extends ListGithubReleasesResponse = ListGithubReleasesResponse>(options: Options<TComposable, ListGithubReleasesData, ListGithubReleasesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubReleasesResponse | DefaultT, ListGithubReleasesError, DefaultT>({
        responseTransformer: listGithubReleasesResponseTransformer,
        url: '/github-releases',
        ...options
    });
};

/**
 * Get outdated Github releases
 * List github repositories which have potentially outdated releases.
 */
export const listOutdatedGithubReleases = <TComposable extends Composable, DefaultT extends ListOutdatedGithubReleasesResponse = ListOutdatedGithubReleasesResponse>(options: Options<TComposable, ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListOutdatedGithubReleasesResponse | DefaultT, ListOutdatedGithubReleasesError, DefaultT>({
        responseTransformer: listOutdatedGithubReleasesResponseTransformer,
        url: '/github-releases/outdated',
        ...options
    });
};

/**
 * Retrieve a githubrelease
 * Retrieve a single GithubRelease entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRelease = <TComposable extends Composable, DefaultT extends GetGithubReleaseResponse = GetGithubReleaseResponse>(options: Options<TComposable, GetGithubReleaseData, GetGithubReleaseResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubReleaseResponse | DefaultT, GetGithubReleaseError, DefaultT>({
        responseTransformer: getGithubReleaseResponseTransformer,
        url: '/github-releases/{githubreleaseID}',
        ...options
    });
};

/**
 * List a githubreleases associated assets
 * List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleaseAssets = <TComposable extends Composable, DefaultT extends ListGithubReleaseAssetsResponse = ListGithubReleaseAssetsResponse>(options: Options<TComposable, ListGithubReleaseAssetsData, ListGithubReleaseAssetsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubReleaseAssetsResponse | DefaultT, ListGithubReleaseAssetsError, DefaultT>({
        responseTransformer: listGithubReleaseAssetsResponseTransformer,
        url: '/github-releases/{githubreleaseID}/assets',
        ...options
    });
};

/**
 * Get a githubreleases associated repository
 * Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubReleaseRepository = <TComposable extends Composable, DefaultT extends GetGithubReleaseRepositoryResponse = GetGithubReleaseRepositoryResponse>(options: Options<TComposable, GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubReleaseRepositoryResponse | DefaultT, GetGithubReleaseRepositoryError, DefaultT>({
        responseTransformer: getGithubReleaseRepositoryResponseTransformer,
        url: '/github-releases/{githubreleaseID}/repository',
        ...options
    });
};

/**
 * List githubrepositories
 * List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositories = <TComposable extends Composable, DefaultT extends ListGithubRepositoriesResponse = ListGithubRepositoriesResponse>(options: Options<TComposable, ListGithubRepositoriesData, ListGithubRepositoriesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubRepositoriesResponse | DefaultT, ListGithubRepositoriesError, DefaultT>({
        responseTransformer: listGithubRepositoriesResponseTransformer,
        url: '/github-repositories',
        ...options
    });
};

/**
 * Retrieve a githubrepository
 * Retrieve a single GithubRepository entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRepository = <TComposable extends Composable, DefaultT extends GetGithubRepositoryResponse = GetGithubRepositoryResponse>(options: Options<TComposable, GetGithubRepositoryData, GetGithubRepositoryResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubRepositoryResponse | DefaultT, GetGithubRepositoryError, DefaultT>({
        responseTransformer: getGithubRepositoryResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}',
        ...options
    });
};

/**
 * List a githubrepositories associated labels
 * List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryLabels = <TComposable extends Composable, DefaultT extends ListGithubRepositoryLabelsResponse = ListGithubRepositoryLabelsResponse>(options: Options<TComposable, ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubRepositoryLabelsResponse | DefaultT, ListGithubRepositoryLabelsError, DefaultT>({
        responseTransformer: listGithubRepositoryLabelsResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}/labels',
        ...options
    });
};

/**
 * List a githubrepositories associated releases
 * List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryReleases = <TComposable extends Composable, DefaultT extends ListGithubRepositoryReleasesResponse = ListGithubRepositoryReleasesResponse>(options: Options<TComposable, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListGithubRepositoryReleasesResponse | DefaultT, ListGithubRepositoryReleasesError, DefaultT>({
        responseTransformer: listGithubRepositoryReleasesResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}/releases',
        ...options
    });
};

/**
 * Get GitHub user
 * Get the GitHub user.
 */
export const getGithubUser = <TComposable extends Composable, DefaultT extends GetGithubUserResponse = GetGithubUserResponse>(options: Options<TComposable, GetGithubUserData, GetGithubUserResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubUserResponse | DefaultT, GetGithubUserError, DefaultT>({
        url: '/github-user',
        ...options
    });
};

/**
 * List labels
 * List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabels = <TComposable extends Composable, DefaultT extends ListLabelsResponse = ListLabelsResponse>(options: Options<TComposable, ListLabelsData, ListLabelsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListLabelsResponse | DefaultT, ListLabelsError, DefaultT>({
        responseTransformer: listLabelsResponseTransformer,
        url: '/labels',
        ...options
    });
};

/**
 * Create a new label
 * Create a new Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createLabel = <TComposable extends Composable, DefaultT extends CreateLabelResponse = CreateLabelResponse>(options: Options<TComposable, CreateLabelData, CreateLabelResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateLabelResponse | DefaultT, CreateLabelError, DefaultT>({
        responseTransformer: createLabelResponseTransformer,
        url: '/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get labels count
 * Get the edge count for labels.
 */
export const getLabelsCount = <TComposable extends Composable, DefaultT extends GetLabelsCountResponse = GetLabelsCountResponse>(options: Options<TComposable, GetLabelsCountData, GetLabelsCountResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetLabelsCountResponse | DefaultT, GetLabelsCountError, DefaultT>({
        responseTransformer: getLabelsCountResponseTransformer,
        url: '/labels/count',
        ...options
    });
};

/**
 * Delete a label
 * Delete a single Label entity by its ID.
 */
export const deleteLabel = <TComposable extends Composable, DefaultT extends DeleteLabelResponse = DeleteLabelResponse>(options: Options<TComposable, DeleteLabelData, DeleteLabelResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteLabelResponse | DefaultT, DeleteLabelError, DefaultT>({
        url: '/labels/{labelID}',
        ...options
    });
};

/**
 * Retrieve a label
 * Retrieve a single Label entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getLabel = <TComposable extends Composable, DefaultT extends GetLabelResponse = GetLabelResponse>(options: Options<TComposable, GetLabelData, GetLabelResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetLabelResponse | DefaultT, GetLabelError, DefaultT>({
        responseTransformer: getLabelResponseTransformer,
        url: '/labels/{labelID}',
        ...options
    });
};

/**
 * Update a label
 * Update an existing Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updateLabel = <TComposable extends Composable, DefaultT extends UpdateLabelResponse = UpdateLabelResponse>(options: Options<TComposable, UpdateLabelData, UpdateLabelResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, UpdateLabelResponse | DefaultT, UpdateLabelError, DefaultT>({
        responseTransformer: updateLabelResponseTransformer,
        url: '/labels/{labelID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a labels associated githubRepositories
 * List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelGithubRepositories = <TComposable extends Composable, DefaultT extends ListLabelGithubRepositoriesResponse = ListLabelGithubRepositoriesResponse>(options: Options<TComposable, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListLabelGithubRepositoriesResponse | DefaultT, ListLabelGithubRepositoriesError, DefaultT>({
        responseTransformer: listLabelGithubRepositoriesResponseTransformer,
        url: '/labels/{labelID}/github-repositories',
        ...options
    });
};

/**
 * List a labels associated posts
 * List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelPosts = <TComposable extends Composable, DefaultT extends ListLabelPostsResponse = ListLabelPostsResponse>(options: Options<TComposable, ListLabelPostsData, ListLabelPostsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListLabelPostsResponse | DefaultT, ListLabelPostsError, DefaultT>({
        responseTransformer: listLabelPostsResponseTransformer,
        url: '/labels/{labelID}/posts',
        ...options
    });
};

/**
 * Get OpenAPI spec
 * Get the OpenAPI specification for this service.
 */
export const getOpenApi = <TComposable extends Composable, DefaultT extends GetOpenApiResponse = GetOpenApiResponse>(options: Options<TComposable, GetOpenApiData, GetOpenApiResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOpenApiResponse | DefaultT, GetOpenApiError, DefaultT>({
        url: '/openapi.json',
        ...options
    });
};

/**
 * List posts
 * List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPosts = <TComposable extends Composable, DefaultT extends ListPostsResponse = ListPostsResponse>(options: Options<TComposable, ListPostsData, ListPostsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListPostsResponse | DefaultT, ListPostsError, DefaultT>({
        responseTransformer: listPostsResponseTransformer,
        url: '/posts',
        ...options
    });
};

/**
 * Create a new post
 * Create a new Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createPost = <TComposable extends Composable, DefaultT extends CreatePostResponse = CreatePostResponse>(options: Options<TComposable, CreatePostData, CreatePostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreatePostResponse | DefaultT, CreatePostError, DefaultT>({
        responseTransformer: createPostResponseTransformer,
        url: '/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Regenerate posts.
 * Regenerate posts.
 */
export const regeneratePosts = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, RegeneratePostsData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, RegeneratePostsError, DefaultT>({
        url: '/posts/regenerate',
        ...options
    });
};

/**
 * Delete a post
 * Delete a single Post entity by its ID.
 */
export const deletePost = <TComposable extends Composable, DefaultT extends DeletePostResponse = DeletePostResponse>(options: Options<TComposable, DeletePostData, DeletePostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeletePostResponse | DefaultT, DeletePostError, DefaultT>({
        url: '/posts/{postID}',
        ...options
    });
};

/**
 * Retrieve a post
 * Retrieve a single Post entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPost = <TComposable extends Composable, DefaultT extends GetPostResponse = GetPostResponse>(options: Options<TComposable, GetPostData, GetPostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetPostResponse | DefaultT, GetPostError, DefaultT>({
        responseTransformer: getPostResponseTransformer,
        url: '/posts/{postID}',
        ...options
    });
};

/**
 * Update a post
 * Update an existing Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updatePost = <TComposable extends Composable, DefaultT extends UpdatePostResponse = UpdatePostResponse>(options: Options<TComposable, UpdatePostData, UpdatePostResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, UpdatePostResponse | DefaultT, UpdatePostError, DefaultT>({
        responseTransformer: updatePostResponseTransformer,
        url: '/posts/{postID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a posts associated author
 * Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPostAuthor = <TComposable extends Composable, DefaultT extends GetPostAuthorResponse = GetPostAuthorResponse>(options: Options<TComposable, GetPostAuthorData, GetPostAuthorResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetPostAuthorResponse | DefaultT, GetPostAuthorError, DefaultT>({
        responseTransformer: getPostAuthorResponseTransformer,
        url: '/posts/{postID}/author',
        ...options
    });
};

/**
 * List a posts associated labels
 * List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPostLabels = <TComposable extends Composable, DefaultT extends ListPostLabelsResponse = ListPostLabelsResponse>(options: Options<TComposable, ListPostLabelsData, ListPostLabelsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListPostLabelsResponse | DefaultT, ListPostLabelsError, DefaultT>({
        responseTransformer: listPostLabelsResponseTransformer,
        url: '/posts/{postID}/labels',
        ...options
    });
};

/**
 * Get authenticated user
 * Get the authenticated user.
 */
export const getSelf = <TComposable extends Composable, DefaultT extends GetSelfResponse = GetSelfResponse>(options: Options<TComposable, GetSelfData, GetSelfResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetSelfResponse | DefaultT, GetSelfError, DefaultT>({
        responseTransformer: getSelfResponseTransformer,
        url: '/self',
        ...options
    });
};

/**
 * Get coding statistics
 * Get coding statistics.
 */
export const getCodingStats = <TComposable extends Composable, DefaultT extends GetCodingStatsResponse = GetCodingStatsResponse>(options: Options<TComposable, GetCodingStatsData, GetCodingStatsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetCodingStatsResponse | DefaultT, GetCodingStatsError, DefaultT>({
        url: '/stats/coding',
        ...options
    });
};

/**
 * Get github statistics
 * Get github statistics.
 */
export const getGithubStats = <TComposable extends Composable, DefaultT extends GetGithubStatsResponse = GetGithubStatsResponse>(options: Options<TComposable, GetGithubStatsData, GetGithubStatsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetGithubStatsResponse | DefaultT, GetGithubStatsError, DefaultT>({
        url: '/stats/github',
        ...options
    });
};

/**
 * List users
 * List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUsers = <TComposable extends Composable, DefaultT extends ListUsersResponse = ListUsersResponse>(options: Options<TComposable, ListUsersData, ListUsersResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListUsersResponse | DefaultT, ListUsersError, DefaultT>({
        responseTransformer: listUsersResponseTransformer,
        url: '/users',
        ...options
    });
};

/**
 * Retrieve a user
 * Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getUser = <TComposable extends Composable, DefaultT extends GetUserResponse = GetUserResponse>(options: Options<TComposable, GetUserData, GetUserResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetUserResponse | DefaultT, GetUserError, DefaultT>({
        responseTransformer: getUserResponseTransformer,
        url: '/users/{userID}',
        ...options
    });
};

/**
 * List a users associated posts
 * List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUserPosts = <TComposable extends Composable, DefaultT extends ListUserPostsResponse = ListUserPostsResponse>(options: Options<TComposable, ListUserPostsData, ListUserPostsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListUserPostsResponse | DefaultT, ListUserPostsError, DefaultT>({
        responseTransformer: listUserPostsResponseTransformer,
        url: '/users/{userID}/posts',
        ...options
    });
};

/**
 * Get service version
 * Get the version of the service.
 */
export const getServiceVersion = <TComposable extends Composable, DefaultT extends GetServiceVersionResponse = GetServiceVersionResponse>(options: Options<TComposable, GetServiceVersionData, GetServiceVersionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetServiceVersionResponse | DefaultT, GetServiceVersionError, DefaultT>({
        url: '/version',
        ...options
    });
};