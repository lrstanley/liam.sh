/**
 * Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
 * this source code is governed by the MIT license that can be found in
 * the LICENSE file.
 */

// This file is auto-generated by @hey-api/openapi-ts

import type { ListGithubAssetsResponse, GetGithubAssetResponse, GetGithubAssetReleaseResponse, ListGithubEventsResponse, GetGithubEventResponse, ListGithubGistsResponse, GetGithubGistResponse, ListGithubReleasesResponse, ListOutdatedGithubReleasesResponse, GetGithubReleaseResponse, ListGithubReleaseAssetsResponse, GetGithubReleaseRepositoryResponse, ListGithubRepositoriesResponse, GetGithubRepositoryResponse, ListGithubRepositoryLabelsResponse, ListGithubRepositoryReleasesResponse, ListLabelsResponse, CreateLabelResponse, GetLabelsCountResponse, GetLabelResponse, UpdateLabelResponse, ListLabelGithubRepositoriesResponse, ListLabelPostsResponse, ListPostsResponse, CreatePostResponse, GetPostResponse, UpdatePostResponse, GetPostAuthorResponse, ListPostLabelsResponse, GetSelfResponse, ListUsersResponse, GetUserResponse, ListUserPostsResponse } from './types.gen';

const githubAssetSchemaResponseTransformer = (data: any) => {
    data.asset_id = BigInt(data.asset_id.toString());
    data.size = BigInt(data.size.toString());
    data.download_count = BigInt(data.download_count.toString());
    data.created_at = new Date(data.created_at);
    if (data.updated_at) {
        data.updated_at = new Date(data.updated_at);
    }
    return data;
};

const githubAssetListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return githubAssetSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubAssetsResponseTransformer = async (data: any): Promise<ListGithubAssetsResponse> => {
    data = githubAssetListSchemaResponseTransformer(data);
    return data;
};

export const getGithubAssetResponseTransformer = async (data: any): Promise<GetGithubAssetResponse> => {
    data = githubAssetSchemaResponseTransformer(data);
    return data;
};

const githubReleaseSchemaResponseTransformer = (data: any) => {
    data.release_id = BigInt(data.release_id.toString());
    data.created_at = new Date(data.created_at);
    data.published_at = new Date(data.published_at);
    return data;
};

const githubRepositorySchemaResponseTransformer = (data: any) => {
    data.repo_id = BigInt(data.repo_id.toString());
    if (data.pushed_at) {
        data.pushed_at = new Date(data.pushed_at);
    }
    data.created_at = new Date(data.created_at);
    if (data.updated_at) {
        data.updated_at = new Date(data.updated_at);
    }
    return data;
};

const githubReleaseEdgesSchemaResponseTransformer = (data: any) => {
    data.repository = githubRepositorySchemaResponseTransformer(data.repository);
    if (data.assets) {
        data.assets = data.assets.map((item: any) => {
            return githubAssetSchemaResponseTransformer(item);
        });
    }
    return data;
};

const githubReleaseReadSchemaResponseTransformer = (data: any) => {
    data = githubReleaseSchemaResponseTransformer(data);
    data.edges = githubReleaseEdgesSchemaResponseTransformer(data.edges);
    return data;
};

export const getGithubAssetReleaseResponseTransformer = async (data: any): Promise<GetGithubAssetReleaseResponse> => {
    data = githubReleaseReadSchemaResponseTransformer(data);
    return data;
};

const githubEventSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.actor_id = BigInt(data.actor_id.toString());
    data.repo_id = BigInt(data.repo_id.toString());
    return data;
};

const githubEventListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return githubEventSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubEventsResponseTransformer = async (data: any): Promise<ListGithubEventsResponse> => {
    data = githubEventListSchemaResponseTransformer(data);
    return data;
};

export const getGithubEventResponseTransformer = async (data: any): Promise<GetGithubEventResponse> => {
    data = githubEventSchemaResponseTransformer(data);
    return data;
};

const githubGistSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    data.size = BigInt(data.size.toString());
    return data;
};

const githubGistListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return githubGistSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubGistsResponseTransformer = async (data: any): Promise<ListGithubGistsResponse> => {
    data = githubGistListSchemaResponseTransformer(data);
    return data;
};

export const getGithubGistResponseTransformer = async (data: any): Promise<GetGithubGistResponse> => {
    data = githubGistSchemaResponseTransformer(data);
    return data;
};

const githubReleaseListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return githubReleaseReadSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubReleasesResponseTransformer = async (data: any): Promise<ListGithubReleasesResponse> => {
    data = githubReleaseListSchemaResponseTransformer(data);
    return data;
};

const labelSchemaResponseTransformer = (data: any) => {
    data.create_time = new Date(data.create_time);
    data.update_time = new Date(data.update_time);
    return data;
};

const githubRepositoryEdgesSchemaResponseTransformer = (data: any) => {
    if (data.labels) {
        data.labels = data.labels.map((item: any) => {
            return labelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const githubRepositoryReadSchemaResponseTransformer = (data: any) => {
    data = githubRepositorySchemaResponseTransformer(data);
    data.edges = githubRepositoryEdgesSchemaResponseTransformer(data.edges);
    return data;
};

const outdatedRepositoryReleaseSchemaResponseTransformer = (data: any) => {
    data.release = githubReleaseReadSchemaResponseTransformer(data.release);
    data.repository = githubRepositoryReadSchemaResponseTransformer(data.repository);
    return data;
};

export const listOutdatedGithubReleasesResponseTransformer = async (data: any): Promise<ListOutdatedGithubReleasesResponse> => {
    data = data.map((item: any) => {
        return outdatedRepositoryReleaseSchemaResponseTransformer(item);
    });
    return data;
};

export const getGithubReleaseResponseTransformer = async (data: any): Promise<GetGithubReleaseResponse> => {
    data = githubReleaseReadSchemaResponseTransformer(data);
    return data;
};

const githubReleaseAssetListSchemaResponseTransformer = (data: any) => {
    data = data.map((item: any) => {
        return githubAssetSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubReleaseAssetsResponseTransformer = async (data: any): Promise<ListGithubReleaseAssetsResponse> => {
    data = githubReleaseAssetListSchemaResponseTransformer(data);
    return data;
};

export const getGithubReleaseRepositoryResponseTransformer = async (data: any): Promise<GetGithubReleaseRepositoryResponse> => {
    data = githubRepositoryReadSchemaResponseTransformer(data);
    return data;
};

const githubRepositoryListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return githubRepositoryReadSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubRepositoriesResponseTransformer = async (data: any): Promise<ListGithubRepositoriesResponse> => {
    data = githubRepositoryListSchemaResponseTransformer(data);
    return data;
};

export const getGithubRepositoryResponseTransformer = async (data: any): Promise<GetGithubRepositoryResponse> => {
    data = githubRepositoryReadSchemaResponseTransformer(data);
    return data;
};

const githubRepositoryLabelListSchemaResponseTransformer = (data: any) => {
    data = data.map((item: any) => {
        return labelSchemaResponseTransformer(item);
    });
    return data;
};

export const listGithubRepositoryLabelsResponseTransformer = async (data: any): Promise<ListGithubRepositoryLabelsResponse> => {
    data = githubRepositoryLabelListSchemaResponseTransformer(data);
    return data;
};

export const listGithubRepositoryReleasesResponseTransformer = async (data: any): Promise<ListGithubRepositoryReleasesResponse> => {
    data = githubReleaseListSchemaResponseTransformer(data);
    return data;
};

const labelListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return labelSchemaResponseTransformer(item);
    });
    return data;
};

export const listLabelsResponseTransformer = async (data: any): Promise<ListLabelsResponse> => {
    data = labelListSchemaResponseTransformer(data);
    return data;
};

export const createLabelResponseTransformer = async (data: any): Promise<CreateLabelResponse> => {
    data = labelSchemaResponseTransformer(data);
    return data;
};

const labelCountSchemaResponseTransformer = (data: any) => {
    data = labelSchemaResponseTransformer(data);
    return data;
};

const labelCountListSchemaResponseTransformer = (data: any) => {
    data = data.map((item: any) => {
        return labelCountSchemaResponseTransformer(item);
    });
    return data;
};

export const getLabelsCountResponseTransformer = async (data: any): Promise<GetLabelsCountResponse> => {
    data = labelCountListSchemaResponseTransformer(data);
    return data;
};

export const getLabelResponseTransformer = async (data: any): Promise<GetLabelResponse> => {
    data = labelSchemaResponseTransformer(data);
    return data;
};

export const updateLabelResponseTransformer = async (data: any): Promise<UpdateLabelResponse> => {
    data = labelSchemaResponseTransformer(data);
    return data;
};

export const listLabelGithubRepositoriesResponseTransformer = async (data: any): Promise<ListLabelGithubRepositoriesResponse> => {
    data = githubRepositoryListSchemaResponseTransformer(data);
    return data;
};

const postSchemaResponseTransformer = (data: any) => {
    data.create_time = new Date(data.create_time);
    data.update_time = new Date(data.update_time);
    data.published_at = new Date(data.published_at);
    return data;
};

const userSchemaResponseTransformer = (data: any) => {
    data.create_time = new Date(data.create_time);
    data.update_time = new Date(data.update_time);
    return data;
};

const postEdgesSchemaResponseTransformer = (data: any) => {
    data.author = userSchemaResponseTransformer(data.author);
    if (data.labels) {
        data.labels = data.labels.map((item: any) => {
            return labelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const postReadSchemaResponseTransformer = (data: any) => {
    data = postSchemaResponseTransformer(data);
    data.edges = postEdgesSchemaResponseTransformer(data.edges);
    return data;
};

const postListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return postReadSchemaResponseTransformer(item);
    });
    return data;
};

export const listLabelPostsResponseTransformer = async (data: any): Promise<ListLabelPostsResponse> => {
    data = postListSchemaResponseTransformer(data);
    return data;
};

export const listPostsResponseTransformer = async (data: any): Promise<ListPostsResponse> => {
    data = postListSchemaResponseTransformer(data);
    return data;
};

export const createPostResponseTransformer = async (data: any): Promise<CreatePostResponse> => {
    data = postReadSchemaResponseTransformer(data);
    return data;
};

export const getPostResponseTransformer = async (data: any): Promise<GetPostResponse> => {
    data = postReadSchemaResponseTransformer(data);
    return data;
};

export const updatePostResponseTransformer = async (data: any): Promise<UpdatePostResponse> => {
    data = postReadSchemaResponseTransformer(data);
    return data;
};

export const getPostAuthorResponseTransformer = async (data: any): Promise<GetPostAuthorResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

const postLabelListSchemaResponseTransformer = (data: any) => {
    data = data.map((item: any) => {
        return labelSchemaResponseTransformer(item);
    });
    return data;
};

export const listPostLabelsResponseTransformer = async (data: any): Promise<ListPostLabelsResponse> => {
    data = postLabelListSchemaResponseTransformer(data);
    return data;
};

export const getSelfResponseTransformer = async (data: any): Promise<GetSelfResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

const userListSchemaResponseTransformer = (data: any) => {
    data.content = data.content.map((item: any) => {
        return userSchemaResponseTransformer(item);
    });
    return data;
};

export const listUsersResponseTransformer = async (data: any): Promise<ListUsersResponse> => {
    data = userListSchemaResponseTransformer(data);
    return data;
};

export const getUserResponseTransformer = async (data: any): Promise<GetUserResponse> => {
    data = userSchemaResponseTransformer(data);
    return data;
};

export const listUserPostsResponseTransformer = async (data: any): Promise<ListUserPostsResponse> => {
    data = postListSchemaResponseTransformer(data);
    return data;
};