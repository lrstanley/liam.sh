// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions } from '@tanstack/vue-query';
import type { GetGithubSvgData, GetGithubRepoSvgData, ListGithubAssetsData, ListGithubAssetsError, ListGithubAssetsResponse, GetGithubAssetData, GetGithubAssetReleaseData, ListGithubEventsData, ListGithubEventsError, ListGithubEventsResponse, GetGithubEventData, ListGithubGistsData, ListGithubGistsError, ListGithubGistsResponse, GetGithubGistData, ListGithubReleasesData, ListGithubReleasesError, ListGithubReleasesResponse, ListOutdatedGithubReleasesData, GetGithubReleaseData, ListGithubReleaseAssetsData, GetGithubReleaseRepositoryData, ListGithubRepositoriesData, ListGithubRepositoriesError, ListGithubRepositoriesResponse, GetGithubRepositoryData, ListGithubRepositoryLabelsData, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesError, ListGithubRepositoryReleasesResponse, GetGithubUserData, ListLabelsData, ListLabelsError, ListLabelsResponse, CreateLabelData, CreateLabelError, CreateLabelResponse, GetLabelsCountData, GetLabelData, DeleteLabelData, DeleteLabelError, DeleteLabelResponse, UpdateLabelData, UpdateLabelError, UpdateLabelResponse, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesError, ListLabelGithubRepositoriesResponse, ListLabelPostsData, ListLabelPostsError, ListLabelPostsResponse, GetOpenApiData, ListPostsData, ListPostsError, ListPostsResponse, CreatePostData, CreatePostError, CreatePostResponse, RegeneratePostsData, RegeneratePostsError, RegeneratePostsResponse, GetPostData, DeletePostData, DeletePostError, DeletePostResponse, UpdatePostData, UpdatePostError, UpdatePostResponse, GetPostAuthorData, ListPostLabelsData, GetSelfData, GetCodingStatsData, GetGithubStatsData, ListUsersData, ListUsersError, ListUsersResponse, GetUserData, ListUserPostsData, ListUserPostsError, ListUserPostsResponse, GetServiceVersionData } from '../types.gen';
import { client, getGithubSvg, getGithubRepoSvg, listGithubAssets, getGithubAsset, getGithubAssetRelease, listGithubEvents, getGithubEvent, listGithubGists, getGithubGist, listGithubReleases, listOutdatedGithubReleases, getGithubRelease, listGithubReleaseAssets, getGithubReleaseRepository, listGithubRepositories, getGithubRepository, listGithubRepositoryLabels, listGithubRepositoryReleases, getGithubUser, listLabels, createLabel, getLabelsCount, getLabel, deleteLabel, updateLabel, listLabelGithubRepositories, listLabelPosts, getOpenApi, listPosts, createPost, regeneratePosts, getPost, deletePost, updatePost, getPostAuthor, listPostLabels, getSelf, getCodingStats, getGithubStats, listUsers, getUser, listUserPosts, getServiceVersion } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getGithubSvgQueryKey = (options: Options<GetGithubSvgData>) => [
    createQueryKey("getGithubSvg", options)
];

export const getGithubSvgOptions = (options: Options<GetGithubSvgData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubSvg({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubSvgQueryKey(options)
}); };

export const getGithubRepoSvgQueryKey = (options: Options<GetGithubRepoSvgData>) => [
    createQueryKey("getGithubRepoSvg", options)
];

export const getGithubRepoSvgOptions = (options: Options<GetGithubRepoSvgData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubRepoSvg({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubRepoSvgQueryKey(options)
}); };

export const listGithubAssetsQueryKey = (options?: Options<ListGithubAssetsData>) => [
    createQueryKey("listGithubAssets", options)
];

export const listGithubAssetsOptions = (options?: Options<ListGithubAssetsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubAssets({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubAssetsQueryKey(options)
}); };

export const listGithubAssetsInfiniteQueryKey = (options?: Options<ListGithubAssetsData>): QueryKey<Options<ListGithubAssetsData>> => [
    createQueryKey("listGithubAssets", options, true)
];

export const listGithubAssetsInfiniteOptions = (options?: Options<ListGithubAssetsData>) => { return infiniteQueryOptions<ListGithubAssetsResponse, ListGithubAssetsError, InfiniteData<ListGithubAssetsResponse>, QueryKey<Options<ListGithubAssetsData>>, number | Pick<QueryKey<Options<ListGithubAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubAssets({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubAssetsInfiniteQueryKey(options)
}); };

export const getGithubAssetQueryKey = (options: Options<GetGithubAssetData>) => [
    createQueryKey("getGithubAsset", options)
];

export const getGithubAssetOptions = (options: Options<GetGithubAssetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubAsset({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubAssetQueryKey(options)
}); };

export const getGithubAssetReleaseQueryKey = (options: Options<GetGithubAssetReleaseData>) => [
    createQueryKey("getGithubAssetRelease", options)
];

export const getGithubAssetReleaseOptions = (options: Options<GetGithubAssetReleaseData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubAssetRelease({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubAssetReleaseQueryKey(options)
}); };

export const listGithubEventsQueryKey = (options?: Options<ListGithubEventsData>) => [
    createQueryKey("listGithubEvents", options)
];

export const listGithubEventsOptions = (options?: Options<ListGithubEventsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubEvents({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubEventsQueryKey(options)
}); };

export const listGithubEventsInfiniteQueryKey = (options?: Options<ListGithubEventsData>): QueryKey<Options<ListGithubEventsData>> => [
    createQueryKey("listGithubEvents", options, true)
];

export const listGithubEventsInfiniteOptions = (options?: Options<ListGithubEventsData>) => { return infiniteQueryOptions<ListGithubEventsResponse, ListGithubEventsError, InfiniteData<ListGithubEventsResponse>, QueryKey<Options<ListGithubEventsData>>, number | Pick<QueryKey<Options<ListGithubEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubEvents({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubEventsInfiniteQueryKey(options)
}); };

export const getGithubEventQueryKey = (options: Options<GetGithubEventData>) => [
    createQueryKey("getGithubEvent", options)
];

export const getGithubEventOptions = (options: Options<GetGithubEventData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubEvent({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubEventQueryKey(options)
}); };

export const listGithubGistsQueryKey = (options?: Options<ListGithubGistsData>) => [
    createQueryKey("listGithubGists", options)
];

export const listGithubGistsOptions = (options?: Options<ListGithubGistsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubGists({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubGistsQueryKey(options)
}); };

export const listGithubGistsInfiniteQueryKey = (options?: Options<ListGithubGistsData>): QueryKey<Options<ListGithubGistsData>> => [
    createQueryKey("listGithubGists", options, true)
];

export const listGithubGistsInfiniteOptions = (options?: Options<ListGithubGistsData>) => { return infiniteQueryOptions<ListGithubGistsResponse, ListGithubGistsError, InfiniteData<ListGithubGistsResponse>, QueryKey<Options<ListGithubGistsData>>, number | Pick<QueryKey<Options<ListGithubGistsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubGistsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubGists({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubGistsInfiniteQueryKey(options)
}); };

export const getGithubGistQueryKey = (options: Options<GetGithubGistData>) => [
    createQueryKey("getGithubGist", options)
];

export const getGithubGistOptions = (options: Options<GetGithubGistData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubGist({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubGistQueryKey(options)
}); };

export const listGithubReleasesQueryKey = (options?: Options<ListGithubReleasesData>) => [
    createQueryKey("listGithubReleases", options)
];

export const listGithubReleasesOptions = (options?: Options<ListGithubReleasesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubReleases({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubReleasesQueryKey(options)
}); };

export const listGithubReleasesInfiniteQueryKey = (options?: Options<ListGithubReleasesData>): QueryKey<Options<ListGithubReleasesData>> => [
    createQueryKey("listGithubReleases", options, true)
];

export const listGithubReleasesInfiniteOptions = (options?: Options<ListGithubReleasesData>) => { return infiniteQueryOptions<ListGithubReleasesResponse, ListGithubReleasesError, InfiniteData<ListGithubReleasesResponse>, QueryKey<Options<ListGithubReleasesData>>, number | Pick<QueryKey<Options<ListGithubReleasesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubReleasesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubReleases({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubReleasesInfiniteQueryKey(options)
}); };

export const listOutdatedGithubReleasesQueryKey = (options?: Options<ListOutdatedGithubReleasesData>) => [
    createQueryKey("listOutdatedGithubReleases", options)
];

export const listOutdatedGithubReleasesOptions = (options?: Options<ListOutdatedGithubReleasesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listOutdatedGithubReleases({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listOutdatedGithubReleasesQueryKey(options)
}); };

export const getGithubReleaseQueryKey = (options: Options<GetGithubReleaseData>) => [
    createQueryKey("getGithubRelease", options)
];

export const getGithubReleaseOptions = (options: Options<GetGithubReleaseData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubRelease({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubReleaseQueryKey(options)
}); };

export const listGithubReleaseAssetsQueryKey = (options: Options<ListGithubReleaseAssetsData>) => [
    createQueryKey("listGithubReleaseAssets", options)
];

export const listGithubReleaseAssetsOptions = (options: Options<ListGithubReleaseAssetsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubReleaseAssets({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubReleaseAssetsQueryKey(options)
}); };

export const getGithubReleaseRepositoryQueryKey = (options: Options<GetGithubReleaseRepositoryData>) => [
    createQueryKey("getGithubReleaseRepository", options)
];

export const getGithubReleaseRepositoryOptions = (options: Options<GetGithubReleaseRepositoryData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubReleaseRepository({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubReleaseRepositoryQueryKey(options)
}); };

export const listGithubRepositoriesQueryKey = (options?: Options<ListGithubRepositoriesData>) => [
    createQueryKey("listGithubRepositories", options)
];

export const listGithubRepositoriesOptions = (options?: Options<ListGithubRepositoriesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubRepositories({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubRepositoriesQueryKey(options)
}); };

export const listGithubRepositoriesInfiniteQueryKey = (options?: Options<ListGithubRepositoriesData>): QueryKey<Options<ListGithubRepositoriesData>> => [
    createQueryKey("listGithubRepositories", options, true)
];

export const listGithubRepositoriesInfiniteOptions = (options?: Options<ListGithubRepositoriesData>) => { return infiniteQueryOptions<ListGithubRepositoriesResponse, ListGithubRepositoriesError, InfiniteData<ListGithubRepositoriesResponse>, QueryKey<Options<ListGithubRepositoriesData>>, number | Pick<QueryKey<Options<ListGithubRepositoriesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubRepositoriesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubRepositories({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubRepositoriesInfiniteQueryKey(options)
}); };

export const getGithubRepositoryQueryKey = (options: Options<GetGithubRepositoryData>) => [
    createQueryKey("getGithubRepository", options)
];

export const getGithubRepositoryOptions = (options: Options<GetGithubRepositoryData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubRepository({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubRepositoryQueryKey(options)
}); };

export const listGithubRepositoryLabelsQueryKey = (options: Options<ListGithubRepositoryLabelsData>) => [
    createQueryKey("listGithubRepositoryLabels", options)
];

export const listGithubRepositoryLabelsOptions = (options: Options<ListGithubRepositoryLabelsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubRepositoryLabels({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubRepositoryLabelsQueryKey(options)
}); };

export const listGithubRepositoryReleasesQueryKey = (options: Options<ListGithubRepositoryReleasesData>) => [
    createQueryKey("listGithubRepositoryReleases", options)
];

export const listGithubRepositoryReleasesOptions = (options: Options<ListGithubRepositoryReleasesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listGithubRepositoryReleases({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubRepositoryReleasesQueryKey(options)
}); };

export const listGithubRepositoryReleasesInfiniteQueryKey = (options: Options<ListGithubRepositoryReleasesData>): QueryKey<Options<ListGithubRepositoryReleasesData>> => [
    createQueryKey("listGithubRepositoryReleases", options, true)
];

export const listGithubRepositoryReleasesInfiniteOptions = (options: Options<ListGithubRepositoryReleasesData>) => { return infiniteQueryOptions<ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError, InfiniteData<ListGithubRepositoryReleasesResponse>, QueryKey<Options<ListGithubRepositoryReleasesData>>, number | Pick<QueryKey<Options<ListGithubRepositoryReleasesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListGithubRepositoryReleasesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listGithubRepositoryReleases({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listGithubRepositoryReleasesInfiniteQueryKey(options)
}); };

export const getGithubUserQueryKey = (options?: Options<GetGithubUserData>) => [
    createQueryKey("getGithubUser", options)
];

export const getGithubUserOptions = (options?: Options<GetGithubUserData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubUser({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubUserQueryKey(options)
}); };

export const listLabelsQueryKey = (options?: Options<ListLabelsData>) => [
    createQueryKey("listLabels", options)
];

export const listLabelsOptions = (options?: Options<ListLabelsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listLabels({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelsQueryKey(options)
}); };

export const listLabelsInfiniteQueryKey = (options?: Options<ListLabelsData>): QueryKey<Options<ListLabelsData>> => [
    createQueryKey("listLabels", options, true)
];

export const listLabelsInfiniteOptions = (options?: Options<ListLabelsData>) => { return infiniteQueryOptions<ListLabelsResponse, ListLabelsError, InfiniteData<ListLabelsResponse>, QueryKey<Options<ListLabelsData>>, number | Pick<QueryKey<Options<ListLabelsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListLabelsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listLabels({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelsInfiniteQueryKey(options)
}); };

export const createLabelQueryKey = (options: Options<CreateLabelData>) => [
    createQueryKey("createLabel", options)
];

export const createLabelOptions = (options: Options<CreateLabelData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createLabel({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createLabelQueryKey(options)
}); };

export const createLabelMutation = () => { const mutationOptions: UseMutationOptions<CreateLabelResponse, CreateLabelError, Options<CreateLabelData>> = {
    mutationFn: async (options) => {
        const { data } = await createLabel({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getLabelsCountQueryKey = (options?: Options<GetLabelsCountData>) => [
    createQueryKey("getLabelsCount", options)
];

export const getLabelsCountOptions = (options?: Options<GetLabelsCountData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getLabelsCount({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getLabelsCountQueryKey(options)
}); };

export const getLabelQueryKey = (options: Options<GetLabelData>) => [
    createQueryKey("getLabel", options)
];

export const getLabelOptions = (options: Options<GetLabelData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getLabel({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getLabelQueryKey(options)
}); };

export const deleteLabelMutation = () => { const mutationOptions: UseMutationOptions<DeleteLabelResponse, DeleteLabelError, Options<DeleteLabelData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteLabel({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updateLabelMutation = () => { const mutationOptions: UseMutationOptions<UpdateLabelResponse, UpdateLabelError, Options<UpdateLabelData>> = {
    mutationFn: async (options) => {
        const { data } = await updateLabel({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const listLabelGithubRepositoriesQueryKey = (options: Options<ListLabelGithubRepositoriesData>) => [
    createQueryKey("listLabelGithubRepositories", options)
];

export const listLabelGithubRepositoriesOptions = (options: Options<ListLabelGithubRepositoriesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listLabelGithubRepositories({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelGithubRepositoriesQueryKey(options)
}); };

export const listLabelGithubRepositoriesInfiniteQueryKey = (options: Options<ListLabelGithubRepositoriesData>): QueryKey<Options<ListLabelGithubRepositoriesData>> => [
    createQueryKey("listLabelGithubRepositories", options, true)
];

export const listLabelGithubRepositoriesInfiniteOptions = (options: Options<ListLabelGithubRepositoriesData>) => { return infiniteQueryOptions<ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError, InfiniteData<ListLabelGithubRepositoriesResponse>, QueryKey<Options<ListLabelGithubRepositoriesData>>, number | Pick<QueryKey<Options<ListLabelGithubRepositoriesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListLabelGithubRepositoriesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listLabelGithubRepositories({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelGithubRepositoriesInfiniteQueryKey(options)
}); };

export const listLabelPostsQueryKey = (options: Options<ListLabelPostsData>) => [
    createQueryKey("listLabelPosts", options)
];

export const listLabelPostsOptions = (options: Options<ListLabelPostsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listLabelPosts({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelPostsQueryKey(options)
}); };

export const listLabelPostsInfiniteQueryKey = (options: Options<ListLabelPostsData>): QueryKey<Options<ListLabelPostsData>> => [
    createQueryKey("listLabelPosts", options, true)
];

export const listLabelPostsInfiniteOptions = (options: Options<ListLabelPostsData>) => { return infiniteQueryOptions<ListLabelPostsResponse, ListLabelPostsError, InfiniteData<ListLabelPostsResponse>, QueryKey<Options<ListLabelPostsData>>, number | Pick<QueryKey<Options<ListLabelPostsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListLabelPostsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listLabelPosts({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listLabelPostsInfiniteQueryKey(options)
}); };

export const getOpenApiQueryKey = (options?: Options<GetOpenApiData>) => [
    createQueryKey("getOpenApi", options)
];

export const getOpenApiOptions = (options?: Options<GetOpenApiData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getOpenApi({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getOpenApiQueryKey(options)
}); };

export const listPostsQueryKey = (options?: Options<ListPostsData>) => [
    createQueryKey("listPosts", options)
];

export const listPostsOptions = (options?: Options<ListPostsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listPosts({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listPostsQueryKey(options)
}); };

export const listPostsInfiniteQueryKey = (options?: Options<ListPostsData>): QueryKey<Options<ListPostsData>> => [
    createQueryKey("listPosts", options, true)
];

export const listPostsInfiniteOptions = (options?: Options<ListPostsData>) => { return infiniteQueryOptions<ListPostsResponse, ListPostsError, InfiniteData<ListPostsResponse>, QueryKey<Options<ListPostsData>>, number | Pick<QueryKey<Options<ListPostsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListPostsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listPosts({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listPostsInfiniteQueryKey(options)
}); };

export const createPostQueryKey = (options: Options<CreatePostData>) => [
    createQueryKey("createPost", options)
];

export const createPostOptions = (options: Options<CreatePostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createPostQueryKey(options)
}); };

export const createPostMutation = () => { const mutationOptions: UseMutationOptions<CreatePostResponse, CreatePostError, Options<CreatePostData>> = {
    mutationFn: async (options) => {
        const { data } = await createPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const regeneratePostsQueryKey = (options?: Options<RegeneratePostsData>) => [
    createQueryKey("regeneratePosts", options)
];

export const regeneratePostsOptions = (options?: Options<RegeneratePostsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await regeneratePosts({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: regeneratePostsQueryKey(options)
}); };

export const regeneratePostsMutation = () => { const mutationOptions: UseMutationOptions<RegeneratePostsResponse, RegeneratePostsError, Options<RegeneratePostsData>> = {
    mutationFn: async (options) => {
        const { data } = await regeneratePosts({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getPostQueryKey = (options: Options<GetPostData>) => [
    createQueryKey("getPost", options)
];

export const getPostOptions = (options: Options<GetPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getPostQueryKey(options)
}); };

export const deletePostMutation = () => { const mutationOptions: UseMutationOptions<DeletePostResponse, DeletePostError, Options<DeletePostData>> = {
    mutationFn: async (options) => {
        const { data } = await deletePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updatePostMutation = () => { const mutationOptions: UseMutationOptions<UpdatePostResponse, UpdatePostError, Options<UpdatePostData>> = {
    mutationFn: async (options) => {
        const { data } = await updatePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getPostAuthorQueryKey = (options: Options<GetPostAuthorData>) => [
    createQueryKey("getPostAuthor", options)
];

export const getPostAuthorOptions = (options: Options<GetPostAuthorData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getPostAuthor({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getPostAuthorQueryKey(options)
}); };

export const listPostLabelsQueryKey = (options: Options<ListPostLabelsData>) => [
    createQueryKey("listPostLabels", options)
];

export const listPostLabelsOptions = (options: Options<ListPostLabelsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listPostLabels({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listPostLabelsQueryKey(options)
}); };

export const getSelfQueryKey = (options?: Options<GetSelfData>) => [
    createQueryKey("getSelf", options)
];

export const getSelfOptions = (options?: Options<GetSelfData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getSelf({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getSelfQueryKey(options)
}); };

export const getCodingStatsQueryKey = (options?: Options<GetCodingStatsData>) => [
    createQueryKey("getCodingStats", options)
];

export const getCodingStatsOptions = (options?: Options<GetCodingStatsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCodingStats({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getCodingStatsQueryKey(options)
}); };

export const getGithubStatsQueryKey = (options?: Options<GetGithubStatsData>) => [
    createQueryKey("getGithubStats", options)
];

export const getGithubStatsOptions = (options?: Options<GetGithubStatsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getGithubStats({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getGithubStatsQueryKey(options)
}); };

export const listUsersQueryKey = (options?: Options<ListUsersData>) => [
    createQueryKey("listUsers", options)
];

export const listUsersOptions = (options?: Options<ListUsersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listUsers({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listUsersQueryKey(options)
}); };

export const listUsersInfiniteQueryKey = (options?: Options<ListUsersData>): QueryKey<Options<ListUsersData>> => [
    createQueryKey("listUsers", options, true)
];

export const listUsersInfiniteOptions = (options?: Options<ListUsersData>) => { return infiniteQueryOptions<ListUsersResponse, ListUsersError, InfiniteData<ListUsersResponse>, QueryKey<Options<ListUsersData>>, number | Pick<QueryKey<Options<ListUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listUsers({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listUsersInfiniteQueryKey(options)
}); };

export const getUserQueryKey = (options: Options<GetUserData>) => [
    createQueryKey("getUser", options)
];

export const getUserOptions = (options: Options<GetUserData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getUser({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getUserQueryKey(options)
}); };

export const listUserPostsQueryKey = (options: Options<ListUserPostsData>) => [
    createQueryKey("listUserPosts", options)
];

export const listUserPostsOptions = (options: Options<ListUserPostsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listUserPosts({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listUserPostsQueryKey(options)
}); };

export const listUserPostsInfiniteQueryKey = (options: Options<ListUserPostsData>): QueryKey<Options<ListUserPostsData>> => [
    createQueryKey("listUserPosts", options, true)
];

export const listUserPostsInfiniteOptions = (options: Options<ListUserPostsData>) => { return infiniteQueryOptions<ListUserPostsResponse, ListUserPostsError, InfiniteData<ListUserPostsResponse>, QueryKey<Options<ListUserPostsData>>, number | Pick<QueryKey<Options<ListUserPostsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListUserPostsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                page: pageParam
            }
        };
        const { data } = await listUserPosts({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listUserPostsInfiniteQueryKey(options)
}); };

export const getServiceVersionQueryKey = (options?: Options<GetServiceVersionData>) => [
    createQueryKey("getServiceVersion", options)
];

export const getServiceVersionOptions = (options?: Options<GetServiceVersionData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getServiceVersion({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getServiceVersionQueryKey(options)
}); };