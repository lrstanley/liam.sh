// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, type Composable } from '@hey-api/client-nuxt';
import type { GetGithubSvgData, GetGithubSvgError, GetGithubSvgResponse, GetGithubRepoSvgData, GetGithubRepoSvgError, GetGithubRepoSvgResponse, ListGithubAssetsData, ListGithubAssetsError, ListGithubAssetsResponse, GetGithubAssetData, GetGithubAssetError, GetGithubAssetResponse, GetGithubAssetReleaseData, GetGithubAssetReleaseError, GetGithubAssetReleaseResponse, ListGithubEventsData, ListGithubEventsError, ListGithubEventsResponse, GetGithubEventData, GetGithubEventError, GetGithubEventResponse, ListGithubGistsData, ListGithubGistsError, ListGithubGistsResponse, GetGithubGistData, GetGithubGistError, GetGithubGistResponse, ListGithubReleasesData, ListGithubReleasesError, ListGithubReleasesResponse, ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesError, ListOutdatedGithubReleasesResponse, GetGithubReleaseData, GetGithubReleaseError, GetGithubReleaseResponse, ListGithubReleaseAssetsData, ListGithubReleaseAssetsError, ListGithubReleaseAssetsResponse, GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryError, GetGithubReleaseRepositoryResponse, ListGithubRepositoriesData, ListGithubRepositoriesError, ListGithubRepositoriesResponse, GetGithubRepositoryData, GetGithubRepositoryError, GetGithubRepositoryResponse, ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsError, ListGithubRepositoryLabelsResponse, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesError, ListGithubRepositoryReleasesResponse, GetGithubUserData, GetGithubUserError, GetGithubUserResponse, ListLabelsData, ListLabelsError, ListLabelsResponse, CreateLabelData, CreateLabelError, CreateLabelResponse, GetLabelsCountData, GetLabelsCountError, GetLabelsCountResponse, DeleteLabelData, DeleteLabelError, DeleteLabelResponse, GetLabelData, GetLabelError, GetLabelResponse, UpdateLabelData, UpdateLabelError, UpdateLabelResponse, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesError, ListLabelGithubRepositoriesResponse, ListLabelPostsData, ListLabelPostsError, ListLabelPostsResponse, GetOpenApiData, GetOpenApiError, GetOpenApiResponse, ListPostsData, ListPostsError, ListPostsResponse, CreatePostData, CreatePostError, CreatePostResponse, RegeneratePostsData, RegeneratePostsError, DeletePostData, DeletePostError, DeletePostResponse, GetPostData, GetPostError, GetPostResponse, UpdatePostData, UpdatePostError, UpdatePostResponse, GetPostAuthorData, GetPostAuthorError, GetPostAuthorResponse, ListPostLabelsData, ListPostLabelsError, ListPostLabelsResponse, GetSelfData, GetSelfError, GetSelfResponse, GetCodingStatsData, GetCodingStatsError, GetCodingStatsResponse, GetGithubStatsData, GetGithubStatsError, GetGithubStatsResponse, ListUsersData, ListUsersError, ListUsersResponse, GetUserData, GetUserError, GetUserResponse, ListUserPostsData, ListUserPostsError, ListUserPostsResponse, GetServiceVersionData, GetServiceVersionError, GetServiceVersionResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Dynamic SVG generator based off title/description parameters.
 * Dynamic SVG generator based off title/description parameters.
 */
export const getGithubSvg = <TComposable extends Composable>(options: Options<GetGithubSvgData, GetGithubSvgError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubSvgResponse, GetGithubSvgError, TComposable>({
        ...options,
        url: '/gh/svg'
    });
};

/**
 * Dynamic SVG generator based off repo.
 * Dynamic SVG generator based off repo.
 */
export const getGithubRepoSvg = <TComposable extends Composable>(options: Options<GetGithubRepoSvgData, GetGithubRepoSvgError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubRepoSvgResponse, GetGithubRepoSvgError, TComposable>({
        ...options,
        url: '/gh/svg/{ownerID}/{repoID}'
    });
};

/**
 * List githubassets
 * List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubAssets = <TComposable extends Composable>(options?: Options<ListGithubAssetsData, ListGithubAssetsError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubAssetsResponse, ListGithubAssetsError, TComposable>({
        ...options,
        url: '/github-assets'
    });
};

/**
 * Retrieve a githubasset
 * Retrieve a single GithubAsset entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAsset = <TComposable extends Composable>(options: Options<GetGithubAssetData, GetGithubAssetError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubAssetResponse, GetGithubAssetError, TComposable>({
        ...options,
        url: '/github-assets/{githubassetID}'
    });
};

/**
 * Get a githubassets associated release
 * Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAssetRelease = <TComposable extends Composable>(options: Options<GetGithubAssetReleaseData, GetGithubAssetReleaseError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubAssetReleaseResponse, GetGithubAssetReleaseError, TComposable>({
        ...options,
        url: '/github-assets/{githubassetID}/release'
    });
};

/**
 * List githubevents
 * List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubEvents = <TComposable extends Composable>(options?: Options<ListGithubEventsData, ListGithubEventsError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubEventsResponse, ListGithubEventsError, TComposable>({
        ...options,
        url: '/github-events'
    });
};

/**
 * Retrieve a githubevent
 * Retrieve a single GithubEvent entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubEvent = <TComposable extends Composable>(options: Options<GetGithubEventData, GetGithubEventError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubEventResponse, GetGithubEventError, TComposable>({
        ...options,
        url: '/github-events/{githubeventID}'
    });
};

/**
 * List githubgists
 * List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubGists = <TComposable extends Composable>(options?: Options<ListGithubGistsData, ListGithubGistsError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubGistsResponse, ListGithubGistsError, TComposable>({
        ...options,
        url: '/github-gists'
    });
};

/**
 * Retrieve a githubgist
 * Retrieve a single GithubGist entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubGist = <TComposable extends Composable>(options: Options<GetGithubGistData, GetGithubGistError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubGistResponse, GetGithubGistError, TComposable>({
        ...options,
        url: '/github-gists/{githubgistID}'
    });
};

/**
 * List githubreleases
 * List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleases = <TComposable extends Composable>(options?: Options<ListGithubReleasesData, ListGithubReleasesError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubReleasesResponse, ListGithubReleasesError, TComposable>({
        ...options,
        url: '/github-releases'
    });
};

/**
 * Get outdated Github releases
 * List github repositories which have potentially outdated releases.
 */
export const listOutdatedGithubReleases = <TComposable extends Composable>(options?: Options<ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesError, TComposable>) => {
    return (options?.client ?? client).get<ListOutdatedGithubReleasesResponse, ListOutdatedGithubReleasesError, TComposable>({
        ...options,
        url: '/github-releases/outdated'
    });
};

/**
 * Retrieve a githubrelease
 * Retrieve a single GithubRelease entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRelease = <TComposable extends Composable>(options: Options<GetGithubReleaseData, GetGithubReleaseError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubReleaseResponse, GetGithubReleaseError, TComposable>({
        ...options,
        url: '/github-releases/{githubreleaseID}'
    });
};

/**
 * List a githubreleases associated assets
 * List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleaseAssets = <TComposable extends Composable>(options: Options<ListGithubReleaseAssetsData, ListGithubReleaseAssetsError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubReleaseAssetsResponse, ListGithubReleaseAssetsError, TComposable>({
        ...options,
        url: '/github-releases/{githubreleaseID}/assets'
    });
};

/**
 * Get a githubreleases associated repository
 * Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubReleaseRepository = <TComposable extends Composable>(options: Options<GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubReleaseRepositoryResponse, GetGithubReleaseRepositoryError, TComposable>({
        ...options,
        url: '/github-releases/{githubreleaseID}/repository'
    });
};

/**
 * List githubrepositories
 * List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositories = <TComposable extends Composable>(options?: Options<ListGithubRepositoriesData, ListGithubRepositoriesError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubRepositoriesResponse, ListGithubRepositoriesError, TComposable>({
        ...options,
        url: '/github-repositories'
    });
};

/**
 * Retrieve a githubrepository
 * Retrieve a single GithubRepository entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRepository = <TComposable extends Composable>(options: Options<GetGithubRepositoryData, GetGithubRepositoryError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubRepositoryResponse, GetGithubRepositoryError, TComposable>({
        ...options,
        url: '/github-repositories/{githubrepositoryID}'
    });
};

/**
 * List a githubrepositories associated labels
 * List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryLabels = <TComposable extends Composable>(options: Options<ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubRepositoryLabelsResponse, ListGithubRepositoryLabelsError, TComposable>({
        ...options,
        url: '/github-repositories/{githubrepositoryID}/labels'
    });
};

/**
 * List a githubrepositories associated releases
 * List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryReleases = <TComposable extends Composable>(options: Options<ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesError, TComposable>) => {
    return (options?.client ?? client).get<ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError, TComposable>({
        ...options,
        url: '/github-repositories/{githubrepositoryID}/releases'
    });
};

/**
 * Get GitHub user
 * Get the GitHub user.
 */
export const getGithubUser = <TComposable extends Composable>(options?: Options<GetGithubUserData, GetGithubUserError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubUserResponse, GetGithubUserError, TComposable>({
        ...options,
        url: '/github-user'
    });
};

/**
 * List labels
 * List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabels = <TComposable extends Composable>(options?: Options<ListLabelsData, ListLabelsError, TComposable>) => {
    return (options?.client ?? client).get<ListLabelsResponse, ListLabelsError, TComposable>({
        ...options,
        url: '/labels'
    });
};

/**
 * Create a new label
 * Create a new Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createLabel = <TComposable extends Composable>(options: Options<CreateLabelData, CreateLabelError, TComposable>) => {
    return (options?.client ?? client).post<CreateLabelResponse, CreateLabelError, TComposable>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/labels'
    });
};

/**
 * Get labels count
 * Get the edge count for labels.
 */
export const getLabelsCount = <TComposable extends Composable>(options?: Options<GetLabelsCountData, GetLabelsCountError, TComposable>) => {
    return (options?.client ?? client).get<GetLabelsCountResponse, GetLabelsCountError, TComposable>({
        ...options,
        url: '/labels/count'
    });
};

/**
 * Delete a label
 * Delete a single Label entity by its ID.
 */
export const deleteLabel = <TComposable extends Composable>(options: Options<DeleteLabelData, DeleteLabelError, TComposable>) => {
    return (options?.client ?? client).delete<DeleteLabelResponse, DeleteLabelError, TComposable>({
        ...options,
        url: '/labels/{labelID}'
    });
};

/**
 * Retrieve a label
 * Retrieve a single Label entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getLabel = <TComposable extends Composable>(options: Options<GetLabelData, GetLabelError, TComposable>) => {
    return (options?.client ?? client).get<GetLabelResponse, GetLabelError, TComposable>({
        ...options,
        url: '/labels/{labelID}'
    });
};

/**
 * Update a label
 * Update an existing Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updateLabel = <TComposable extends Composable>(options: Options<UpdateLabelData, UpdateLabelError, TComposable>) => {
    return (options?.client ?? client).patch<UpdateLabelResponse, UpdateLabelError, TComposable>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/labels/{labelID}'
    });
};

/**
 * List a labels associated githubRepositories
 * List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelGithubRepositories = <TComposable extends Composable>(options: Options<ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesError, TComposable>) => {
    return (options?.client ?? client).get<ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError, TComposable>({
        ...options,
        url: '/labels/{labelID}/github-repositories'
    });
};

/**
 * List a labels associated posts
 * List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelPosts = <TComposable extends Composable>(options: Options<ListLabelPostsData, ListLabelPostsError, TComposable>) => {
    return (options?.client ?? client).get<ListLabelPostsResponse, ListLabelPostsError, TComposable>({
        ...options,
        url: '/labels/{labelID}/posts'
    });
};

/**
 * Get OpenAPI spec
 * Get the OpenAPI specification for this service.
 */
export const getOpenApi = <TComposable extends Composable>(options?: Options<GetOpenApiData, GetOpenApiError, TComposable>) => {
    return (options?.client ?? client).get<GetOpenApiResponse, GetOpenApiError, TComposable>({
        ...options,
        url: '/openapi.json'
    });
};

/**
 * List posts
 * List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPosts = <TComposable extends Composable>(options?: Options<ListPostsData, ListPostsError, TComposable>) => {
    return (options?.client ?? client).get<ListPostsResponse, ListPostsError, TComposable>({
        ...options,
        url: '/posts'
    });
};

/**
 * Create a new post
 * Create a new Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createPost = <TComposable extends Composable>(options: Options<CreatePostData, CreatePostError, TComposable>) => {
    return (options?.client ?? client).post<CreatePostResponse, CreatePostError, TComposable>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/posts'
    });
};

/**
 * Regenerate posts.
 * Regenerate posts.
 */
export const regeneratePosts = <TComposable extends Composable>(options?: Options<RegeneratePostsData, RegeneratePostsError, TComposable>) => {
    return (options?.client ?? client).post<unknown, RegeneratePostsError, TComposable>({
        ...options,
        url: '/posts/regenerate'
    });
};

/**
 * Delete a post
 * Delete a single Post entity by its ID.
 */
export const deletePost = <TComposable extends Composable>(options: Options<DeletePostData, DeletePostError, TComposable>) => {
    return (options?.client ?? client).delete<DeletePostResponse, DeletePostError, TComposable>({
        ...options,
        url: '/posts/{postID}'
    });
};

/**
 * Retrieve a post
 * Retrieve a single Post entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPost = <TComposable extends Composable>(options: Options<GetPostData, GetPostError, TComposable>) => {
    return (options?.client ?? client).get<GetPostResponse, GetPostError, TComposable>({
        ...options,
        url: '/posts/{postID}'
    });
};

/**
 * Update a post
 * Update an existing Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updatePost = <TComposable extends Composable>(options: Options<UpdatePostData, UpdatePostError, TComposable>) => {
    return (options?.client ?? client).patch<UpdatePostResponse, UpdatePostError, TComposable>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/posts/{postID}'
    });
};

/**
 * Get a posts associated author
 * Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPostAuthor = <TComposable extends Composable>(options: Options<GetPostAuthorData, GetPostAuthorError, TComposable>) => {
    return (options?.client ?? client).get<GetPostAuthorResponse, GetPostAuthorError, TComposable>({
        ...options,
        url: '/posts/{postID}/author'
    });
};

/**
 * List a posts associated labels
 * List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPostLabels = <TComposable extends Composable>(options: Options<ListPostLabelsData, ListPostLabelsError, TComposable>) => {
    return (options?.client ?? client).get<ListPostLabelsResponse, ListPostLabelsError, TComposable>({
        ...options,
        url: '/posts/{postID}/labels'
    });
};

/**
 * Get authenticated user
 * Get the authenticated user.
 */
export const getSelf = <TComposable extends Composable>(options?: Options<GetSelfData, GetSelfError, TComposable>) => {
    return (options?.client ?? client).get<GetSelfResponse, GetSelfError, TComposable>({
        ...options,
        url: '/self'
    });
};

/**
 * Get coding statistics
 * Get coding statistics.
 */
export const getCodingStats = <TComposable extends Composable>(options?: Options<GetCodingStatsData, GetCodingStatsError, TComposable>) => {
    return (options?.client ?? client).get<GetCodingStatsResponse, GetCodingStatsError, TComposable>({
        ...options,
        url: '/stats/coding'
    });
};

/**
 * Get github statistics
 * Get github statistics.
 */
export const getGithubStats = <TComposable extends Composable>(options?: Options<GetGithubStatsData, GetGithubStatsError, TComposable>) => {
    return (options?.client ?? client).get<GetGithubStatsResponse, GetGithubStatsError, TComposable>({
        ...options,
        url: '/stats/github'
    });
};

/**
 * List users
 * List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUsers = <TComposable extends Composable>(options?: Options<ListUsersData, ListUsersError, TComposable>) => {
    return (options?.client ?? client).get<ListUsersResponse, ListUsersError, TComposable>({
        ...options,
        url: '/users'
    });
};

/**
 * Retrieve a user
 * Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getUser = <TComposable extends Composable>(options: Options<GetUserData, GetUserError, TComposable>) => {
    return (options?.client ?? client).get<GetUserResponse, GetUserError, TComposable>({
        ...options,
        url: '/users/{userID}'
    });
};

/**
 * List a users associated posts
 * List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUserPosts = <TComposable extends Composable>(options: Options<ListUserPostsData, ListUserPostsError, TComposable>) => {
    return (options?.client ?? client).get<ListUserPostsResponse, ListUserPostsError, TComposable>({
        ...options,
        url: '/users/{userID}/posts'
    });
};

/**
 * Get service version
 * Get the version of the service.
 */
export const getServiceVersion = <TComposable extends Composable>(options?: Options<GetServiceVersionData, GetServiceVersionError, TComposable>) => {
    return (options?.client ?? client).get<GetServiceVersionResponse, GetServiceVersionError, TComposable>({
        ...options,
        url: '/version'
    });
};