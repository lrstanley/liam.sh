// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, type Composable } from '@hey-api/client-nuxt';
import type { GetGithubSvgData, GetGithubSvgResponse, GetGithubSvgError, GetGithubRepoSvgData, GetGithubRepoSvgResponse, GetGithubRepoSvgError, ListGithubAssetsData, ListGithubAssetsResponse, ListGithubAssetsError, GetGithubAssetData, GetGithubAssetResponse, GetGithubAssetError, GetGithubAssetReleaseData, GetGithubAssetReleaseResponse, GetGithubAssetReleaseError, ListGithubEventsData, ListGithubEventsResponse, ListGithubEventsError, GetGithubEventData, GetGithubEventResponse, GetGithubEventError, ListGithubGistsData, ListGithubGistsResponse, ListGithubGistsError, GetGithubGistData, GetGithubGistResponse, GetGithubGistError, ListGithubReleasesData, ListGithubReleasesResponse, ListGithubReleasesError, ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesResponse, ListOutdatedGithubReleasesError, GetGithubReleaseData, GetGithubReleaseResponse, GetGithubReleaseError, ListGithubReleaseAssetsData, ListGithubReleaseAssetsResponse, ListGithubReleaseAssetsError, GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryResponse, GetGithubReleaseRepositoryError, ListGithubRepositoriesData, ListGithubRepositoriesResponse, ListGithubRepositoriesError, GetGithubRepositoryData, GetGithubRepositoryResponse, GetGithubRepositoryError, ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsResponse, ListGithubRepositoryLabelsError, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError, GetGithubUserData, GetGithubUserResponse, GetGithubUserError, ListLabelsData, ListLabelsResponse, ListLabelsError, CreateLabelData, CreateLabelResponse, CreateLabelError, GetLabelsCountData, GetLabelsCountResponse, GetLabelsCountError, DeleteLabelData, DeleteLabelResponse, DeleteLabelError, GetLabelData, GetLabelResponse, GetLabelError, UpdateLabelData, UpdateLabelResponse, UpdateLabelError, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError, ListLabelPostsData, ListLabelPostsResponse, ListLabelPostsError, GetOpenApiData, GetOpenApiResponse, GetOpenApiError, ListPostsData, ListPostsResponse, ListPostsError, CreatePostData, CreatePostResponse, CreatePostError, RegeneratePostsData, RegeneratePostsError, DeletePostData, DeletePostResponse, DeletePostError, GetPostData, GetPostResponse, GetPostError, UpdatePostData, UpdatePostResponse, UpdatePostError, GetPostAuthorData, GetPostAuthorResponse, GetPostAuthorError, ListPostLabelsData, ListPostLabelsResponse, ListPostLabelsError, GetSelfData, GetSelfResponse, GetSelfError, GetCodingStatsData, GetCodingStatsResponse, GetCodingStatsError, GetGithubStatsData, GetGithubStatsResponse, GetGithubStatsError, ListUsersData, ListUsersResponse, ListUsersError, GetUserData, GetUserResponse, GetUserError, ListUserPostsData, ListUserPostsResponse, ListUserPostsError, GetServiceVersionData, GetServiceVersionResponse, GetServiceVersionError } from './types.gen';
import { listGithubAssetsResponseTransformer, getGithubAssetResponseTransformer, getGithubAssetReleaseResponseTransformer, listGithubEventsResponseTransformer, getGithubEventResponseTransformer, listGithubGistsResponseTransformer, getGithubGistResponseTransformer, listGithubReleasesResponseTransformer, listOutdatedGithubReleasesResponseTransformer, getGithubReleaseResponseTransformer, listGithubReleaseAssetsResponseTransformer, getGithubReleaseRepositoryResponseTransformer, listGithubRepositoriesResponseTransformer, getGithubRepositoryResponseTransformer, listGithubRepositoryLabelsResponseTransformer, listGithubRepositoryReleasesResponseTransformer, listLabelsResponseTransformer, createLabelResponseTransformer, getLabelsCountResponseTransformer, getLabelResponseTransformer, updateLabelResponseTransformer, listLabelGithubRepositoriesResponseTransformer, listLabelPostsResponseTransformer, listPostsResponseTransformer, createPostResponseTransformer, getPostResponseTransformer, updatePostResponseTransformer, getPostAuthorResponseTransformer, listPostLabelsResponseTransformer, getSelfResponseTransformer, listUsersResponseTransformer, getUserResponseTransformer, listUserPostsResponseTransformer } from './transformers.gen';

export const client = createClient(createConfig());

/**
 * Dynamic SVG generator based off title/description parameters.
 * Dynamic SVG generator based off title/description parameters.
 */
export const getGithubSvg = <TComposable extends Composable>(options: Options<TComposable, GetGithubSvgData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubSvgResponse, GetGithubSvgError>({
        url: '/gh/svg',
        ...options
    });
};

/**
 * Dynamic SVG generator based off repo.
 * Dynamic SVG generator based off repo.
 */
export const getGithubRepoSvg = <TComposable extends Composable>(options: Options<TComposable, GetGithubRepoSvgData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubRepoSvgResponse, GetGithubRepoSvgError>({
        url: '/gh/svg/{ownerID}/{repoID}',
        ...options
    });
};

/**
 * List githubassets
 * List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubAssets = <TComposable extends Composable>(options: Options<TComposable, ListGithubAssetsData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubAssetsResponse, ListGithubAssetsError>({
        responseTransformer: listGithubAssetsResponseTransformer,
        url: '/github-assets',
        ...options
    });
};

/**
 * Retrieve a githubasset
 * Retrieve a single GithubAsset entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAsset = <TComposable extends Composable>(options: Options<TComposable, GetGithubAssetData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubAssetResponse, GetGithubAssetError>({
        responseTransformer: getGithubAssetResponseTransformer,
        url: '/github-assets/{githubassetID}',
        ...options
    });
};

/**
 * Get a githubassets associated release
 * Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAssetRelease = <TComposable extends Composable>(options: Options<TComposable, GetGithubAssetReleaseData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubAssetReleaseResponse, GetGithubAssetReleaseError>({
        responseTransformer: getGithubAssetReleaseResponseTransformer,
        url: '/github-assets/{githubassetID}/release',
        ...options
    });
};

/**
 * List githubevents
 * List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubEvents = <TComposable extends Composable>(options: Options<TComposable, ListGithubEventsData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubEventsResponse, ListGithubEventsError>({
        responseTransformer: listGithubEventsResponseTransformer,
        url: '/github-events',
        ...options
    });
};

/**
 * Retrieve a githubevent
 * Retrieve a single GithubEvent entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubEvent = <TComposable extends Composable>(options: Options<TComposable, GetGithubEventData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubEventResponse, GetGithubEventError>({
        responseTransformer: getGithubEventResponseTransformer,
        url: '/github-events/{githubeventID}',
        ...options
    });
};

/**
 * List githubgists
 * List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubGists = <TComposable extends Composable>(options: Options<TComposable, ListGithubGistsData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubGistsResponse, ListGithubGistsError>({
        responseTransformer: listGithubGistsResponseTransformer,
        url: '/github-gists',
        ...options
    });
};

/**
 * Retrieve a githubgist
 * Retrieve a single GithubGist entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubGist = <TComposable extends Composable>(options: Options<TComposable, GetGithubGistData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubGistResponse, GetGithubGistError>({
        responseTransformer: getGithubGistResponseTransformer,
        url: '/github-gists/{githubgistID}',
        ...options
    });
};

/**
 * List githubreleases
 * List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleases = <TComposable extends Composable>(options: Options<TComposable, ListGithubReleasesData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubReleasesResponse, ListGithubReleasesError>({
        responseTransformer: listGithubReleasesResponseTransformer,
        url: '/github-releases',
        ...options
    });
};

/**
 * Get outdated Github releases
 * List github repositories which have potentially outdated releases.
 */
export const listOutdatedGithubReleases = <TComposable extends Composable>(options: Options<TComposable, ListOutdatedGithubReleasesData>) => {
    return (options?.client ?? client).get<TComposable, ListOutdatedGithubReleasesResponse, ListOutdatedGithubReleasesError>({
        responseTransformer: listOutdatedGithubReleasesResponseTransformer,
        url: '/github-releases/outdated',
        ...options
    });
};

/**
 * Retrieve a githubrelease
 * Retrieve a single GithubRelease entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRelease = <TComposable extends Composable>(options: Options<TComposable, GetGithubReleaseData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubReleaseResponse, GetGithubReleaseError>({
        responseTransformer: getGithubReleaseResponseTransformer,
        url: '/github-releases/{githubreleaseID}',
        ...options
    });
};

/**
 * List a githubreleases associated assets
 * List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleaseAssets = <TComposable extends Composable>(options: Options<TComposable, ListGithubReleaseAssetsData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubReleaseAssetsResponse, ListGithubReleaseAssetsError>({
        responseTransformer: listGithubReleaseAssetsResponseTransformer,
        url: '/github-releases/{githubreleaseID}/assets',
        ...options
    });
};

/**
 * Get a githubreleases associated repository
 * Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubReleaseRepository = <TComposable extends Composable>(options: Options<TComposable, GetGithubReleaseRepositoryData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubReleaseRepositoryResponse, GetGithubReleaseRepositoryError>({
        responseTransformer: getGithubReleaseRepositoryResponseTransformer,
        url: '/github-releases/{githubreleaseID}/repository',
        ...options
    });
};

/**
 * List githubrepositories
 * List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositories = <TComposable extends Composable>(options: Options<TComposable, ListGithubRepositoriesData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubRepositoriesResponse, ListGithubRepositoriesError>({
        responseTransformer: listGithubRepositoriesResponseTransformer,
        url: '/github-repositories',
        ...options
    });
};

/**
 * Retrieve a githubrepository
 * Retrieve a single GithubRepository entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRepository = <TComposable extends Composable>(options: Options<TComposable, GetGithubRepositoryData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubRepositoryResponse, GetGithubRepositoryError>({
        responseTransformer: getGithubRepositoryResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}',
        ...options
    });
};

/**
 * List a githubrepositories associated labels
 * List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryLabels = <TComposable extends Composable>(options: Options<TComposable, ListGithubRepositoryLabelsData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubRepositoryLabelsResponse, ListGithubRepositoryLabelsError>({
        responseTransformer: listGithubRepositoryLabelsResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}/labels',
        ...options
    });
};

/**
 * List a githubrepositories associated releases
 * List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryReleases = <TComposable extends Composable>(options: Options<TComposable, ListGithubRepositoryReleasesData>) => {
    return (options?.client ?? client).get<TComposable, ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError>({
        responseTransformer: listGithubRepositoryReleasesResponseTransformer,
        url: '/github-repositories/{githubrepositoryID}/releases',
        ...options
    });
};

/**
 * Get GitHub user
 * Get the GitHub user.
 */
export const getGithubUser = <TComposable extends Composable>(options: Options<TComposable, GetGithubUserData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubUserResponse, GetGithubUserError>({
        url: '/github-user',
        ...options
    });
};

/**
 * List labels
 * List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabels = <TComposable extends Composable>(options: Options<TComposable, ListLabelsData>) => {
    return (options?.client ?? client).get<TComposable, ListLabelsResponse, ListLabelsError>({
        responseTransformer: listLabelsResponseTransformer,
        url: '/labels',
        ...options
    });
};

/**
 * Create a new label
 * Create a new Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createLabel = <TComposable extends Composable>(options: Options<TComposable, CreateLabelData>) => {
    return (options?.client ?? client).post<TComposable, CreateLabelResponse, CreateLabelError>({
        responseTransformer: createLabelResponseTransformer,
        url: '/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get labels count
 * Get the edge count for labels.
 */
export const getLabelsCount = <TComposable extends Composable>(options: Options<TComposable, GetLabelsCountData>) => {
    return (options?.client ?? client).get<TComposable, GetLabelsCountResponse, GetLabelsCountError>({
        responseTransformer: getLabelsCountResponseTransformer,
        url: '/labels/count',
        ...options
    });
};

/**
 * Delete a label
 * Delete a single Label entity by its ID.
 */
export const deleteLabel = <TComposable extends Composable>(options: Options<TComposable, DeleteLabelData>) => {
    return (options?.client ?? client).delete<TComposable, DeleteLabelResponse, DeleteLabelError>({
        url: '/labels/{labelID}',
        ...options
    });
};

/**
 * Retrieve a label
 * Retrieve a single Label entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getLabel = <TComposable extends Composable>(options: Options<TComposable, GetLabelData>) => {
    return (options?.client ?? client).get<TComposable, GetLabelResponse, GetLabelError>({
        responseTransformer: getLabelResponseTransformer,
        url: '/labels/{labelID}',
        ...options
    });
};

/**
 * Update a label
 * Update an existing Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updateLabel = <TComposable extends Composable>(options: Options<TComposable, UpdateLabelData>) => {
    return (options?.client ?? client).patch<TComposable, UpdateLabelResponse, UpdateLabelError>({
        responseTransformer: updateLabelResponseTransformer,
        url: '/labels/{labelID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a labels associated githubRepositories
 * List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelGithubRepositories = <TComposable extends Composable>(options: Options<TComposable, ListLabelGithubRepositoriesData>) => {
    return (options?.client ?? client).get<TComposable, ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError>({
        responseTransformer: listLabelGithubRepositoriesResponseTransformer,
        url: '/labels/{labelID}/github-repositories',
        ...options
    });
};

/**
 * List a labels associated posts
 * List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelPosts = <TComposable extends Composable>(options: Options<TComposable, ListLabelPostsData>) => {
    return (options?.client ?? client).get<TComposable, ListLabelPostsResponse, ListLabelPostsError>({
        responseTransformer: listLabelPostsResponseTransformer,
        url: '/labels/{labelID}/posts',
        ...options
    });
};

/**
 * Get OpenAPI spec
 * Get the OpenAPI specification for this service.
 */
export const getOpenApi = <TComposable extends Composable>(options: Options<TComposable, GetOpenApiData>) => {
    return (options?.client ?? client).get<TComposable, GetOpenApiResponse, GetOpenApiError>({
        url: '/openapi.json',
        ...options
    });
};

/**
 * List posts
 * List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPosts = <TComposable extends Composable>(options: Options<TComposable, ListPostsData>) => {
    return (options?.client ?? client).get<TComposable, ListPostsResponse, ListPostsError>({
        responseTransformer: listPostsResponseTransformer,
        url: '/posts',
        ...options
    });
};

/**
 * Create a new post
 * Create a new Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createPost = <TComposable extends Composable>(options: Options<TComposable, CreatePostData>) => {
    return (options?.client ?? client).post<TComposable, CreatePostResponse, CreatePostError>({
        responseTransformer: createPostResponseTransformer,
        url: '/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Regenerate posts.
 * Regenerate posts.
 */
export const regeneratePosts = <TComposable extends Composable>(options: Options<TComposable, RegeneratePostsData>) => {
    return (options?.client ?? client).post<TComposable, unknown, RegeneratePostsError>({
        url: '/posts/regenerate',
        ...options
    });
};

/**
 * Delete a post
 * Delete a single Post entity by its ID.
 */
export const deletePost = <TComposable extends Composable>(options: Options<TComposable, DeletePostData>) => {
    return (options?.client ?? client).delete<TComposable, DeletePostResponse, DeletePostError>({
        url: '/posts/{postID}',
        ...options
    });
};

/**
 * Retrieve a post
 * Retrieve a single Post entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPost = <TComposable extends Composable>(options: Options<TComposable, GetPostData>) => {
    return (options?.client ?? client).get<TComposable, GetPostResponse, GetPostError>({
        responseTransformer: getPostResponseTransformer,
        url: '/posts/{postID}',
        ...options
    });
};

/**
 * Update a post
 * Update an existing Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updatePost = <TComposable extends Composable>(options: Options<TComposable, UpdatePostData>) => {
    return (options?.client ?? client).patch<TComposable, UpdatePostResponse, UpdatePostError>({
        responseTransformer: updatePostResponseTransformer,
        url: '/posts/{postID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a posts associated author
 * Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPostAuthor = <TComposable extends Composable>(options: Options<TComposable, GetPostAuthorData>) => {
    return (options?.client ?? client).get<TComposable, GetPostAuthorResponse, GetPostAuthorError>({
        responseTransformer: getPostAuthorResponseTransformer,
        url: '/posts/{postID}/author',
        ...options
    });
};

/**
 * List a posts associated labels
 * List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPostLabels = <TComposable extends Composable>(options: Options<TComposable, ListPostLabelsData>) => {
    return (options?.client ?? client).get<TComposable, ListPostLabelsResponse, ListPostLabelsError>({
        responseTransformer: listPostLabelsResponseTransformer,
        url: '/posts/{postID}/labels',
        ...options
    });
};

/**
 * Get authenticated user
 * Get the authenticated user.
 */
export const getSelf = <TComposable extends Composable>(options: Options<TComposable, GetSelfData>) => {
    return (options?.client ?? client).get<TComposable, GetSelfResponse, GetSelfError>({
        responseTransformer: getSelfResponseTransformer,
        url: '/self',
        ...options
    });
};

/**
 * Get coding statistics
 * Get coding statistics.
 */
export const getCodingStats = <TComposable extends Composable>(options: Options<TComposable, GetCodingStatsData>) => {
    return (options?.client ?? client).get<TComposable, GetCodingStatsResponse, GetCodingStatsError>({
        url: '/stats/coding',
        ...options
    });
};

/**
 * Get github statistics
 * Get github statistics.
 */
export const getGithubStats = <TComposable extends Composable>(options: Options<TComposable, GetGithubStatsData>) => {
    return (options?.client ?? client).get<TComposable, GetGithubStatsResponse, GetGithubStatsError>({
        url: '/stats/github',
        ...options
    });
};

/**
 * List users
 * List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUsers = <TComposable extends Composable>(options: Options<TComposable, ListUsersData>) => {
    return (options?.client ?? client).get<TComposable, ListUsersResponse, ListUsersError>({
        responseTransformer: listUsersResponseTransformer,
        url: '/users',
        ...options
    });
};

/**
 * Retrieve a user
 * Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getUser = <TComposable extends Composable>(options: Options<TComposable, GetUserData>) => {
    return (options?.client ?? client).get<TComposable, GetUserResponse, GetUserError>({
        responseTransformer: getUserResponseTransformer,
        url: '/users/{userID}',
        ...options
    });
};

/**
 * List a users associated posts
 * List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUserPosts = <TComposable extends Composable>(options: Options<TComposable, ListUserPostsData>) => {
    return (options?.client ?? client).get<TComposable, ListUserPostsResponse, ListUserPostsError>({
        responseTransformer: listUserPostsResponseTransformer,
        url: '/users/{userID}/posts',
        ...options
    });
};

/**
 * Get service version
 * Get the version of the service.
 */
export const getServiceVersion = <TComposable extends Composable>(options: Options<TComposable, GetServiceVersionData>) => {
    return (options?.client ?? client).get<TComposable, GetServiceVersionResponse, GetServiceVersionError>({
        url: '/version',
        ...options
    });
};