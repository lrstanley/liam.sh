// This file is auto-generated by @hey-api/openapi-ts

export type CodingStats = {
    calculated_days: number;
    languages: Array<LanguageStat>;
    total_duration: string;
    total_duration_short: string;
    total_seconds: number;
};

export type ErrorBadRequest = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorConflict = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorForbidden = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorInternalServerError = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorNotFound = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorTooManyRequests = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorUnauthorized = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

/**
 * Specifies how to combine multiple filters.
 */
export type FilterOperation = 'and' | 'or';

/**
 * Specifies how to combine multiple filters.
 */
export const FilterOperation = {
    AND: 'and',
    OR: 'or'
} as const;

/**
 * A single GithubAsset entity.
 */
export type GithubAsset = {
    /**
     * The ID of the GithubAsset entity.
     */
    id: number;
    /**
     * The ID of the asset.
     */
    asset_id: number;
    /**
     * The URL of the asset.
     */
    browser_download_url: string;
    /**
     * The name of the asset.
     */
    name: string;
    /**
     * The label of the asset.
     */
    label?: string;
    /**
     * The state of the asset.
     */
    state?: string;
    /**
     * The content type of the asset.
     */
    content_type: string;
    /**
     * The size of the asset in bytes.
     */
    size: number;
    download_count: number;
    /**
     * The date the asset was created.
     */
    created_at: string;
    /**
     * The date the asset was last updated.
     */
    updated_at?: string;
    uploader: GithubUser;
};

/**
 * A paginated result set of GithubAsset entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubAssetList = PagedResponse & {
    content: Array<GithubAsset>;
};

export type GithubAssetRead = GithubAsset;

/**
 * All potential sortable fields for GithubAsset entities.
 */
export type GithubAssetSortableFields = 'asset_id' | 'created_at' | 'download_count' | 'id' | 'label' | 'name' | 'random' | 'release.created_at' | 'release.draft' | 'release.id' | 'release.name' | 'release.prerelease' | 'release.published_at' | 'release.release_id' | 'release.tag_name' | 'size' | 'updated_at';

/**
 * All potential sortable fields for GithubAsset entities.
 */
export const GithubAssetSortableFields = {
    ASSET_ID: 'asset_id',
    CREATED_AT: 'created_at',
    DOWNLOAD_COUNT: 'download_count',
    ID: 'id',
    LABEL: 'label',
    NAME: 'name',
    RANDOM: 'random',
    RELEASE_CREATED_AT: 'release.created_at',
    RELEASE_DRAFT: 'release.draft',
    RELEASE_ID: 'release.id',
    RELEASE_NAME: 'release.name',
    RELEASE_PRERELEASE: 'release.prerelease',
    RELEASE_PUBLISHED_AT: 'release.published_at',
    RELEASE_RELEASE_ID: 'release.release_id',
    RELEASE_TAG_NAME: 'release.tag_name',
    SIZE: 'size',
    UPDATED_AT: 'updated_at'
} as const;

/**
 * A single GithubEvent entity.
 */
export type GithubEvent = {
    /**
     * The ID of the GithubEvent entity.
     */
    id: number;
    /**
     * The ID of the event.
     */
    event_id: string;
    /**
     * The type of the event.
     */
    event_type: string;
    /**
     * The date the event was created.
     */
    created_at: string;
    /**
     * Whether the event is public or not.
     */
    public: boolean;
    /**
     * The ID of the actor.
     */
    actor_id: number;
    actor: GithubUser;
    /**
     * The ID of the repository.
     */
    repo_id: number;
    /**
     * The repository of the event.
     */
    repo: {
        [key: string]: unknown;
    };
    /**
     * The payload of the event.
     */
    payload: {
        [key: string]: unknown;
    };
};

/**
 * A paginated result set of GithubEvent entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubEventList = PagedResponse & {
    content: Array<GithubEvent>;
};

export type GithubEventRead = GithubEvent;

/**
 * All potential sortable fields for GithubEvent entities.
 */
export type GithubEventSortableFields = 'actor_id' | 'created_at' | 'event_id' | 'event_type' | 'id' | 'public' | 'random' | 'repo_id';

/**
 * All potential sortable fields for GithubEvent entities.
 */
export const GithubEventSortableFields = {
    ACTOR_ID: 'actor_id',
    CREATED_AT: 'created_at',
    EVENT_ID: 'event_id',
    EVENT_TYPE: 'event_type',
    ID: 'id',
    PUBLIC: 'public',
    RANDOM: 'random',
    REPO_ID: 'repo_id'
} as const;

/**
 * A single GithubGist entity.
 */
export type GithubGist = {
    /**
     * The ID of the GithubGist entity.
     */
    id: number;
    /**
     * The ID of the gist.
     */
    gist_id: string;
    /**
     * The URL of the gist.
     */
    html_url: string;
    /**
     * Whether the gist is public or not.
     */
    public: boolean;
    /**
     * The date the gist was created.
     */
    created_at: string;
    /**
     * The date the gist was last updated.
     */
    updated_at: string;
    /**
     * The description of the gist.
     */
    description?: string;
    owner: GithubUser;
    /**
     * The name of the file.
     */
    name: string;
    /**
     * The type of the file.
     */
    type: string;
    /**
     * The programming language of the file.
     */
    language?: string;
    /**
     * The size of the file in bytes.
     */
    size: number;
    /**
     * The raw URL of the file.
     */
    raw_url: string;
    /**
     * The content of the file.
     */
    content: string;
};

/**
 * A paginated result set of GithubGist entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubGistList = PagedResponse & {
    content: Array<GithubGist>;
};

export type GithubGistRead = GithubGist;

/**
 * All potential sortable fields for GithubGist entities.
 */
export type GithubGistSortableFields = 'created_at' | 'gist_id' | 'id' | 'language' | 'name' | 'public' | 'random' | 'size' | 'type' | 'updated_at';

/**
 * All potential sortable fields for GithubGist entities.
 */
export const GithubGistSortableFields = {
    CREATED_AT: 'created_at',
    GIST_ID: 'gist_id',
    ID: 'id',
    LANGUAGE: 'language',
    NAME: 'name',
    PUBLIC: 'public',
    RANDOM: 'random',
    SIZE: 'size',
    TYPE: 'type',
    UPDATED_AT: 'updated_at'
} as const;

/**
 * A single GithubRelease entity.
 */
export type GithubRelease = {
    /**
     * The ID of the GithubRelease entity.
     */
    id: number;
    /**
     * The ID of the release.
     */
    release_id: number;
    /**
     * The URL of the release.
     */
    html_url: string;
    /**
     * The tag name of the release.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
     */
    target_commitish: string;
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * Indicates whether the release is a draft.
     */
    draft: boolean;
    /**
     * Indicates whether the release is a prerelease.
     */
    prerelease: boolean;
    /**
     * The date the release was created.
     */
    created_at: string;
    /**
     * The date the release was published.
     */
    published_at: string;
    author: GithubUser;
};

/**
 * List of assets associated with githubreleases (githubasset entity type).
 */
export type GithubReleaseAssetList = Array<GithubAsset>;

export type GithubReleaseEdges = {
    repository: GithubRepository;
    /**
     * A list of GithubAsset entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    assets?: Array<GithubAsset>;
};

/**
 * A paginated result set of GithubRelease entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubReleaseList = PagedResponse & {
    content: Array<GithubReleaseRead>;
};

/**
 * A single GithubRelease entity.
 */
export type GithubReleaseRead = GithubRelease & {
    edges: GithubReleaseEdges;
};

/**
 * All potential sortable fields for GithubRelease entities.
 */
export type GithubReleaseSortableFields = 'assets.asset_id.sum' | 'assets.count' | 'assets.download_count.sum' | 'assets.size.sum' | 'created_at' | 'draft' | 'id' | 'name' | 'prerelease' | 'published_at' | 'random' | 'release_id' | 'repository.archived' | 'repository.created_at' | 'repository.default_branch' | 'repository.fork' | 'repository.full_name' | 'repository.has_issues' | 'repository.id' | 'repository.is_template' | 'repository.name' | 'repository.owner_login' | 'repository.public' | 'repository.pushed_at' | 'repository.repo_id' | 'repository.star_count' | 'repository.updated_at' | 'tag_name';

/**
 * All potential sortable fields for GithubRelease entities.
 */
export const GithubReleaseSortableFields = {
    ASSETS_ASSET_ID_SUM: 'assets.asset_id.sum',
    ASSETS_COUNT: 'assets.count',
    ASSETS_DOWNLOAD_COUNT_SUM: 'assets.download_count.sum',
    ASSETS_SIZE_SUM: 'assets.size.sum',
    CREATED_AT: 'created_at',
    DRAFT: 'draft',
    ID: 'id',
    NAME: 'name',
    PRERELEASE: 'prerelease',
    PUBLISHED_AT: 'published_at',
    RANDOM: 'random',
    RELEASE_ID: 'release_id',
    REPOSITORY_ARCHIVED: 'repository.archived',
    REPOSITORY_CREATED_AT: 'repository.created_at',
    REPOSITORY_DEFAULT_BRANCH: 'repository.default_branch',
    REPOSITORY_FORK: 'repository.fork',
    REPOSITORY_FULL_NAME: 'repository.full_name',
    REPOSITORY_HAS_ISSUES: 'repository.has_issues',
    REPOSITORY_ID: 'repository.id',
    REPOSITORY_IS_TEMPLATE: 'repository.is_template',
    REPOSITORY_NAME: 'repository.name',
    REPOSITORY_OWNER_LOGIN: 'repository.owner_login',
    REPOSITORY_PUBLIC: 'repository.public',
    REPOSITORY_PUSHED_AT: 'repository.pushed_at',
    REPOSITORY_REPO_ID: 'repository.repo_id',
    REPOSITORY_STAR_COUNT: 'repository.star_count',
    REPOSITORY_UPDATED_AT: 'repository.updated_at',
    TAG_NAME: 'tag_name'
} as const;

/**
 * A single GithubRepository entity.
 */
export type GithubRepository = {
    /**
     * The ID of the GithubRepository entity.
     */
    id: number;
    /**
     * The ID of the repository.
     */
    repo_id: number;
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * The full name of the repository, which includes the owner.
     */
    full_name: string;
    /**
     * The username which owns the repository (user or organization).
     */
    owner_login: string;
    owner: GithubUser;
    /**
     * Whether the repository is public or not.
     */
    public: boolean;
    /**
     * The URL of the repository.
     */
    html_url: string;
    /**
     * The description of the repository.
     */
    description?: string;
    /**
     * Whether the repository is a fork or not.
     */
    fork: boolean;
    /**
     * The homepage of the repository.
     */
    homepage?: string;
    /**
     * The number of stars the repository has.
     */
    star_count: number;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether the repository is a template repo or not.
     */
    is_template: boolean;
    /**
     * Whether the repository has issues enabled or not.
     */
    has_issues: boolean;
    /**
     * Whether the repository is archived or not.
     */
    archived: boolean;
    /**
     * The date the repository was last pushed to.
     */
    pushed_at?: string;
    /**
     * The date the repository was created.
     */
    created_at: string;
    /**
     * The date the repository was last updated.
     */
    updated_at?: string;
    license?: {
        [key: string]: unknown;
    };
};

export type GithubRepositoryEdges = {
    /**
     * A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    labels?: Array<Label>;
};

/**
 * List of labels associated with githubrepositories (label entity type).
 */
export type GithubRepositoryLabelList = Array<Label>;

/**
 * A paginated result set of GithubRepository entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubRepositoryList = PagedResponse & {
    content: Array<GithubRepositoryRead>;
};

/**
 * A single GithubRepository entity.
 */
export type GithubRepositoryRead = GithubRepository & {
    edges: GithubRepositoryEdges;
};

/**
 * All potential sortable fields for GithubRepository entities.
 */
export type GithubRepositorySortableFields = 'archived' | 'created_at' | 'default_branch' | 'fork' | 'full_name' | 'has_issues' | 'id' | 'is_template' | 'labels.count' | 'name' | 'owner_login' | 'public' | 'pushed_at' | 'random' | 'releases.count' | 'releases.release_id.sum' | 'repo_id' | 'star_count' | 'updated_at';

/**
 * All potential sortable fields for GithubRepository entities.
 */
export const GithubRepositorySortableFields = {
    ARCHIVED: 'archived',
    CREATED_AT: 'created_at',
    DEFAULT_BRANCH: 'default_branch',
    FORK: 'fork',
    FULL_NAME: 'full_name',
    HAS_ISSUES: 'has_issues',
    ID: 'id',
    IS_TEMPLATE: 'is_template',
    LABELS_COUNT: 'labels.count',
    NAME: 'name',
    OWNER_LOGIN: 'owner_login',
    PUBLIC: 'public',
    PUSHED_AT: 'pushed_at',
    RANDOM: 'random',
    RELEASES_COUNT: 'releases.count',
    RELEASES_RELEASE_ID_SUM: 'releases.release_id.sum',
    REPO_ID: 'repo_id',
    STAR_COUNT: 'star_count',
    UPDATED_AT: 'updated_at'
} as const;

export type GithubStats = {
    all_issues: number;
    closed_issues: number;
    commits_year: number;
    contributed_repositories: number;
    open_issues: number;
    pull_requests: number;
    repositories: number;
    stars: number;
};

export type GithubUser = {
    avatar_url: string;
    bio: string;
    collaborators: number;
    created_at: string;
    email: string;
    followers: number;
    following: number;
    html_url: string;
    id: number;
    location: string;
    login: string;
    name: string;
    owned_private_repos: number;
    private_gists: number;
    public_gists: number;
    public_repos: number;
    total_private_repos: number;
    type: string;
    updated_at: string;
    [key: string]: unknown | string | number;
};

/**
 * A single Label entity.
 */
export type Label = {
    /**
     * The ID of the Label entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Label name.
     */
    name: string;
};

export type LabelCount = Label & {
    githubrepository_count: number;
    post_count: number;
    total_count: number;
};

export type LabelCountList = Array<LabelCount>;

/**
 * A single Label entity and the fields that can be created/updated.
 */
export type LabelCreate = {
    /**
     * Time the entity was created.
     */
    create_time?: string;
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Label name.
     */
    name: string;
    posts?: Array<number>;
    github_repositories?: Array<number>;
};

/**
 * A paginated result set of Label entities. Includes eager-loaded edges (if any) for each entity.
 */
export type LabelList = PagedResponse & {
    content: Array<Label>;
};

export type LabelRead = Label;

/**
 * All potential sortable fields for Label entities.
 */
export type LabelSortableFields = 'create_time' | 'github_repositories.count' | 'github_repositories.repo_id.sum' | 'github_repositories.star_count.sum' | 'id' | 'name' | 'posts.count' | 'posts.view_count.sum' | 'random' | 'update_time';

/**
 * All potential sortable fields for Label entities.
 */
export const LabelSortableFields = {
    CREATE_TIME: 'create_time',
    GITHUB_REPOSITORIES_COUNT: 'github_repositories.count',
    GITHUB_REPOSITORIES_REPO_ID_SUM: 'github_repositories.repo_id.sum',
    GITHUB_REPOSITORIES_STAR_COUNT_SUM: 'github_repositories.star_count.sum',
    ID: 'id',
    NAME: 'name',
    POSTS_COUNT: 'posts.count',
    POSTS_VIEW_COUNT_SUM: 'posts.view_count.sum',
    RANDOM: 'random',
    UPDATE_TIME: 'update_time'
} as const;

/**
 * A single Label entity and the fields that can be created/updated.
 */
export type LabelUpdate = {
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Label name.
     */
    name?: string;
    add_posts?: Array<number>;
    remove_posts?: Array<number>;
    add_github_repositories?: Array<number>;
    remove_github_repositories?: Array<number>;
};

export type LanguageStat = {
    hex_color: string;
    key: string;
    /**
     * Total seconds using the language.
     */
    total: number;
    total_duration: string;
};

export type OutdatedRepositoryRelease = {
    release: GithubReleaseRead;
    repository: GithubRepositoryRead;
};

export type PagedResponse = {
    /**
     * Page which the results are associated with.
     */
    page: number;
    /**
     * The number of the last page of results.
     */
    last_page: number;
    /**
     * If true, the current results are the last page of results.
     */
    is_last_page: boolean;
    /**
     * The total number of results based on the provided query.
     */
    total_count: number;
};

/**
 * A single Post entity.
 */
export type Post = {
    /**
     * The ID of the Post entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Post slug.
     */
    slug: string;
    /**
     * Post title.
     */
    title: string;
    /**
     * Post content in Markdown.
     */
    content: string;
    /**
     * Generated HTML content (produced from 'content' field).
     */
    content_html: string;
    /**
     * Post summary, which is produced from the first sentence or two of the post content.
     */
    summary: string;
    published_at: string;
    /**
     * Number of times the post has been viewed.
     */
    view_count: number;
    /**
     * Whether the post is public or not.
     */
    public: boolean;
};

/**
 * A single Post entity and the fields that can be created/updated.
 */
export type PostCreate = {
    /**
     * Time the entity was created.
     */
    create_time?: string;
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Post slug.
     */
    slug: string;
    /**
     * Post title.
     */
    title: string;
    /**
     * Post content in Markdown.
     */
    content: string;
    published_at?: string;
    /**
     * Whether the post is public or not.
     */
    public?: boolean;
    author: number;
    labels?: Array<number>;
};

export type PostEdges = {
    author: User;
    /**
     * A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    labels?: Array<Label>;
};

/**
 * List of labels associated with posts (label entity type).
 */
export type PostLabelList = Array<Label>;

/**
 * A paginated result set of Post entities. Includes eager-loaded edges (if any) for each entity.
 */
export type PostList = PagedResponse & {
    content: Array<PostRead>;
};

/**
 * A single Post entity.
 */
export type PostRead = Post & {
    edges: PostEdges;
};

/**
 * All potential sortable fields for Post entities.
 */
export type PostSortableFields = 'author.create_time' | 'author.email' | 'author.id' | 'author.location' | 'author.login' | 'author.name' | 'author.update_time' | 'create_time' | 'id' | 'labels.count' | 'public' | 'published_at' | 'random' | 'slug' | 'title' | 'update_time' | 'view_count';

/**
 * All potential sortable fields for Post entities.
 */
export const PostSortableFields = {
    AUTHOR_CREATE_TIME: 'author.create_time',
    AUTHOR_EMAIL: 'author.email',
    AUTHOR_ID: 'author.id',
    AUTHOR_LOCATION: 'author.location',
    AUTHOR_LOGIN: 'author.login',
    AUTHOR_NAME: 'author.name',
    AUTHOR_UPDATE_TIME: 'author.update_time',
    CREATE_TIME: 'create_time',
    ID: 'id',
    LABELS_COUNT: 'labels.count',
    PUBLIC: 'public',
    PUBLISHED_AT: 'published_at',
    RANDOM: 'random',
    SLUG: 'slug',
    TITLE: 'title',
    UPDATE_TIME: 'update_time',
    VIEW_COUNT: 'view_count'
} as const;

/**
 * A single Post entity and the fields that can be created/updated.
 */
export type PostUpdate = {
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Post slug.
     */
    slug?: string;
    /**
     * Post title.
     */
    title?: string;
    /**
     * Post content in Markdown.
     */
    content?: string;
    published_at?: string;
    /**
     * Whether the post is public or not.
     */
    public?: boolean;
    author?: number;
    add_labels?: Array<number>;
    remove_labels?: Array<number>;
};

/**
 * A single User entity.
 */
export type User = {
    /**
     * The ID of the User entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Users GitHub ID.
     */
    user_id: number;
    /**
     * Users GitHub login ID (username).
     */
    login: string;
    /**
     * Users GitHub display name.
     */
    name?: string;
    /**
     * GitHub avatar of the user, provided by GitHub.
     */
    avatar_url?: string;
    /**
     * Users GitHub profile URL.
     */
    html_url?: string;
    /**
     * Users GitHub email address.
     */
    email?: string;
    /**
     * Users GitHub location.
     */
    location?: string;
    /**
     * Users GitHub bio.
     */
    bio?: string;
};

/**
 * A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.
 */
export type UserList = PagedResponse & {
    content: Array<User>;
};

export type UserRead = User;

/**
 * All potential sortable fields for User entities.
 */
export type UserSortableFields = 'create_time' | 'email' | 'id' | 'location' | 'login' | 'name' | 'posts.count' | 'posts.view_count.sum' | 'random' | 'update_time';

/**
 * All potential sortable fields for User entities.
 */
export const UserSortableFields = {
    CREATE_TIME: 'create_time',
    EMAIL: 'email',
    ID: 'id',
    LOCATION: 'location',
    LOGIN: 'login',
    NAME: 'name',
    POSTS_COUNT: 'posts.count',
    POSTS_VIEW_COUNT_SUM: 'posts.view_count.sum',
    RANDOM: 'random',
    UPDATE_TIME: 'update_time'
} as const;

export type VersionInfo = {
    /**
     * CPU Architecture for this build.
     */
    arch: string;
    /**
     * VCS commit SHA.
     */
    build_commit: string;
    /**
     * VCS commit date.
     */
    build_date: string;
    /**
     * Build version.
     */
    build_version: string;
    /**
     * Executable name where the command was called from.
     */
    command: string;
    /**
     * Version of Go that produced this binary.
     */
    go_version: string;
    /**
     * Links to other resources.
     */
    links: Array<VersionLink>;
    /**
     * Name of cli tool.
     */
    name: string;
    /**
     * Operating system for this build.
     */
    os: string;
};

export type VersionLink = {
    /**
     * Name of the link.
     */
    name: string;
    /**
     * URL of the link.
     */
    url: string;
};

/**
 * Filters field "asset_id" to be equal to the provided value.
 */
export type EdgeAssetAssetIdeq = number;

/**
 * Filters field "asset_id" to be not equal to the provided value.
 */
export type EdgeAssetAssetIdneq = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type EdgeAssetCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type EdgeAssetCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type EdgeAssetCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type EdgeAssetCreatedAtNeq = string;

/**
 * Filters field "download_count" to be greater than the provided value.
 */
export type EdgeAssetDownloadCountGt = number;

/**
 * Filters field "download_count" to be less than the provided value.
 */
export type EdgeAssetDownloadCountLt = number;

/**
 * Filters field "label" to contain the provided value.
 */
export type EdgeAssetLabelContains = string;

/**
 * Filters field "label" to contain the provided value, case-insensitive.
 */
export type EdgeAssetLabelContainsFold = string;

/**
 * Filters field "label" to be equal to the provided value.
 */
export type EdgeAssetLabelEq = string;

/**
 * Filters field "label" to be equal to the provided value, case-insensitive.
 */
export type EdgeAssetLabelEqualFold = string;

/**
 * Filters field "label" to start with the provided value.
 */
export type EdgeAssetLabelHasPrefix = string;

/**
 * Filters field "label" to end with the provided value.
 */
export type EdgeAssetLabelHasSuffix = string;

/**
 * Filters field "label" to be within the provided values.
 */
export type EdgeAssetLabelIn = Array<string>;

/**
 * Filters field "label" to be null/nil.
 */
export type EdgeAssetLabelIsNil = boolean;

/**
 * Filters field "label" to be not equal to the provided value.
 */
export type EdgeAssetLabelNeq = string;

/**
 * Filters field "label" to be not within the provided values.
 */
export type EdgeAssetLabelNotIn = Array<string>;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeAssetNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeAssetNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeAssetNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeAssetNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeAssetNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeAssetNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeAssetNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeAssetNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeAssetNameNotIn = Array<string>;

/**
 * Filters field "size" to be greater than the provided value.
 */
export type EdgeAssetSizeGt = number;

/**
 * Filters field "size" to be less than the provided value.
 */
export type EdgeAssetSizeLt = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type EdgeAssetUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type EdgeAssetUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type EdgeAssetUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type EdgeAssetUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type EdgeAssetUpdatedAtNeq = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type EdgeAuthorCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type EdgeAuthorCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type EdgeAuthorCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type EdgeAuthorCreateTimeNeq = string;

/**
 * Filters field "email" to contain the provided value.
 */
export type EdgeAuthorEmailContains = string;

/**
 * Filters field "email" to contain the provided value, case-insensitive.
 */
export type EdgeAuthorEmailContainsFold = string;

/**
 * Filters field "email" to be equal to the provided value.
 */
export type EdgeAuthorEmailEq = string;

/**
 * Filters field "email" to be equal to the provided value, case-insensitive.
 */
export type EdgeAuthorEmailEqualFold = string;

/**
 * Filters field "email" to start with the provided value.
 */
export type EdgeAuthorEmailHasPrefix = string;

/**
 * Filters field "email" to end with the provided value.
 */
export type EdgeAuthorEmailHasSuffix = string;

/**
 * Filters field "email" to be within the provided values.
 */
export type EdgeAuthorEmailIn = Array<string>;

/**
 * Filters field "email" to be null/nil.
 */
export type EdgeAuthorEmailIsNil = boolean;

/**
 * Filters field "email" to be not equal to the provided value.
 */
export type EdgeAuthorEmailNeq = string;

/**
 * Filters field "email" to be not within the provided values.
 */
export type EdgeAuthorEmailNotIn = Array<string>;

/**
 * Filters field "location" to contain the provided value.
 */
export type EdgeAuthorLocationContains = string;

/**
 * Filters field "location" to contain the provided value, case-insensitive.
 */
export type EdgeAuthorLocationContainsFold = string;

/**
 * Filters field "location" to be equal to the provided value.
 */
export type EdgeAuthorLocationEq = string;

/**
 * Filters field "location" to be equal to the provided value, case-insensitive.
 */
export type EdgeAuthorLocationEqualFold = string;

/**
 * Filters field "location" to start with the provided value.
 */
export type EdgeAuthorLocationHasPrefix = string;

/**
 * Filters field "location" to end with the provided value.
 */
export type EdgeAuthorLocationHasSuffix = string;

/**
 * Filters field "location" to be within the provided values.
 */
export type EdgeAuthorLocationIn = Array<string>;

/**
 * Filters field "location" to be null/nil.
 */
export type EdgeAuthorLocationIsNil = boolean;

/**
 * Filters field "location" to be not equal to the provided value.
 */
export type EdgeAuthorLocationNeq = string;

/**
 * Filters field "location" to be not within the provided values.
 */
export type EdgeAuthorLocationNotIn = Array<string>;

/**
 * Filters field "login" to contain the provided value.
 */
export type EdgeAuthorLoginContains = string;

/**
 * Filters field "login" to contain the provided value, case-insensitive.
 */
export type EdgeAuthorLoginContainsFold = string;

/**
 * Filters field "login" to be equal to the provided value.
 */
export type EdgeAuthorLoginEq = string;

/**
 * Filters field "login" to be equal to the provided value, case-insensitive.
 */
export type EdgeAuthorLoginEqualFold = string;

/**
 * Filters field "login" to start with the provided value.
 */
export type EdgeAuthorLoginHasPrefix = string;

/**
 * Filters field "login" to end with the provided value.
 */
export type EdgeAuthorLoginHasSuffix = string;

/**
 * Filters field "login" to be within the provided values.
 */
export type EdgeAuthorLoginIn = Array<string>;

/**
 * Filters field "login" to be not equal to the provided value.
 */
export type EdgeAuthorLoginNeq = string;

/**
 * Filters field "login" to be not within the provided values.
 */
export type EdgeAuthorLoginNotIn = Array<string>;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeAuthorNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeAuthorNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeAuthorNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeAuthorNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeAuthorNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeAuthorNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeAuthorNameIn = Array<string>;

/**
 * Filters field "name" to be null/nil.
 */
export type EdgeAuthorNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeAuthorNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeAuthorNameNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type EdgeAuthorUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type EdgeAuthorUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type EdgeAuthorUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type EdgeAuthorUpdateTimeNeq = string;

/**
 * Filters field "user_id" to be equal to the provided value.
 */
export type EdgeAuthorUserIdeq = number;

/**
 * Filters field "user_id" to be within the provided values.
 */
export type EdgeAuthorUserIdIn = Array<number>;

/**
 * Filters field "user_id" to be not equal to the provided value.
 */
export type EdgeAuthorUserIdneq = number;

/**
 * Filters field "user_id" to be not within the provided values.
 */
export type EdgeAuthorUserIdNotIn = Array<number>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type EdgeGithubRepositoryArchivedEq = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type EdgeGithubRepositoryCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type EdgeGithubRepositoryCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type EdgeGithubRepositoryCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryCreatedAtNeq = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type EdgeGithubRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type EdgeGithubRepositoryDefaultBranchEq = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type EdgeGithubRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type EdgeGithubRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type EdgeGithubRepositoryDefaultBranchIn = Array<string>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryDefaultBranchNeq = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type EdgeGithubRepositoryDefaultBranchNotIn = Array<string>;

/**
 * Filters field "description" to contain the provided value.
 */
export type EdgeGithubRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type EdgeGithubRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type EdgeGithubRepositoryForkEq = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type EdgeGithubRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type EdgeGithubRepositoryFullNameEq = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type EdgeGithubRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type EdgeGithubRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type EdgeGithubRepositoryFullNameIn = Array<string>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryFullNameNeq = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type EdgeGithubRepositoryFullNameNotIn = Array<string>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type EdgeGithubRepositoryHasIssuesEq = boolean;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type EdgeGithubRepositoryIsTemplateEq = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeGithubRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeGithubRepositoryNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeGithubRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeGithubRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeGithubRepositoryNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeGithubRepositoryNameNotIn = Array<string>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type EdgeGithubRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type EdgeGithubRepositoryOwnerLoginEq = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type EdgeGithubRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type EdgeGithubRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type EdgeGithubRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type EdgeGithubRepositoryOwnerLoginIn = Array<string>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryOwnerLoginNeq = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type EdgeGithubRepositoryOwnerLoginNotIn = Array<string>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type EdgeGithubRepositoryPublicEq = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type EdgeGithubRepositoryPushedAtIn = Array<string>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type EdgeGithubRepositoryPushedAtNotIn = Array<string>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type EdgeGithubRepositoryRepoIdeq = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryRepoIdneq = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type EdgeGithubRepositoryStarCountGt = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type EdgeGithubRepositoryStarCountLt = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type EdgeGithubRepositoryUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type EdgeGithubRepositoryUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type EdgeGithubRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type EdgeGithubRepositoryUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type EdgeGithubRepositoryUpdatedAtNeq = string;

/**
 * If true, only return entities that have a asset edge.
 */
export type EdgeHasAsset = boolean;

/**
 * If true, only return entities that have a author edge.
 */
export type EdgeHasAuthor = boolean;

/**
 * If true, only return entities that have a github_repository edge.
 */
export type EdgeHasGithubRepository = boolean;

/**
 * If true, only return entities that have a label edge.
 */
export type EdgeHasLabel = boolean;

/**
 * If true, only return entities that have a post edge.
 */
export type EdgeHasPost = boolean;

/**
 * If true, only return entities that have a release edge.
 */
export type EdgeHasRelease = boolean;

/**
 * If true, only return entities that have a repository edge.
 */
export type EdgeHasRepository = boolean;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type EdgeLabelCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type EdgeLabelCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type EdgeLabelCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type EdgeLabelCreateTimeNeq = string;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeLabelNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeLabelNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeLabelNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeLabelNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeLabelNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeLabelNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeLabelNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeLabelNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeLabelNameNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type EdgeLabelUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type EdgeLabelUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type EdgeLabelUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type EdgeLabelUpdateTimeNeq = string;

/**
 * Filters field "content" to contain the provided value.
 */
export type EdgePostContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type EdgePostContentContainsFold = string;

/**
 * Filters field "content_html" to contain the provided value.
 */
export type EdgePostContentHtmlContains = string;

/**
 * Filters field "content_html" to contain the provided value, case-insensitive.
 */
export type EdgePostContentHtmlContainsFold = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type EdgePostCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type EdgePostCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type EdgePostCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type EdgePostCreateTimeNeq = string;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type EdgePostPublicEq = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type EdgePostPublishedAtEq = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type EdgePostPublishedAtGt = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type EdgePostPublishedAtLt = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type EdgePostPublishedAtNeq = string;

/**
 * Filters field "slug" to be equal to the provided value.
 */
export type EdgePostSlugEq = string;

/**
 * Filters field "slug" to be equal to the provided value, case-insensitive.
 */
export type EdgePostSlugEqualFold = string;

/**
 * Filters field "slug" to be not equal to the provided value.
 */
export type EdgePostSlugNeq = string;

/**
 * Filters field "title" to contain the provided value.
 */
export type EdgePostTitleContains = string;

/**
 * Filters field "title" to contain the provided value, case-insensitive.
 */
export type EdgePostTitleContainsFold = string;

/**
 * Filters field "title" to be equal to the provided value.
 */
export type EdgePostTitleEq = string;

/**
 * Filters field "title" to be equal to the provided value, case-insensitive.
 */
export type EdgePostTitleEqualFold = string;

/**
 * Filters field "title" to start with the provided value.
 */
export type EdgePostTitleHasPrefix = string;

/**
 * Filters field "title" to end with the provided value.
 */
export type EdgePostTitleHasSuffix = string;

/**
 * Filters field "title" to be within the provided values.
 */
export type EdgePostTitleIn = Array<string>;

/**
 * Filters field "title" to be not equal to the provided value.
 */
export type EdgePostTitleNeq = string;

/**
 * Filters field "title" to be not within the provided values.
 */
export type EdgePostTitleNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type EdgePostUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type EdgePostUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type EdgePostUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type EdgePostUpdateTimeNeq = string;

/**
 * Filters field "view_count" to be equal to the provided value.
 */
export type EdgePostViewCountEq = number;

/**
 * Filters field "view_count" to be greater than the provided value.
 */
export type EdgePostViewCountGt = number;

/**
 * Filters field "view_count" to be less than the provided value.
 */
export type EdgePostViewCountLt = number;

/**
 * Filters field "view_count" to be not equal to the provided value.
 */
export type EdgePostViewCountNeq = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type EdgeReleaseCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type EdgeReleaseCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type EdgeReleaseCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type EdgeReleaseCreatedAtNeq = string;

/**
 * Filters field "draft" to be equal to the provided value.
 */
export type EdgeReleaseDraftEq = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeReleaseNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeReleaseNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeReleaseNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeReleaseNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeReleaseNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeReleaseNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeReleaseNameIn = Array<string>;

/**
 * Filters field "name" to be null/nil.
 */
export type EdgeReleaseNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeReleaseNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeReleaseNameNotIn = Array<string>;

/**
 * Filters field "prerelease" to be equal to the provided value.
 */
export type EdgeReleasePrereleaseEq = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type EdgeReleasePublishedAtEq = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type EdgeReleasePublishedAtGt = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type EdgeReleasePublishedAtLt = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type EdgeReleasePublishedAtNeq = string;

/**
 * Filters field "release_id" to be equal to the provided value.
 */
export type EdgeReleaseReleaseIdeq = number;

/**
 * Filters field "release_id" to be not equal to the provided value.
 */
export type EdgeReleaseReleaseIdneq = number;

/**
 * Filters field "tag_name" to contain the provided value.
 */
export type EdgeReleaseTagNameContains = string;

/**
 * Filters field "tag_name" to contain the provided value, case-insensitive.
 */
export type EdgeReleaseTagNameContainsFold = string;

/**
 * Filters field "tag_name" to be equal to the provided value.
 */
export type EdgeReleaseTagNameEq = string;

/**
 * Filters field "tag_name" to be equal to the provided value, case-insensitive.
 */
export type EdgeReleaseTagNameEqualFold = string;

/**
 * Filters field "tag_name" to start with the provided value.
 */
export type EdgeReleaseTagNameHasPrefix = string;

/**
 * Filters field "tag_name" to end with the provided value.
 */
export type EdgeReleaseTagNameHasSuffix = string;

/**
 * Filters field "tag_name" to be within the provided values.
 */
export type EdgeReleaseTagNameIn = Array<string>;

/**
 * Filters field "tag_name" to be not equal to the provided value.
 */
export type EdgeReleaseTagNameNeq = string;

/**
 * Filters field "tag_name" to be not within the provided values.
 */
export type EdgeReleaseTagNameNotIn = Array<string>;

/**
 * Filters field "target_commitish" to contain the provided value.
 */
export type EdgeReleaseTargetCommitishContains = string;

/**
 * Filters field "target_commitish" to contain the provided value, case-insensitive.
 */
export type EdgeReleaseTargetCommitishContainsFold = string;

/**
 * Filters field "target_commitish" to be equal to the provided value.
 */
export type EdgeReleaseTargetCommitishEq = string;

/**
 * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
 */
export type EdgeReleaseTargetCommitishEqualFold = string;

/**
 * Filters field "target_commitish" to start with the provided value.
 */
export type EdgeReleaseTargetCommitishHasPrefix = string;

/**
 * Filters field "target_commitish" to end with the provided value.
 */
export type EdgeReleaseTargetCommitishHasSuffix = string;

/**
 * Filters field "target_commitish" to be within the provided values.
 */
export type EdgeReleaseTargetCommitishIn = Array<string>;

/**
 * Filters field "target_commitish" to be not equal to the provided value.
 */
export type EdgeReleaseTargetCommitishNeq = string;

/**
 * Filters field "target_commitish" to be not within the provided values.
 */
export type EdgeReleaseTargetCommitishNotIn = Array<string>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type EdgeRepositoryArchivedEq = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type EdgeRepositoryCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type EdgeRepositoryCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type EdgeRepositoryCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type EdgeRepositoryCreatedAtNeq = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type EdgeRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type EdgeRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type EdgeRepositoryDefaultBranchEq = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type EdgeRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type EdgeRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type EdgeRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type EdgeRepositoryDefaultBranchIn = Array<string>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type EdgeRepositoryDefaultBranchNeq = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type EdgeRepositoryDefaultBranchNotIn = Array<string>;

/**
 * Filters field "description" to contain the provided value.
 */
export type EdgeRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type EdgeRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type EdgeRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type EdgeRepositoryForkEq = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type EdgeRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type EdgeRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type EdgeRepositoryFullNameEq = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type EdgeRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type EdgeRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type EdgeRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type EdgeRepositoryFullNameIn = Array<string>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type EdgeRepositoryFullNameNeq = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type EdgeRepositoryFullNameNotIn = Array<string>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type EdgeRepositoryHasIssuesEq = boolean;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type EdgeRepositoryIsTemplateEq = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type EdgeRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type EdgeRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type EdgeRepositoryNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type EdgeRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type EdgeRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type EdgeRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type EdgeRepositoryNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type EdgeRepositoryNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type EdgeRepositoryNameNotIn = Array<string>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type EdgeRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type EdgeRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type EdgeRepositoryOwnerLoginEq = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type EdgeRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type EdgeRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type EdgeRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type EdgeRepositoryOwnerLoginIn = Array<string>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type EdgeRepositoryOwnerLoginNeq = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type EdgeRepositoryOwnerLoginNotIn = Array<string>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type EdgeRepositoryPublicEq = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type EdgeRepositoryPushedAtIn = Array<string>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type EdgeRepositoryPushedAtNotIn = Array<string>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type EdgeRepositoryRepoIdeq = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type EdgeRepositoryRepoIdneq = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type EdgeRepositoryStarCountGt = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type EdgeRepositoryStarCountLt = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type EdgeRepositoryUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type EdgeRepositoryUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type EdgeRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type EdgeRepositoryUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type EdgeRepositoryUpdatedAtNeq = string;

/**
 * Filter operation to use.
 */
export type FilterOperation2 = FilterOperation;

/**
 * Filters field "asset_id" to be equal to the provided value.
 */
export type GithubAssetAssetIdeq = number;

/**
 * Filters field "asset_id" to be not equal to the provided value.
 */
export type GithubAssetAssetIdneq = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type GithubAssetCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type GithubAssetCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type GithubAssetCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type GithubAssetCreatedAtNeq = string;

/**
 * Filters field "download_count" to be greater than the provided value.
 */
export type GithubAssetDownloadCountGt = number;

/**
 * Filters field "download_count" to be less than the provided value.
 */
export type GithubAssetDownloadCountLt = number;

/**
 * The ID of the GithubAsset to act upon.
 */
export type GithubAssetId = number;

/**
 * Filters field "label" to contain the provided value.
 */
export type GithubAssetLabelContains = string;

/**
 * Filters field "label" to contain the provided value, case-insensitive.
 */
export type GithubAssetLabelContainsFold = string;

/**
 * Filters field "label" to be equal to the provided value.
 */
export type GithubAssetLabelEq = string;

/**
 * Filters field "label" to be equal to the provided value, case-insensitive.
 */
export type GithubAssetLabelEqualFold = string;

/**
 * Filters field "label" to start with the provided value.
 */
export type GithubAssetLabelHasPrefix = string;

/**
 * Filters field "label" to end with the provided value.
 */
export type GithubAssetLabelHasSuffix = string;

/**
 * Filters field "label" to be within the provided values.
 */
export type GithubAssetLabelIn = Array<string>;

/**
 * Filters field "label" to be null/nil.
 */
export type GithubAssetLabelIsNil = boolean;

/**
 * Filters field "label" to be not equal to the provided value.
 */
export type GithubAssetLabelNeq = string;

/**
 * Filters field "label" to be not within the provided values.
 */
export type GithubAssetLabelNotIn = Array<string>;

/**
 * Filters field "name" to contain the provided value.
 */
export type GithubAssetNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type GithubAssetNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type GithubAssetNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type GithubAssetNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type GithubAssetNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type GithubAssetNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type GithubAssetNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type GithubAssetNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type GithubAssetNameNotIn = Array<string>;

/**
 * Filters field "size" to be greater than the provided value.
 */
export type GithubAssetSizeGt = number;

/**
 * Filters field "size" to be less than the provided value.
 */
export type GithubAssetSizeLt = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type GithubAssetUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type GithubAssetUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type GithubAssetUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type GithubAssetUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type GithubAssetUpdatedAtNeq = string;

/**
 * Filters field "actor_id" to be equal to the provided value.
 */
export type GithubEventActorIdeq = number;

/**
 * Filters field "actor_id" to be not equal to the provided value.
 */
export type GithubEventActorIdneq = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type GithubEventCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type GithubEventCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type GithubEventCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type GithubEventCreatedAtNeq = string;

/**
 * Filters field "event_id" to be equal to the provided value.
 */
export type GithubEventEventIdeq = string;

/**
 * Filters field "event_id" to be equal to the provided value, case-insensitive.
 */
export type GithubEventEventIdEqualFold = string;

/**
 * Filters field "event_id" to be not equal to the provided value.
 */
export type GithubEventEventIdneq = string;

/**
 * Filters field "event_type" to contain the provided value.
 */
export type GithubEventEventTypeContains = string;

/**
 * Filters field "event_type" to contain the provided value, case-insensitive.
 */
export type GithubEventEventTypeContainsFold = string;

/**
 * Filters field "event_type" to be equal to the provided value.
 */
export type GithubEventEventTypeEq = string;

/**
 * Filters field "event_type" to be equal to the provided value, case-insensitive.
 */
export type GithubEventEventTypeEqualFold = string;

/**
 * Filters field "event_type" to start with the provided value.
 */
export type GithubEventEventTypeHasPrefix = string;

/**
 * Filters field "event_type" to end with the provided value.
 */
export type GithubEventEventTypeHasSuffix = string;

/**
 * Filters field "event_type" to be within the provided values.
 */
export type GithubEventEventTypeIn = Array<string>;

/**
 * Filters field "event_type" to be not equal to the provided value.
 */
export type GithubEventEventTypeNeq = string;

/**
 * Filters field "event_type" to be not within the provided values.
 */
export type GithubEventEventTypeNotIn = Array<string>;

/**
 * The ID of the GithubEvent to act upon.
 */
export type GithubEventId = number;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type GithubEventPublicEq = boolean;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type GithubEventRepoIdeq = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type GithubEventRepoIdneq = number;

/**
 * Filters field "content" to contain the provided value.
 */
export type GithubGistContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type GithubGistContentContainsFold = string;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type GithubGistCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type GithubGistCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type GithubGistCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type GithubGistCreatedAtNeq = string;

/**
 * Filters field "description" to contain the provided value.
 */
export type GithubGistDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type GithubGistDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type GithubGistDescriptionIsNil = boolean;

/**
 * Filters field "gist_id" to be equal to the provided value.
 */
export type GithubGistGistIdeq = string;

/**
 * Filters field "gist_id" to be equal to the provided value, case-insensitive.
 */
export type GithubGistGistIdEqualFold = string;

/**
 * Filters field "gist_id" to be not equal to the provided value.
 */
export type GithubGistGistIdneq = string;

/**
 * The ID of the GithubGist to act upon.
 */
export type GithubGistId = number;

/**
 * Filters field "language" to contain the provided value.
 */
export type GithubGistLanguageContains = string;

/**
 * Filters field "language" to contain the provided value, case-insensitive.
 */
export type GithubGistLanguageContainsFold = string;

/**
 * Filters field "language" to be equal to the provided value.
 */
export type GithubGistLanguageEq = string;

/**
 * Filters field "language" to be equal to the provided value, case-insensitive.
 */
export type GithubGistLanguageEqualFold = string;

/**
 * Filters field "language" to start with the provided value.
 */
export type GithubGistLanguageHasPrefix = string;

/**
 * Filters field "language" to end with the provided value.
 */
export type GithubGistLanguageHasSuffix = string;

/**
 * Filters field "language" to be within the provided values.
 */
export type GithubGistLanguageIn = Array<string>;

/**
 * Filters field "language" to be null/nil.
 */
export type GithubGistLanguageIsNil = boolean;

/**
 * Filters field "language" to be not equal to the provided value.
 */
export type GithubGistLanguageNeq = string;

/**
 * Filters field "language" to be not within the provided values.
 */
export type GithubGistLanguageNotIn = Array<string>;

/**
 * Filters field "name" to contain the provided value.
 */
export type GithubGistNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type GithubGistNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type GithubGistNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type GithubGistNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type GithubGistNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type GithubGistNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type GithubGistNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type GithubGistNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type GithubGistNameNotIn = Array<string>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type GithubGistPublicEq = boolean;

/**
 * Filters field "size" to be equal to the provided value.
 */
export type GithubGistSizeEq = number;

/**
 * Filters field "size" to be not equal to the provided value.
 */
export type GithubGistSizeNeq = number;

/**
 * Filters field "type" to contain the provided value.
 */
export type GithubGistTypeContains = string;

/**
 * Filters field "type" to contain the provided value, case-insensitive.
 */
export type GithubGistTypeContainsFold = string;

/**
 * Filters field "type" to be equal to the provided value.
 */
export type GithubGistTypeEq = string;

/**
 * Filters field "type" to be equal to the provided value, case-insensitive.
 */
export type GithubGistTypeEqualFold = string;

/**
 * Filters field "type" to start with the provided value.
 */
export type GithubGistTypeHasPrefix = string;

/**
 * Filters field "type" to end with the provided value.
 */
export type GithubGistTypeHasSuffix = string;

/**
 * Filters field "type" to be within the provided values.
 */
export type GithubGistTypeIn = Array<string>;

/**
 * Filters field "type" to be not equal to the provided value.
 */
export type GithubGistTypeNeq = string;

/**
 * Filters field "type" to be not within the provided values.
 */
export type GithubGistTypeNotIn = Array<string>;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type GithubGistUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type GithubGistUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type GithubGistUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type GithubGistUpdatedAtNeq = string;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type GithubReleaseCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type GithubReleaseCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type GithubReleaseCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type GithubReleaseCreatedAtNeq = string;

/**
 * Filters field "draft" to be equal to the provided value.
 */
export type GithubReleaseDraftEq = boolean;

/**
 * The ID of the GithubRelease to act upon.
 */
export type GithubReleaseId = number;

/**
 * Filters field "name" to contain the provided value.
 */
export type GithubReleaseNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type GithubReleaseNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type GithubReleaseNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type GithubReleaseNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type GithubReleaseNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type GithubReleaseNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type GithubReleaseNameIn = Array<string>;

/**
 * Filters field "name" to be null/nil.
 */
export type GithubReleaseNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type GithubReleaseNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type GithubReleaseNameNotIn = Array<string>;

/**
 * Filters field "prerelease" to be equal to the provided value.
 */
export type GithubReleasePrereleaseEq = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type GithubReleasePublishedAtEq = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type GithubReleasePublishedAtGt = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type GithubReleasePublishedAtLt = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type GithubReleasePublishedAtNeq = string;

/**
 * Filters field "release_id" to be equal to the provided value.
 */
export type GithubReleaseReleaseIdeq = number;

/**
 * Filters field "release_id" to be not equal to the provided value.
 */
export type GithubReleaseReleaseIdneq = number;

/**
 * Filters field "tag_name" to contain the provided value.
 */
export type GithubReleaseTagNameContains = string;

/**
 * Filters field "tag_name" to contain the provided value, case-insensitive.
 */
export type GithubReleaseTagNameContainsFold = string;

/**
 * Filters field "tag_name" to be equal to the provided value.
 */
export type GithubReleaseTagNameEq = string;

/**
 * Filters field "tag_name" to be equal to the provided value, case-insensitive.
 */
export type GithubReleaseTagNameEqualFold = string;

/**
 * Filters field "tag_name" to start with the provided value.
 */
export type GithubReleaseTagNameHasPrefix = string;

/**
 * Filters field "tag_name" to end with the provided value.
 */
export type GithubReleaseTagNameHasSuffix = string;

/**
 * Filters field "tag_name" to be within the provided values.
 */
export type GithubReleaseTagNameIn = Array<string>;

/**
 * Filters field "tag_name" to be not equal to the provided value.
 */
export type GithubReleaseTagNameNeq = string;

/**
 * Filters field "tag_name" to be not within the provided values.
 */
export type GithubReleaseTagNameNotIn = Array<string>;

/**
 * Filters field "target_commitish" to contain the provided value.
 */
export type GithubReleaseTargetCommitishContains = string;

/**
 * Filters field "target_commitish" to contain the provided value, case-insensitive.
 */
export type GithubReleaseTargetCommitishContainsFold = string;

/**
 * Filters field "target_commitish" to be equal to the provided value.
 */
export type GithubReleaseTargetCommitishEq = string;

/**
 * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
 */
export type GithubReleaseTargetCommitishEqualFold = string;

/**
 * Filters field "target_commitish" to start with the provided value.
 */
export type GithubReleaseTargetCommitishHasPrefix = string;

/**
 * Filters field "target_commitish" to end with the provided value.
 */
export type GithubReleaseTargetCommitishHasSuffix = string;

/**
 * Filters field "target_commitish" to be within the provided values.
 */
export type GithubReleaseTargetCommitishIn = Array<string>;

/**
 * Filters field "target_commitish" to be not equal to the provided value.
 */
export type GithubReleaseTargetCommitishNeq = string;

/**
 * Filters field "target_commitish" to be not within the provided values.
 */
export type GithubReleaseTargetCommitishNotIn = Array<string>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type GithubRepositoryArchivedEq = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type GithubRepositoryCreatedAtEq = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type GithubRepositoryCreatedAtGt = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type GithubRepositoryCreatedAtLt = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type GithubRepositoryCreatedAtNeq = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type GithubRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type GithubRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type GithubRepositoryDefaultBranchEq = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type GithubRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type GithubRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type GithubRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type GithubRepositoryDefaultBranchIn = Array<string>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type GithubRepositoryDefaultBranchNeq = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type GithubRepositoryDefaultBranchNotIn = Array<string>;

/**
 * Filters field "description" to contain the provided value.
 */
export type GithubRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type GithubRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type GithubRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type GithubRepositoryForkEq = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type GithubRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type GithubRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type GithubRepositoryFullNameEq = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type GithubRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type GithubRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type GithubRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type GithubRepositoryFullNameIn = Array<string>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type GithubRepositoryFullNameNeq = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type GithubRepositoryFullNameNotIn = Array<string>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type GithubRepositoryHasIssuesEq = boolean;

/**
 * The ID of the GithubRepository to act upon.
 */
export type GithubRepositoryId = number;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type GithubRepositoryIsTemplateEq = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type GithubRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type GithubRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type GithubRepositoryNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type GithubRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type GithubRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type GithubRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type GithubRepositoryNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type GithubRepositoryNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type GithubRepositoryNameNotIn = Array<string>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type GithubRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type GithubRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type GithubRepositoryOwnerLoginEq = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type GithubRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type GithubRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type GithubRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type GithubRepositoryOwnerLoginIn = Array<string>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type GithubRepositoryOwnerLoginNeq = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type GithubRepositoryOwnerLoginNotIn = Array<string>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type GithubRepositoryPublicEq = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type GithubRepositoryPushedAtIn = Array<string>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type GithubRepositoryPushedAtNotIn = Array<string>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type GithubRepositoryRepoIdeq = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type GithubRepositoryRepoIdneq = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type GithubRepositoryStarCountGt = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type GithubRepositoryStarCountLt = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type GithubRepositoryUpdatedAtEq = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type GithubRepositoryUpdatedAtGt = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type GithubRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type GithubRepositoryUpdatedAtLt = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type GithubRepositoryUpdatedAtNeq = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type LabelCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type LabelCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type LabelCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type LabelCreateTimeNeq = string;

/**
 * The ID of the Label to act upon.
 */
export type LabelId = number;

/**
 * Filters field "name" to contain the provided value.
 */
export type LabelNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type LabelNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type LabelNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type LabelNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type LabelNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type LabelNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type LabelNameIn = Array<string>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type LabelNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type LabelNameNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type LabelUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type LabelUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type LabelUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type LabelUpdateTimeNeq = string;

/**
 * The page number to retrieve.
 */
export type Page = number;

/**
 * Filters field "content" to contain the provided value.
 */
export type PostContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type PostContentContainsFold = string;

/**
 * Filters field "content_html" to contain the provided value.
 */
export type PostContentHtmlContains = string;

/**
 * Filters field "content_html" to contain the provided value, case-insensitive.
 */
export type PostContentHtmlContainsFold = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type PostCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type PostCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type PostCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type PostCreateTimeNeq = string;

/**
 * The ID of the Post to act upon.
 */
export type PostId = number;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type PostPublicEq = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type PostPublishedAtEq = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type PostPublishedAtGt = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type PostPublishedAtLt = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type PostPublishedAtNeq = string;

/**
 * Filters field "slug" to be equal to the provided value.
 */
export type PostSlugEq = string;

/**
 * Filters field "slug" to be equal to the provided value, case-insensitive.
 */
export type PostSlugEqualFold = string;

/**
 * Filters field "slug" to be not equal to the provided value.
 */
export type PostSlugNeq = string;

/**
 * Filters field "title" to contain the provided value.
 */
export type PostTitleContains = string;

/**
 * Filters field "title" to contain the provided value, case-insensitive.
 */
export type PostTitleContainsFold = string;

/**
 * Filters field "title" to be equal to the provided value.
 */
export type PostTitleEq = string;

/**
 * Filters field "title" to be equal to the provided value, case-insensitive.
 */
export type PostTitleEqualFold = string;

/**
 * Filters field "title" to start with the provided value.
 */
export type PostTitleHasPrefix = string;

/**
 * Filters field "title" to end with the provided value.
 */
export type PostTitleHasSuffix = string;

/**
 * Filters field "title" to be within the provided values.
 */
export type PostTitleIn = Array<string>;

/**
 * Filters field "title" to be not equal to the provided value.
 */
export type PostTitleNeq = string;

/**
 * Filters field "title" to be not within the provided values.
 */
export type PostTitleNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type PostUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type PostUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type PostUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type PostUpdateTimeNeq = string;

/**
 * Filters field "view_count" to be equal to the provided value.
 */
export type PostViewCountEq = number;

/**
 * Filters field "view_count" to be greater than the provided value.
 */
export type PostViewCountGt = number;

/**
 * Filters field "view_count" to be less than the provided value.
 */
export type PostViewCountLt = number;

/**
 * Filters field "view_count" to be not equal to the provided value.
 */
export type PostViewCountNeq = number;

/**
 * If set to true, any JSON response will be indented.
 */
export type PrettyResponse = boolean;

/**
 * Background type.
 */
export type SvgBackground = 'geometric' | 'topography';

/**
 * Background type.
 */
export const SvgBackground = {
    GEOMETRIC: 'geometric',
    TOPOGRAPHY: 'topography'
} as const;

/**
 * Background color (hex, rgb, rgba, hsl).
 */
export type SvgBackgroundColor = string;

/**
 * Description of the project (not required if using owner/repo).
 */
export type SvgDescription = string;

/**
 * Font scale.
 */
export type SvgFontScale = number;

/**
 * Height of the SVG (in px).
 */
export type SvgHeight = number;

/**
 * Iconidfy icon to use.
 */
export type SvgIcon = string;

/**
 * Color of the icon (hex, rgb, rgba, hsl).
 */
export type SvgIconColor = string;

/**
 * Flip the icon.
 */
export type SvgIconFlip = 'horizontal' | 'vertical';

/**
 * Flip the icon.
 */
export const SvgIconFlip = {
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
} as const;

/**
 * Height of the icon (in px).
 */
export type SvgIconHeight = number;

/**
 * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
 */
export type SvgIconRotate = 1 | 2 | 3;

/**
 * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
 */
export const SvgIconRotate = {
    1: 1,
    2: 2,
    3: 3
} as const;

/**
 * Width of the icon (in px).
 */
export type SvgIconWidth = number;

/**
 * Layout of the SVG.
 */
export type SvgLayout = 'all' | 'left' | 'right';

/**
 * Layout of the SVG.
 */
export const SvgLayout = {
    ALL: 'all',
    LEFT: 'left',
    RIGHT: 'right'
} as const;

/**
 * Title of the project (not required if using owner/repo).
 */
export type SvgTitle = string;

/**
 * Width of the SVG (in px).
 */
export type SvgWidth = number;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type UserCreateTimeEq = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type UserCreateTimeGt = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type UserCreateTimeLt = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type UserCreateTimeNeq = string;

/**
 * Filters field "email" to contain the provided value.
 */
export type UserEmailContains = string;

/**
 * Filters field "email" to contain the provided value, case-insensitive.
 */
export type UserEmailContainsFold = string;

/**
 * Filters field "email" to be equal to the provided value.
 */
export type UserEmailEq = string;

/**
 * Filters field "email" to be equal to the provided value, case-insensitive.
 */
export type UserEmailEqualFold = string;

/**
 * Filters field "email" to start with the provided value.
 */
export type UserEmailHasPrefix = string;

/**
 * Filters field "email" to end with the provided value.
 */
export type UserEmailHasSuffix = string;

/**
 * Filters field "email" to be within the provided values.
 */
export type UserEmailIn = Array<string>;

/**
 * Filters field "email" to be null/nil.
 */
export type UserEmailIsNil = boolean;

/**
 * Filters field "email" to be not equal to the provided value.
 */
export type UserEmailNeq = string;

/**
 * Filters field "email" to be not within the provided values.
 */
export type UserEmailNotIn = Array<string>;

/**
 * The ID of the User to act upon.
 */
export type UserId = number;

/**
 * Filters field "location" to contain the provided value.
 */
export type UserLocationContains = string;

/**
 * Filters field "location" to contain the provided value, case-insensitive.
 */
export type UserLocationContainsFold = string;

/**
 * Filters field "location" to be equal to the provided value.
 */
export type UserLocationEq = string;

/**
 * Filters field "location" to be equal to the provided value, case-insensitive.
 */
export type UserLocationEqualFold = string;

/**
 * Filters field "location" to start with the provided value.
 */
export type UserLocationHasPrefix = string;

/**
 * Filters field "location" to end with the provided value.
 */
export type UserLocationHasSuffix = string;

/**
 * Filters field "location" to be within the provided values.
 */
export type UserLocationIn = Array<string>;

/**
 * Filters field "location" to be null/nil.
 */
export type UserLocationIsNil = boolean;

/**
 * Filters field "location" to be not equal to the provided value.
 */
export type UserLocationNeq = string;

/**
 * Filters field "location" to be not within the provided values.
 */
export type UserLocationNotIn = Array<string>;

/**
 * Filters field "login" to contain the provided value.
 */
export type UserLoginContains = string;

/**
 * Filters field "login" to contain the provided value, case-insensitive.
 */
export type UserLoginContainsFold = string;

/**
 * Filters field "login" to be equal to the provided value.
 */
export type UserLoginEq = string;

/**
 * Filters field "login" to be equal to the provided value, case-insensitive.
 */
export type UserLoginEqualFold = string;

/**
 * Filters field "login" to start with the provided value.
 */
export type UserLoginHasPrefix = string;

/**
 * Filters field "login" to end with the provided value.
 */
export type UserLoginHasSuffix = string;

/**
 * Filters field "login" to be within the provided values.
 */
export type UserLoginIn = Array<string>;

/**
 * Filters field "login" to be not equal to the provided value.
 */
export type UserLoginNeq = string;

/**
 * Filters field "login" to be not within the provided values.
 */
export type UserLoginNotIn = Array<string>;

/**
 * Filters field "name" to contain the provided value.
 */
export type UserNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type UserNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type UserNameEq = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type UserNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type UserNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type UserNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type UserNameIn = Array<string>;

/**
 * Filters field "name" to be null/nil.
 */
export type UserNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type UserNameNeq = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type UserNameNotIn = Array<string>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type UserUpdateTimeEq = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type UserUpdateTimeGt = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type UserUpdateTimeLt = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type UserUpdateTimeNeq = string;

/**
 * Filters field "user_id" to be equal to the provided value.
 */
export type UserUserIdeq = number;

/**
 * Filters field "user_id" to be within the provided values.
 */
export type UserUserIdIn = Array<number>;

/**
 * Filters field "user_id" to be not equal to the provided value.
 */
export type UserUserIdneq = number;

/**
 * Filters field "user_id" to be not within the provided values.
 */
export type UserUserIdNotIn = Array<number>;

/**
 * A unique identifier for the request.
 */
export type XRequestId = string;

export type GetGithubSvgData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query: {
        /**
         * Background type.
         */
        bg?: 'geometric' | 'topography';
        /**
         * Background color (hex, rgb, rgba, hsl).
         */
        bgcolor?: string;
        /**
         * Description of the project (not required if using owner/repo).
         */
        description: string;
        /**
         * Font scale.
         */
        font?: number;
        /**
         * Height of the SVG (in px).
         */
        h?: number;
        /**
         * Iconidfy icon to use.
         */
        icon?: string;
        /**
         * Color of the icon (hex, rgb, rgba, hsl).
         */
        'icon.color'?: string;
        /**
         * Height of the icon (in px).
         */
        'icon.height'?: number;
        /**
         * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
         */
        'icon.rotate'?: 1 | 2 | 3;
        /**
         * Width of the icon (in px).
         */
        'icon.width'?: number;
        /**
         * Layout of the SVG.
         */
        layout?: 'all' | 'left' | 'right';
        /**
         * Title of the project (not required if using owner/repo).
         */
        title: string;
        /**
         * Width of the SVG (in px).
         */
        w?: number;
        /**
         * Flip the icon.
         */
        'icon.flip'?: 'horizontal' | 'vertical';
    };
    url: '/gh/svg';
};

export type GetGithubSvgErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubSvgError = GetGithubSvgErrors[keyof GetGithubSvgErrors];

export type GetGithubSvgResponses = {
    200: Blob | File;
};

export type GetGithubSvgResponse = GetGithubSvgResponses[keyof GetGithubSvgResponses];

export type GetGithubRepoSvgData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * GitHub user ID.
         */
        ownerID: string;
        /**
         * GitHub repository ID.
         */
        repoID: string;
    };
    query?: {
        /**
         * Background type.
         */
        bg?: 'geometric' | 'topography';
        /**
         * Background color (hex, rgb, rgba, hsl).
         */
        bgcolor?: string;
        /**
         * Font scale.
         */
        font?: number;
        /**
         * Height of the SVG (in px).
         */
        h?: number;
        /**
         * Iconidfy icon to use.
         */
        icon?: string;
        /**
         * Color of the icon (hex, rgb, rgba, hsl).
         */
        'icon.color'?: string;
        /**
         * Height of the icon (in px).
         */
        'icon.height'?: number;
        /**
         * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
         */
        'icon.rotate'?: 1 | 2 | 3;
        /**
         * Width of the icon (in px).
         */
        'icon.width'?: number;
        /**
         * Layout of the SVG.
         */
        layout?: 'all' | 'left' | 'right';
        /**
         * Width of the SVG (in px).
         */
        w?: number;
        /**
         * Flip the icon.
         */
        'icon.flip'?: 'horizontal' | 'vertical';
    };
    url: '/gh/svg/{ownerID}/{repoID}';
};

export type GetGithubRepoSvgErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubRepoSvgError = GetGithubRepoSvgErrors[keyof GetGithubRepoSvgErrors];

export type GetGithubRepoSvgResponses = {
    200: Blob | File;
};

export type GetGithubRepoSvgResponse = GetGithubRepoSvgResponses[keyof GetGithubRepoSvgResponses];

export type ListGithubAssetsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubAssetSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'assetID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'label.eq'?: string;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'label.neq'?: string;
        /**
         * Filters field "label" to be null/nil.
         */
        'label.null'?: boolean;
        /**
         * Filters field "label" to be within the provided values.
         */
        'label.in'?: Array<string>;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'label.notIn'?: Array<string>;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'label.has'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'label.ihas'?: string;
        /**
         * Filters field "label" to start with the provided value.
         */
        'label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'label.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'size.lt'?: number;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'downloadCount.lt'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
    };
    url: '/github-assets';
};

export type ListGithubAssetsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubAssetsError = ListGithubAssetsErrors[keyof ListGithubAssetsErrors];

export type ListGithubAssetsResponses = {
    /**
     * The requested GithubAsset.
     */
    200: GithubAssetList;
};

export type ListGithubAssetsResponse = ListGithubAssetsResponses[keyof ListGithubAssetsResponses];

export type GetGithubAssetData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubAsset to act upon.
         */
        githubassetID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-assets/{githubassetID}';
};

export type GetGithubAssetErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubAssetError = GetGithubAssetErrors[keyof GetGithubAssetErrors];

export type GetGithubAssetResponses = {
    /**
     * The requested GithubAsset entity.
     */
    200: GithubAsset;
};

export type GetGithubAssetResponse = GetGithubAssetResponses[keyof GetGithubAssetResponses];

export type GetGithubAssetReleaseData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubAsset to act upon.
         */
        githubassetID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-assets/{githubassetID}/release';
};

export type GetGithubAssetReleaseErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubAssetReleaseError = GetGithubAssetReleaseErrors[keyof GetGithubAssetReleaseErrors];

export type GetGithubAssetReleaseResponses = {
    /**
     * The requested release entity.
     */
    200: GithubReleaseRead;
};

export type GetGithubAssetReleaseResponse = GetGithubAssetReleaseResponses[keyof GetGithubAssetReleaseResponses];

export type ListGithubEventsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubEventSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "event_id" to be equal to the provided value.
         */
        'eventID.eq'?: string;
        /**
         * Filters field "event_id" to be not equal to the provided value.
         */
        'eventID.neq'?: string;
        /**
         * Filters field "event_id" to be equal to the provided value, case-insensitive.
         */
        'eventID.ieq'?: string;
        /**
         * Filters field "event_type" to be equal to the provided value.
         */
        'eventType.eq'?: string;
        /**
         * Filters field "event_type" to be not equal to the provided value.
         */
        'eventType.neq'?: string;
        /**
         * Filters field "event_type" to be within the provided values.
         */
        'eventType.in'?: Array<string>;
        /**
         * Filters field "event_type" to be not within the provided values.
         */
        'eventType.notIn'?: Array<string>;
        /**
         * Filters field "event_type" to be equal to the provided value, case-insensitive.
         */
        'eventType.ieq'?: string;
        /**
         * Filters field "event_type" to contain the provided value.
         */
        'eventType.has'?: string;
        /**
         * Filters field "event_type" to contain the provided value, case-insensitive.
         */
        'eventType.ihas'?: string;
        /**
         * Filters field "event_type" to start with the provided value.
         */
        'eventType.prefix'?: string;
        /**
         * Filters field "event_type" to end with the provided value.
         */
        'eventType.suffix'?: string;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "actor_id" to be equal to the provided value.
         */
        'actorID.eq'?: number;
        /**
         * Filters field "actor_id" to be not equal to the provided value.
         */
        'actorID.neq'?: number;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
    };
    url: '/github-events';
};

export type ListGithubEventsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubEventsError = ListGithubEventsErrors[keyof ListGithubEventsErrors];

export type ListGithubEventsResponses = {
    /**
     * The requested GithubEvent.
     */
    200: GithubEventList;
};

export type ListGithubEventsResponse = ListGithubEventsResponses[keyof ListGithubEventsResponses];

export type GetGithubEventData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubEvent to act upon.
         */
        githubeventID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-events/{githubeventID}';
};

export type GetGithubEventErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubEventError = GetGithubEventErrors[keyof GetGithubEventErrors];

export type GetGithubEventResponses = {
    /**
     * The requested GithubEvent entity.
     */
    200: GithubEvent;
};

export type GetGithubEventResponse = GetGithubEventResponses[keyof GetGithubEventResponses];

export type ListGithubGistsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubGistSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "gist_id" to be equal to the provided value.
         */
        'gistID.eq'?: string;
        /**
         * Filters field "gist_id" to be not equal to the provided value.
         */
        'gistID.neq'?: string;
        /**
         * Filters field "gist_id" to be equal to the provided value, case-insensitive.
         */
        'gistID.ieq'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "type" to be equal to the provided value.
         */
        'type.eq'?: string;
        /**
         * Filters field "type" to be not equal to the provided value.
         */
        'type.neq'?: string;
        /**
         * Filters field "type" to be within the provided values.
         */
        'type.in'?: Array<string>;
        /**
         * Filters field "type" to be not within the provided values.
         */
        'type.notIn'?: Array<string>;
        /**
         * Filters field "type" to be equal to the provided value, case-insensitive.
         */
        'type.ieq'?: string;
        /**
         * Filters field "type" to contain the provided value.
         */
        'type.has'?: string;
        /**
         * Filters field "type" to contain the provided value, case-insensitive.
         */
        'type.ihas'?: string;
        /**
         * Filters field "type" to start with the provided value.
         */
        'type.prefix'?: string;
        /**
         * Filters field "type" to end with the provided value.
         */
        'type.suffix'?: string;
        /**
         * Filters field "language" to be equal to the provided value.
         */
        'language.eq'?: string;
        /**
         * Filters field "language" to be not equal to the provided value.
         */
        'language.neq'?: string;
        /**
         * Filters field "language" to be null/nil.
         */
        'language.null'?: boolean;
        /**
         * Filters field "language" to be within the provided values.
         */
        'language.in'?: Array<string>;
        /**
         * Filters field "language" to be not within the provided values.
         */
        'language.notIn'?: Array<string>;
        /**
         * Filters field "language" to be equal to the provided value, case-insensitive.
         */
        'language.ieq'?: string;
        /**
         * Filters field "language" to contain the provided value.
         */
        'language.has'?: string;
        /**
         * Filters field "language" to contain the provided value, case-insensitive.
         */
        'language.ihas'?: string;
        /**
         * Filters field "language" to start with the provided value.
         */
        'language.prefix'?: string;
        /**
         * Filters field "language" to end with the provided value.
         */
        'language.suffix'?: string;
        /**
         * Filters field "size" to be equal to the provided value.
         */
        'size.eq'?: number;
        /**
         * Filters field "size" to be not equal to the provided value.
         */
        'size.neq'?: number;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
    };
    url: '/github-gists';
};

export type ListGithubGistsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubGistsError = ListGithubGistsErrors[keyof ListGithubGistsErrors];

export type ListGithubGistsResponses = {
    /**
     * The requested GithubGist.
     */
    200: GithubGistList;
};

export type ListGithubGistsResponse = ListGithubGistsResponses[keyof ListGithubGistsResponses];

export type GetGithubGistData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubGist to act upon.
         */
        githubgistID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-gists/{githubgistID}';
};

export type GetGithubGistErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubGistError = GetGithubGistErrors[keyof GetGithubGistErrors];

export type GetGithubGistResponses = {
    /**
     * The requested GithubGist entity.
     */
    200: GithubGist;
};

export type GetGithubGistResponse = GetGithubGistResponses[keyof GetGithubGistResponses];

export type ListGithubReleasesData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubReleaseSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * If true, only return entities that have a repository edge.
         */
        'has.repository'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repository.repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'repository.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'repository.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'repository.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'repository.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'repository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'repository.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'repository.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'repository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'repository.name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'repository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'repository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'repository.fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'repository.fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'repository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'repository.fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'repository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'repository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'repository.fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'repository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'repository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'repository.ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'repository.ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'repository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'repository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'repository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'repository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'repository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'repository.public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'repository.description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'repository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'repository.description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'repository.fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'repository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'repository.starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'repository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'repository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'repository.defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'repository.defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'repository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'repository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'repository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'repository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'repository.defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'repository.isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'repository.hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'repository.archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'repository.pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'repository.pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'repository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'repository.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'repository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'repository.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'repository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'repository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'repository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'repository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'repository.updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a asset edge.
         */
        'has.asset'?: boolean;
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'asset.assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'asset.assetID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'asset.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'asset.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'asset.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'asset.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'asset.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'asset.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'asset.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'asset.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'asset.name.suffix'?: string;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'asset.label.eq'?: string;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'asset.label.neq'?: string;
        /**
         * Filters field "label" to be null/nil.
         */
        'asset.label.null'?: boolean;
        /**
         * Filters field "label" to be within the provided values.
         */
        'asset.label.in'?: Array<string>;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'asset.label.notIn'?: Array<string>;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'asset.label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'asset.label.has'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'asset.label.ihas'?: string;
        /**
         * Filters field "label" to start with the provided value.
         */
        'asset.label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'asset.label.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'asset.size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'asset.size.lt'?: number;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'asset.downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'asset.downloadCount.lt'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'asset.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'asset.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'asset.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'asset.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'asset.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'asset.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'asset.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'asset.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'asset.updatedAt.null'?: boolean;
    };
    url: '/github-releases';
};

export type ListGithubReleasesErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubReleasesError = ListGithubReleasesErrors[keyof ListGithubReleasesErrors];

export type ListGithubReleasesResponses = {
    /**
     * The requested GithubRelease.
     */
    200: GithubReleaseList;
};

export type ListGithubReleasesResponse = ListGithubReleasesResponses[keyof ListGithubReleasesResponses];

export type ListOutdatedGithubReleasesData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/github-releases/outdated';
};

export type ListOutdatedGithubReleasesErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListOutdatedGithubReleasesError = ListOutdatedGithubReleasesErrors[keyof ListOutdatedGithubReleasesErrors];

export type ListOutdatedGithubReleasesResponses = {
    200: Array<OutdatedRepositoryRelease>;
};

export type ListOutdatedGithubReleasesResponse = ListOutdatedGithubReleasesResponses[keyof ListOutdatedGithubReleasesResponses];

export type GetGithubReleaseData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-releases/{githubreleaseID}';
};

export type GetGithubReleaseErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubReleaseError = GetGithubReleaseErrors[keyof GetGithubReleaseErrors];

export type GetGithubReleaseResponses = {
    /**
     * The requested GithubRelease entity.
     */
    200: GithubReleaseRead;
};

export type GetGithubReleaseResponse = GetGithubReleaseResponses[keyof GetGithubReleaseResponses];

export type ListGithubReleaseAssetsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubAssetSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'assetID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'label.eq'?: string;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'label.neq'?: string;
        /**
         * Filters field "label" to be null/nil.
         */
        'label.null'?: boolean;
        /**
         * Filters field "label" to be within the provided values.
         */
        'label.in'?: Array<string>;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'label.notIn'?: Array<string>;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'label.has'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'label.ihas'?: string;
        /**
         * Filters field "label" to start with the provided value.
         */
        'label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'label.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'size.lt'?: number;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'downloadCount.lt'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
    };
    url: '/github-releases/{githubreleaseID}/assets';
};

export type ListGithubReleaseAssetsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubReleaseAssetsError = ListGithubReleaseAssetsErrors[keyof ListGithubReleaseAssetsErrors];

export type ListGithubReleaseAssetsResponses = {
    /**
     * The requested assets.
     */
    200: GithubReleaseAssetList;
};

export type ListGithubReleaseAssetsResponse = ListGithubReleaseAssetsResponses[keyof ListGithubReleaseAssetsResponses];

export type GetGithubReleaseRepositoryData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-releases/{githubreleaseID}/repository';
};

export type GetGithubReleaseRepositoryErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubReleaseRepositoryError = GetGithubReleaseRepositoryErrors[keyof GetGithubReleaseRepositoryErrors];

export type GetGithubReleaseRepositoryResponses = {
    /**
     * The requested repository entity.
     */
    200: GithubRepositoryRead;
};

export type GetGithubReleaseRepositoryResponse = GetGithubReleaseRepositoryResponses[keyof GetGithubReleaseRepositoryResponses];

export type ListGithubRepositoriesData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubRepositorySortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
    };
    url: '/github-repositories';
};

export type ListGithubRepositoriesErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubRepositoriesError = ListGithubRepositoriesErrors[keyof ListGithubRepositoriesErrors];

export type ListGithubRepositoriesResponses = {
    /**
     * The requested GithubRepository.
     */
    200: GithubRepositoryList;
};

export type ListGithubRepositoriesResponse = ListGithubRepositoriesResponses[keyof ListGithubRepositoriesResponses];

export type GetGithubRepositoryData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/github-repositories/{githubrepositoryID}';
};

export type GetGithubRepositoryErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubRepositoryError = GetGithubRepositoryErrors[keyof GetGithubRepositoryErrors];

export type GetGithubRepositoryResponses = {
    /**
     * The requested GithubRepository entity.
     */
    200: GithubRepositoryRead;
};

export type GetGithubRepositoryResponse = GetGithubRepositoryResponses[keyof GetGithubRepositoryResponses];

export type ListGithubRepositoryLabelsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
    };
    url: '/github-repositories/{githubrepositoryID}/labels';
};

export type ListGithubRepositoryLabelsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubRepositoryLabelsError = ListGithubRepositoryLabelsErrors[keyof ListGithubRepositoryLabelsErrors];

export type ListGithubRepositoryLabelsResponses = {
    /**
     * The requested labels.
     */
    200: GithubRepositoryLabelList;
};

export type ListGithubRepositoryLabelsResponse = ListGithubRepositoryLabelsResponses[keyof ListGithubRepositoryLabelsResponses];

export type ListGithubRepositoryReleasesData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubReleaseSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * If true, only return entities that have a repository edge.
         */
        'has.repository'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repository.repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'repository.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'repository.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'repository.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'repository.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'repository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'repository.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'repository.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'repository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'repository.name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'repository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'repository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'repository.fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'repository.fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'repository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'repository.fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'repository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'repository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'repository.fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'repository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'repository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'repository.ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'repository.ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'repository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'repository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'repository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'repository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'repository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'repository.public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'repository.description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'repository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'repository.description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'repository.fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'repository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'repository.starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'repository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'repository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'repository.defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'repository.defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'repository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'repository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'repository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'repository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'repository.defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'repository.isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'repository.hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'repository.archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'repository.pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'repository.pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'repository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'repository.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'repository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'repository.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'repository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'repository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'repository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'repository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'repository.updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a asset edge.
         */
        'has.asset'?: boolean;
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'asset.assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'asset.assetID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'asset.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'asset.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'asset.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'asset.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'asset.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'asset.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'asset.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'asset.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'asset.name.suffix'?: string;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'asset.label.eq'?: string;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'asset.label.neq'?: string;
        /**
         * Filters field "label" to be null/nil.
         */
        'asset.label.null'?: boolean;
        /**
         * Filters field "label" to be within the provided values.
         */
        'asset.label.in'?: Array<string>;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'asset.label.notIn'?: Array<string>;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'asset.label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'asset.label.has'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'asset.label.ihas'?: string;
        /**
         * Filters field "label" to start with the provided value.
         */
        'asset.label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'asset.label.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'asset.size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'asset.size.lt'?: number;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'asset.downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'asset.downloadCount.lt'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'asset.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'asset.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'asset.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'asset.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'asset.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'asset.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'asset.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'asset.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'asset.updatedAt.null'?: boolean;
    };
    url: '/github-repositories/{githubrepositoryID}/releases';
};

export type ListGithubRepositoryReleasesErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListGithubRepositoryReleasesError = ListGithubRepositoryReleasesErrors[keyof ListGithubRepositoryReleasesErrors];

export type ListGithubRepositoryReleasesResponses = {
    /**
     * The requested releases.
     */
    200: GithubReleaseList;
};

export type ListGithubRepositoryReleasesResponse = ListGithubRepositoryReleasesResponses[keyof ListGithubRepositoryReleasesResponses];

export type GetGithubUserData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/github-user';
};

export type GetGithubUserErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubUserError = GetGithubUserErrors[keyof GetGithubUserErrors];

export type GetGithubUserResponses = {
    /**
     * Github user was found.
     */
    200: GithubUser;
};

export type GetGithubUserResponse = GetGithubUserResponses[keyof GetGithubUserResponses];

export type ListLabelsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
    };
    url: '/labels';
};

export type ListLabelsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListLabelsError = ListLabelsErrors[keyof ListLabelsErrors];

export type ListLabelsResponses = {
    /**
     * The requested Label.
     */
    200: LabelList;
};

export type ListLabelsResponse = ListLabelsResponses[keyof ListLabelsResponses];

export type CreateLabelData = {
    body: LabelCreate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/labels';
};

export type CreateLabelErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Conflict (http status code 409)
     */
    409: ErrorConflict;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type CreateLabelError = CreateLabelErrors[keyof CreateLabelErrors];

export type CreateLabelResponses = {
    /**
     * The created Label entity.
     */
    201: Label;
};

export type CreateLabelResponse = CreateLabelResponses[keyof CreateLabelResponses];

export type GetLabelsCountData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/labels/count';
};

export type GetLabelsCountErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetLabelsCountError = GetLabelsCountErrors[keyof GetLabelsCountErrors];

export type GetLabelsCountResponses = {
    /**
     * Labels count was found.
     */
    200: LabelCountList;
};

export type GetLabelsCountResponse = GetLabelsCountResponses[keyof GetLabelsCountResponses];

export type DeleteLabelData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/labels/{labelID}';
};

export type DeleteLabelErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type DeleteLabelError = DeleteLabelErrors[keyof DeleteLabelErrors];

export type DeleteLabelResponses = {
    /**
     * The requested Label entity.
     */
    204: void;
};

export type DeleteLabelResponse = DeleteLabelResponses[keyof DeleteLabelResponses];

export type GetLabelData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/labels/{labelID}';
};

export type GetLabelErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetLabelError = GetLabelErrors[keyof GetLabelErrors];

export type GetLabelResponses = {
    /**
     * The requested Label entity.
     */
    200: Label;
};

export type GetLabelResponse = GetLabelResponses[keyof GetLabelResponses];

export type UpdateLabelData = {
    body: LabelUpdate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/labels/{labelID}';
};

export type UpdateLabelErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Conflict (http status code 409)
     */
    409: ErrorConflict;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type UpdateLabelError = UpdateLabelErrors[keyof UpdateLabelErrors];

export type UpdateLabelResponses = {
    /**
     * The update Label entity.
     */
    200: Label;
};

export type UpdateLabelResponse = UpdateLabelResponses[keyof UpdateLabelResponses];

export type ListLabelGithubRepositoriesData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubRepositorySortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<string>;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<string>;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<string>;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<string>;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
    };
    url: '/labels/{labelID}/github-repositories';
};

export type ListLabelGithubRepositoriesErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListLabelGithubRepositoriesError = ListLabelGithubRepositoriesErrors[keyof ListLabelGithubRepositoriesErrors];

export type ListLabelGithubRepositoriesResponses = {
    /**
     * The requested githubRepositories.
     */
    200: GithubRepositoryList;
};

export type ListLabelGithubRepositoriesResponse = ListLabelGithubRepositoriesResponses[keyof ListLabelGithubRepositoriesResponses];

export type ListLabelPostsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<number>;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<number>;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<string>;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<string>;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<string>;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<string>;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<string>;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<string>;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
    };
    url: '/labels/{labelID}/posts';
};

export type ListLabelPostsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListLabelPostsError = ListLabelPostsErrors[keyof ListLabelPostsErrors];

export type ListLabelPostsResponses = {
    /**
     * The requested posts.
     */
    200: PostList;
};

export type ListLabelPostsResponse = ListLabelPostsResponses[keyof ListLabelPostsResponses];

export type GetOpenApiData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/openapi.json';
};

export type GetOpenApiErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetOpenApiError = GetOpenApiErrors[keyof GetOpenApiErrors];

export type GetOpenApiResponses = {
    /**
     * OpenAPI specification was found
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetOpenApiResponse = GetOpenApiResponses[keyof GetOpenApiResponses];

export type ListPostsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<number>;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<number>;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<string>;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<string>;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<string>;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<string>;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<string>;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<string>;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
    };
    url: '/posts';
};

export type ListPostsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListPostsError = ListPostsErrors[keyof ListPostsErrors];

export type ListPostsResponses = {
    /**
     * The requested Post.
     */
    200: PostList;
};

export type ListPostsResponse = ListPostsResponses[keyof ListPostsResponses];

export type CreatePostData = {
    body: PostCreate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/posts';
};

export type CreatePostErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Conflict (http status code 409)
     */
    409: ErrorConflict;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type CreatePostError = CreatePostErrors[keyof CreatePostErrors];

export type CreatePostResponses = {
    /**
     * The created Post entity.
     */
    201: PostRead;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type RegeneratePostsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/posts/regenerate';
};

export type RegeneratePostsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type RegeneratePostsError = RegeneratePostsErrors[keyof RegeneratePostsErrors];

export type RegeneratePostsResponses = {
    /**
     * Posts were regenerated.
     */
    200: unknown;
};

export type DeletePostData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/posts/{postID}';
};

export type DeletePostErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type DeletePostError = DeletePostErrors[keyof DeletePostErrors];

export type DeletePostResponses = {
    /**
     * The requested Post entity.
     */
    204: void;
};

export type DeletePostResponse = DeletePostResponses[keyof DeletePostResponses];

export type GetPostData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/posts/{postID}';
};

export type GetPostErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetPostError = GetPostErrors[keyof GetPostErrors];

export type GetPostResponses = {
    /**
     * The requested Post entity.
     */
    200: PostRead;
};

export type GetPostResponse = GetPostResponses[keyof GetPostResponses];

export type UpdatePostData = {
    body: PostUpdate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/posts/{postID}';
};

export type UpdatePostErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Conflict (http status code 409)
     */
    409: ErrorConflict;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type UpdatePostError = UpdatePostErrors[keyof UpdatePostErrors];

export type UpdatePostResponses = {
    /**
     * The update Post entity.
     */
    200: PostRead;
};

export type UpdatePostResponse = UpdatePostResponses[keyof UpdatePostResponses];

export type GetPostAuthorData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/posts/{postID}/author';
};

export type GetPostAuthorErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetPostAuthorError = GetPostAuthorErrors[keyof GetPostAuthorErrors];

export type GetPostAuthorResponses = {
    /**
     * The requested author entity.
     */
    200: User;
};

export type GetPostAuthorResponse = GetPostAuthorResponses[keyof GetPostAuthorResponses];

export type ListPostLabelsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<string>;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<string>;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<string>;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<string>;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<string>;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<string>;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<string>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<string>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
    };
    url: '/posts/{postID}/labels';
};

export type ListPostLabelsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListPostLabelsError = ListPostLabelsErrors[keyof ListPostLabelsErrors];

export type ListPostLabelsResponses = {
    /**
     * The requested labels.
     */
    200: PostLabelList;
};

export type ListPostLabelsResponse = ListPostLabelsResponses[keyof ListPostLabelsResponses];

export type GetSelfData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/self';
};

export type GetSelfErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetSelfError = GetSelfErrors[keyof GetSelfErrors];

export type GetSelfResponses = {
    /**
     * The authenticated user.
     */
    200: User;
};

export type GetSelfResponse = GetSelfResponses[keyof GetSelfResponses];

export type GetCodingStatsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/stats/coding';
};

export type GetCodingStatsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetCodingStatsError = GetCodingStatsErrors[keyof GetCodingStatsErrors];

export type GetCodingStatsResponses = {
    /**
     * Coding statistics were found.
     */
    200: CodingStats;
};

export type GetCodingStatsResponse = GetCodingStatsResponses[keyof GetCodingStatsResponses];

export type GetGithubStatsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/stats/github';
};

export type GetGithubStatsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetGithubStatsError = GetGithubStatsErrors[keyof GetGithubStatsErrors];

export type GetGithubStatsResponses = {
    /**
     * Github statistics were found.
     */
    200: GithubStats;
};

export type GetGithubStatsResponse = GetGithubStatsResponses[keyof GetGithubStatsResponses];

export type ListUsersData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: UserSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'userID.eq'?: number;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'userID.neq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'userID.in'?: Array<number>;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'userID.notIn'?: Array<number>;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'login.eq'?: string;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'login.neq'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'login.in'?: Array<string>;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'login.notIn'?: Array<string>;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'login.has'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'login.ihas'?: string;
        /**
         * Filters field "login" to start with the provided value.
         */
        'login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'email.eq'?: string;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'email.neq'?: string;
        /**
         * Filters field "email" to be null/nil.
         */
        'email.null'?: boolean;
        /**
         * Filters field "email" to be within the provided values.
         */
        'email.in'?: Array<string>;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'email.notIn'?: Array<string>;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'email.has'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'email.ihas'?: string;
        /**
         * Filters field "email" to start with the provided value.
         */
        'email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'location.eq'?: string;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'location.neq'?: string;
        /**
         * Filters field "location" to be null/nil.
         */
        'location.null'?: boolean;
        /**
         * Filters field "location" to be within the provided values.
         */
        'location.in'?: Array<string>;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'location.notIn'?: Array<string>;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'location.has'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'location.ihas'?: string;
        /**
         * Filters field "location" to start with the provided value.
         */
        'location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'location.suffix'?: string;
    };
    url: '/users';
};

export type ListUsersErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * The requested User.
     */
    200: UserList;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type GetUserData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the User to act upon.
         */
        userID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
    };
    url: '/users/{userID}';
};

export type GetUserErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * The requested User entity.
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type ListUserPostsData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the User to act upon.
         */
        userID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented.
         */
        pretty?: boolean;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<string>;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<string>;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<number>;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<number>;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<string>;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<string>;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<string>;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<string>;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<string>;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<string>;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<string>;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<string>;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
    };
    url: '/users/{userID}/posts';
};

export type ListUserPostsErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type ListUserPostsError = ListUserPostsErrors[keyof ListUserPostsErrors];

export type ListUserPostsResponses = {
    /**
     * The requested posts.
     */
    200: PostList;
};

export type ListUserPostsResponse = ListUserPostsResponses[keyof ListUserPostsResponses];

export type GetServiceVersionData = {
    body?: never;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path?: never;
    query?: never;
    url: '/version';
};

export type GetServiceVersionErrors = {
    /**
     * Bad Request (http status code 400)
     */
    400: ErrorBadRequest;
    /**
     * Unauthorized (http status code 401)
     */
    401: ErrorUnauthorized;
    /**
     * Forbidden (http status code 403)
     */
    403: ErrorForbidden;
    /**
     * Not Found (http status code 404)
     */
    404: ErrorNotFound;
    /**
     * Too Many Requests (http status code 429)
     */
    429: ErrorTooManyRequests;
    /**
     * Internal Server Error (http status code 500)
     */
    500: ErrorInternalServerError;
};

export type GetServiceVersionError = GetServiceVersionErrors[keyof GetServiceVersionErrors];

export type GetServiceVersionResponses = {
    /**
     * Service version information was found.
     */
    200: VersionInfo;
};

export type GetServiceVersionResponse = GetServiceVersionResponses[keyof GetServiceVersionResponses];