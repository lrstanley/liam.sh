// This file is auto-generated by @hey-api/openapi-ts

export type CodingStats = {
    calculated_days: number;
    languages: Array<LanguageStat>;
    total_duration: string;
    total_duration_short: string;
    total_seconds: number;
};

export type ErrorBadRequest = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorConflict = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorForbidden = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorInternalServerError = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorNotFound = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorTooManyRequests = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

export type ErrorUnauthorized = {
    /**
     * The underlying error, which may be masked when debugging is disabled.
     */
    error: string;
    /**
     * A summary of the error code based off the HTTP status code or application error code.
     */
    type: string;
    /**
     * The HTTP status code or other internal application error code.
     */
    code: number;
    /**
     * The unique request ID for this error.
     */
    request_id?: string;
    /**
     * The timestamp of the error, in RFC3339 format.
     */
    timestamp: string;
};

/**
 * Specifies how to combine multiple filters.
 */
export type FilterOperation = 'and' | 'or';

/**
 * Specifies how to combine multiple filters.
 */
export const FilterOperation = {
    AND: 'and',
    OR: 'or'
} as const;

/**
 * A single GithubAsset entity.
 */
export type GithubAsset = {
    /**
     * The ID of the GithubAsset entity.
     */
    id: number;
    /**
     * The ID of the asset.
     */
    asset_id: number;
    /**
     * The URL of the asset.
     */
    browser_download_url: string;
    /**
     * The name of the asset.
     */
    name: string;
    /**
     * The label of the asset.
     */
    label?: string;
    /**
     * The state of the asset.
     */
    state?: string;
    /**
     * The content type of the asset.
     */
    content_type: string;
    /**
     * The size of the asset in bytes.
     */
    size: number;
    download_count: number;
    /**
     * The date the asset was created.
     */
    created_at: string;
    /**
     * The date the asset was last updated.
     */
    updated_at?: string;
    /**
     * The data of the user that uploaded the asset.
     */
    uploader: GithubUser;
};

/**
 * A paginated result set of GithubAsset entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubAssetList = PagedResponse & {
    content: Array<GithubAsset>;
};

export type GithubAssetRead = GithubAsset;

/**
 * All potential sortable fields for GithubAsset entities.
 */
export type GithubAssetSortableFields = 'asset_id' | 'created_at' | 'download_count' | 'id' | 'label' | 'name' | 'random' | 'release.created_at' | 'release.draft' | 'release.id' | 'release.name' | 'release.prerelease' | 'release.published_at' | 'release.release_id' | 'release.tag_name' | 'size' | 'updated_at';

/**
 * All potential sortable fields for GithubAsset entities.
 */
export const GithubAssetSortableFields = {
    ASSET_ID: 'asset_id',
    CREATED_AT: 'created_at',
    DOWNLOAD_COUNT: 'download_count',
    ID: 'id',
    LABEL: 'label',
    NAME: 'name',
    RANDOM: 'random',
    RELEASE_CREATED_AT: 'release.created_at',
    RELEASE_DRAFT: 'release.draft',
    RELEASE_ID: 'release.id',
    RELEASE_NAME: 'release.name',
    RELEASE_PRERELEASE: 'release.prerelease',
    RELEASE_PUBLISHED_AT: 'release.published_at',
    RELEASE_RELEASE_ID: 'release.release_id',
    RELEASE_TAG_NAME: 'release.tag_name',
    SIZE: 'size',
    UPDATED_AT: 'updated_at'
} as const;

/**
 * A single GithubEvent entity.
 */
export type GithubEvent = {
    /**
     * The ID of the GithubEvent entity.
     */
    id: number;
    /**
     * The ID of the event.
     */
    event_id: string;
    /**
     * The type of the event.
     */
    event_type: string;
    /**
     * The date the event was created.
     */
    created_at: string;
    /**
     * Whether the event is public or not.
     */
    public: boolean;
    /**
     * The ID of the actor.
     */
    actor_id: number;
    /**
     * The actor data of the event.
     */
    actor: GithubUser;
    /**
     * The ID of the repository.
     */
    repo_id: number;
    /**
     * The repository of the event.
     */
    repo: {
        [key: string]: unknown;
    };
    /**
     * The payload of the event.
     */
    payload: {
        [key: string]: unknown;
    };
};

/**
 * A paginated result set of GithubEvent entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubEventList = PagedResponse & {
    content: Array<GithubEvent>;
};

export type GithubEventRead = GithubEvent;

/**
 * All potential sortable fields for GithubEvent entities.
 */
export type GithubEventSortableFields = 'actor_id' | 'created_at' | 'event_id' | 'event_type' | 'id' | 'public' | 'random' | 'repo_id';

/**
 * All potential sortable fields for GithubEvent entities.
 */
export const GithubEventSortableFields = {
    ACTOR_ID: 'actor_id',
    CREATED_AT: 'created_at',
    EVENT_ID: 'event_id',
    EVENT_TYPE: 'event_type',
    ID: 'id',
    PUBLIC: 'public',
    RANDOM: 'random',
    REPO_ID: 'repo_id'
} as const;

/**
 * A single GithubGist entity.
 */
export type GithubGist = {
    /**
     * The ID of the GithubGist entity.
     */
    id: number;
    /**
     * The ID of the gist.
     */
    gist_id: string;
    /**
     * The URL of the gist.
     */
    html_url: string;
    /**
     * Whether the gist is public or not.
     */
    public: boolean;
    /**
     * The date the gist was created.
     */
    created_at: string;
    /**
     * The date the gist was last updated.
     */
    updated_at: string;
    /**
     * The description of the gist.
     */
    description?: string;
    /**
     * The owner data of the gist.
     */
    owner: GithubUser;
    /**
     * The name of the file.
     */
    name: string;
    /**
     * The type of the file.
     */
    type: string;
    /**
     * The programming language of the file.
     */
    language?: string;
    /**
     * The size of the file in bytes.
     */
    size: number;
    /**
     * The raw URL of the file.
     */
    raw_url: string;
    /**
     * The content of the file.
     */
    content: string;
};

/**
 * A paginated result set of GithubGist entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubGistList = PagedResponse & {
    content: Array<GithubGist>;
};

export type GithubGistRead = GithubGist;

/**
 * All potential sortable fields for GithubGist entities.
 */
export type GithubGistSortableFields = 'created_at' | 'gist_id' | 'id' | 'language' | 'name' | 'public' | 'random' | 'size' | 'type' | 'updated_at';

/**
 * All potential sortable fields for GithubGist entities.
 */
export const GithubGistSortableFields = {
    CREATED_AT: 'created_at',
    GIST_ID: 'gist_id',
    ID: 'id',
    LANGUAGE: 'language',
    NAME: 'name',
    PUBLIC: 'public',
    RANDOM: 'random',
    SIZE: 'size',
    TYPE: 'type',
    UPDATED_AT: 'updated_at'
} as const;

/**
 * A single GithubRelease entity.
 */
export type GithubRelease = {
    /**
     * The ID of the GithubRelease entity.
     */
    id: number;
    /**
     * The ID of the release.
     */
    release_id: number;
    /**
     * The URL of the release.
     */
    html_url: string;
    /**
     * The tag name of the release.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
     */
    target_commitish: string;
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * Indicates whether the release is a draft.
     */
    draft: boolean;
    /**
     * Indicates whether the release is a prerelease.
     */
    prerelease: boolean;
    /**
     * The date the release was created.
     */
    created_at: string;
    /**
     * The date the release was published.
     */
    published_at: string;
    author: GithubUser;
};

/**
 * List of assets associated with githubreleases (githubasset entity type).
 */
export type GithubReleaseAssetList = Array<GithubAsset>;

export type GithubReleaseEdges = {
    repository: GithubRepository;
    /**
     * A list of GithubAsset entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    assets?: Array<GithubAsset>;
};

/**
 * A paginated result set of GithubRelease entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubReleaseList = PagedResponse & {
    content: Array<GithubReleaseRead>;
};

/**
 * A single GithubRelease entity.
 */
export type GithubReleaseRead = GithubRelease & {
    edges: GithubReleaseEdges;
};

/**
 * All potential sortable fields for GithubRelease entities.
 */
export type GithubReleaseSortableFields = 'assets.asset_id.sum' | 'assets.count' | 'assets.download_count.sum' | 'assets.size.sum' | 'created_at' | 'draft' | 'id' | 'name' | 'prerelease' | 'published_at' | 'random' | 'release_id' | 'repository.archived' | 'repository.created_at' | 'repository.default_branch' | 'repository.fork' | 'repository.full_name' | 'repository.has_issues' | 'repository.id' | 'repository.is_template' | 'repository.name' | 'repository.owner_login' | 'repository.public' | 'repository.pushed_at' | 'repository.repo_id' | 'repository.star_count' | 'repository.updated_at' | 'tag_name';

/**
 * All potential sortable fields for GithubRelease entities.
 */
export const GithubReleaseSortableFields = {
    ASSETS_ASSET_ID_SUM: 'assets.asset_id.sum',
    ASSETS_COUNT: 'assets.count',
    ASSETS_DOWNLOAD_COUNT_SUM: 'assets.download_count.sum',
    ASSETS_SIZE_SUM: 'assets.size.sum',
    CREATED_AT: 'created_at',
    DRAFT: 'draft',
    ID: 'id',
    NAME: 'name',
    PRERELEASE: 'prerelease',
    PUBLISHED_AT: 'published_at',
    RANDOM: 'random',
    RELEASE_ID: 'release_id',
    REPOSITORY_ARCHIVED: 'repository.archived',
    REPOSITORY_CREATED_AT: 'repository.created_at',
    REPOSITORY_DEFAULT_BRANCH: 'repository.default_branch',
    REPOSITORY_FORK: 'repository.fork',
    REPOSITORY_FULL_NAME: 'repository.full_name',
    REPOSITORY_HAS_ISSUES: 'repository.has_issues',
    REPOSITORY_ID: 'repository.id',
    REPOSITORY_IS_TEMPLATE: 'repository.is_template',
    REPOSITORY_NAME: 'repository.name',
    REPOSITORY_OWNER_LOGIN: 'repository.owner_login',
    REPOSITORY_PUBLIC: 'repository.public',
    REPOSITORY_PUSHED_AT: 'repository.pushed_at',
    REPOSITORY_REPO_ID: 'repository.repo_id',
    REPOSITORY_STAR_COUNT: 'repository.star_count',
    REPOSITORY_UPDATED_AT: 'repository.updated_at',
    TAG_NAME: 'tag_name'
} as const;

/**
 * A single GithubRepository entity.
 */
export type GithubRepository = {
    /**
     * The ID of the GithubRepository entity.
     */
    id: number;
    /**
     * The ID of the repository.
     */
    repo_id: number;
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * The full name of the repository, which includes the owner.
     */
    full_name: string;
    /**
     * The username which owns the repository (user or organization).
     */
    owner_login: string;
    /**
     * The owner data of the repository.
     */
    owner: GithubUser;
    /**
     * Whether the repository is public or not.
     */
    public: boolean;
    /**
     * The URL of the repository.
     */
    html_url: string;
    /**
     * The description of the repository.
     */
    description?: string;
    /**
     * Whether the repository is a fork or not.
     */
    fork: boolean;
    /**
     * The homepage of the repository.
     */
    homepage?: string;
    /**
     * The number of stars the repository has.
     */
    star_count: number;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether the repository is a template repo or not.
     */
    is_template: boolean;
    /**
     * Whether the repository has issues enabled or not.
     */
    has_issues: boolean;
    /**
     * Whether the repository is archived or not.
     */
    archived: boolean;
    /**
     * The date the repository was last pushed to.
     */
    pushed_at?: string;
    /**
     * The date the repository was created.
     */
    created_at: string;
    /**
     * The date the repository was last updated.
     */
    updated_at?: string;
    license?: {
        [key: string]: unknown;
    };
};

export type GithubRepositoryEdges = {
    /**
     * A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    labels?: Array<Label>;
};

/**
 * List of labels associated with githubrepositories (label entity type).
 */
export type GithubRepositoryLabelList = Array<Label>;

/**
 * A paginated result set of GithubRepository entities. Includes eager-loaded edges (if any) for each entity.
 */
export type GithubRepositoryList = PagedResponse & {
    content: Array<GithubRepositoryRead>;
};

/**
 * A single GithubRepository entity.
 */
export type GithubRepositoryRead = GithubRepository & {
    edges: GithubRepositoryEdges;
};

/**
 * All potential sortable fields for GithubRepository entities.
 */
export type GithubRepositorySortableFields = 'archived' | 'created_at' | 'default_branch' | 'fork' | 'full_name' | 'has_issues' | 'id' | 'is_template' | 'labels.count' | 'name' | 'owner_login' | 'public' | 'pushed_at' | 'random' | 'releases.count' | 'releases.release_id.sum' | 'repo_id' | 'star_count' | 'updated_at';

/**
 * All potential sortable fields for GithubRepository entities.
 */
export const GithubRepositorySortableFields = {
    ARCHIVED: 'archived',
    CREATED_AT: 'created_at',
    DEFAULT_BRANCH: 'default_branch',
    FORK: 'fork',
    FULL_NAME: 'full_name',
    HAS_ISSUES: 'has_issues',
    ID: 'id',
    IS_TEMPLATE: 'is_template',
    LABELS_COUNT: 'labels.count',
    NAME: 'name',
    OWNER_LOGIN: 'owner_login',
    PUBLIC: 'public',
    PUSHED_AT: 'pushed_at',
    RANDOM: 'random',
    RELEASES_COUNT: 'releases.count',
    RELEASES_RELEASE_ID_SUM: 'releases.release_id.sum',
    REPO_ID: 'repo_id',
    STAR_COUNT: 'star_count',
    UPDATED_AT: 'updated_at'
} as const;

export type GithubStats = {
    all_issues: number;
    closed_issues: number;
    commits_year: number;
    contributed_repositories: number;
    open_issues: number;
    pull_requests: number;
    repositories: number;
    stars: number;
};

export type GithubUser = {
    avatar_url: string;
    bio: string;
    collaborators: number;
    created_at: string;
    email: string;
    followers: number;
    following: number;
    html_url: string;
    id: number;
    location: string;
    login: string;
    name: string;
    owned_private_repos: number;
    private_gists: number;
    public_gists: number;
    public_repos: number;
    total_private_repos: number;
    type: string;
    updated_at: string;
    [key: string]: unknown | string | number;
};

/**
 * A single Label entity.
 */
export type Label = {
    /**
     * The ID of the Label entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Label name.
     */
    name: string;
};

export type LabelCount = Label & {
    githubrepository_count: number;
    post_count: number;
    total_count: number;
};

export type LabelCountList = Array<LabelCount>;

/**
 * A single Label entity and the fields that can be created/updated.
 */
export type LabelCreate = {
    /**
     * Time the entity was created.
     */
    create_time?: string;
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Label name.
     */
    name: string;
    posts?: Array<(number)>;
    github_repositories?: Array<(number)>;
};

/**
 * A paginated result set of Label entities. Includes eager-loaded edges (if any) for each entity.
 */
export type LabelList = PagedResponse & {
    content: Array<Label>;
};

export type LabelRead = Label;

/**
 * All potential sortable fields for Label entities.
 */
export type LabelSortableFields = 'create_time' | 'github_repositories.count' | 'github_repositories.repo_id.sum' | 'github_repositories.star_count.sum' | 'id' | 'name' | 'posts.count' | 'posts.view_count.sum' | 'random' | 'update_time';

/**
 * All potential sortable fields for Label entities.
 */
export const LabelSortableFields = {
    CREATE_TIME: 'create_time',
    GITHUB_REPOSITORIES_COUNT: 'github_repositories.count',
    GITHUB_REPOSITORIES_REPO_ID_SUM: 'github_repositories.repo_id.sum',
    GITHUB_REPOSITORIES_STAR_COUNT_SUM: 'github_repositories.star_count.sum',
    ID: 'id',
    NAME: 'name',
    POSTS_COUNT: 'posts.count',
    POSTS_VIEW_COUNT_SUM: 'posts.view_count.sum',
    RANDOM: 'random',
    UPDATE_TIME: 'update_time'
} as const;

/**
 * A single Label entity and the fields that can be created/updated.
 */
export type LabelUpdate = {
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Label name.
     */
    name?: string;
    add_posts?: Array<(number)>;
    remove_posts?: Array<(number)>;
    add_github_repositories?: Array<(number)>;
    remove_github_repositories?: Array<(number)>;
};

export type LanguageStat = {
    hex_color: string;
    key: string;
    /**
     * Total seconds using the language.
     */
    total: number;
    total_duration: string;
};

export type OutdatedRepositoryRelease = {
    release: GithubReleaseRead;
    repository: GithubRepositoryRead;
};

export type PagedResponse = {
    /**
     * Page which the results are associated with.
     */
    page: number;
    /**
     * The number of the last page of results.
     */
    last_page: number;
    /**
     * If true, the current results are the last page of results.
     */
    is_last_page: boolean;
    /**
     * The total number of results based on the provided query.
     */
    total_count: number;
};

/**
 * A single Post entity.
 */
export type Post = {
    /**
     * The ID of the Post entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Post slug.
     */
    slug: string;
    /**
     * Post title.
     */
    title: string;
    /**
     * Post content in Markdown.
     */
    content: string;
    /**
     * Generated HTML content (produced from 'content' field).
     */
    content_html: string;
    /**
     * Post summary, which is produced from the first sentence or two of the post content.
     */
    summary: string;
    published_at: string;
    /**
     * Number of times the post has been viewed.
     */
    view_count: number;
    /**
     * Whether the post is public or not.
     */
    public: boolean;
};

/**
 * A single Post entity and the fields that can be created/updated.
 */
export type PostCreate = {
    /**
     * Time the entity was created.
     */
    create_time?: string;
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Post slug.
     */
    slug: string;
    /**
     * Post title.
     */
    title: string;
    /**
     * Post content in Markdown.
     */
    content: string;
    published_at?: string;
    /**
     * Whether the post is public or not.
     */
    public?: boolean;
    author: number;
    labels?: Array<(number)>;
};

export type PostEdges = {
    author: User;
    /**
     * A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.
     */
    labels?: Array<Label>;
};

/**
 * List of labels associated with posts (label entity type).
 */
export type PostLabelList = Array<Label>;

/**
 * A paginated result set of Post entities. Includes eager-loaded edges (if any) for each entity.
 */
export type PostList = PagedResponse & {
    content: Array<PostRead>;
};

/**
 * A single Post entity.
 */
export type PostRead = Post & {
    edges: PostEdges;
};

/**
 * All potential sortable fields for Post entities.
 */
export type PostSortableFields = 'author.create_time' | 'author.email' | 'author.id' | 'author.location' | 'author.login' | 'author.name' | 'author.update_time' | 'create_time' | 'id' | 'labels.count' | 'public' | 'published_at' | 'random' | 'slug' | 'title' | 'update_time' | 'view_count';

/**
 * All potential sortable fields for Post entities.
 */
export const PostSortableFields = {
    AUTHOR_CREATE_TIME: 'author.create_time',
    AUTHOR_EMAIL: 'author.email',
    AUTHOR_ID: 'author.id',
    AUTHOR_LOCATION: 'author.location',
    AUTHOR_LOGIN: 'author.login',
    AUTHOR_NAME: 'author.name',
    AUTHOR_UPDATE_TIME: 'author.update_time',
    CREATE_TIME: 'create_time',
    ID: 'id',
    LABELS_COUNT: 'labels.count',
    PUBLIC: 'public',
    PUBLISHED_AT: 'published_at',
    RANDOM: 'random',
    SLUG: 'slug',
    TITLE: 'title',
    UPDATE_TIME: 'update_time',
    VIEW_COUNT: 'view_count'
} as const;

/**
 * A single Post entity and the fields that can be created/updated.
 */
export type PostUpdate = {
    /**
     * Time the entity was last updated.
     */
    update_time?: string;
    /**
     * Post slug.
     */
    slug?: string;
    /**
     * Post title.
     */
    title?: string;
    /**
     * Post content in Markdown.
     */
    content?: string;
    published_at?: string;
    /**
     * Whether the post is public or not.
     */
    public?: boolean;
    author?: number;
    add_labels?: Array<(number)>;
    remove_labels?: Array<(number)>;
};

/**
 * A single User entity.
 */
export type User = {
    /**
     * The ID of the User entity.
     */
    id: number;
    /**
     * Time the entity was created.
     */
    create_time: string;
    /**
     * Time the entity was last updated.
     */
    update_time: string;
    /**
     * Users GitHub ID.
     */
    user_id: number;
    /**
     * Users GitHub login ID (username).
     */
    login: string;
    /**
     * Users GitHub display name.
     */
    name?: string;
    /**
     * GitHub avatar of the user, provided by GitHub.
     */
    avatar_url?: string;
    /**
     * Users GitHub profile URL.
     */
    html_url?: string;
    /**
     * Users GitHub email address.
     */
    email?: string;
    /**
     * Users GitHub location.
     */
    location?: string;
    /**
     * Users GitHub bio.
     */
    bio?: string;
};

/**
 * A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.
 */
export type UserList = PagedResponse & {
    content: Array<User>;
};

export type UserRead = User;

/**
 * All potential sortable fields for User entities.
 */
export type UserSortableFields = 'create_time' | 'email' | 'id' | 'location' | 'login' | 'name' | 'posts.count' | 'posts.view_count.sum' | 'random' | 'update_time';

/**
 * All potential sortable fields for User entities.
 */
export const UserSortableFields = {
    CREATE_TIME: 'create_time',
    EMAIL: 'email',
    ID: 'id',
    LOCATION: 'location',
    LOGIN: 'login',
    NAME: 'name',
    POSTS_COUNT: 'posts.count',
    POSTS_VIEW_COUNT_SUM: 'posts.view_count.sum',
    RANDOM: 'random',
    UPDATE_TIME: 'update_time'
} as const;

export type VersionInfo = {
    /**
     * CPU Architecture for this build.
     */
    arch: string;
    /**
     * VCS commit SHA.
     */
    build_commit: string;
    /**
     * VCS commit date.
     */
    build_date: string;
    /**
     * Build version.
     */
    build_version: string;
    /**
     * Executable name where the command was called from.
     */
    command: string;
    /**
     * Version of Go that produced this binary.
     */
    go_version: string;
    /**
     * Links to other resources.
     */
    links: Array<VersionLink>;
    /**
     * Name of cli tool.
     */
    name: string;
    /**
     * Operating system for this build.
     */
    os: string;
};

export type VersionLink = {
    /**
     * Name of the link.
     */
    name: string;
    /**
     * URL of the link.
     */
    url: string;
};

/**
 * Filters field "asset_id" to be equal to the provided value.
 */
export type ParameterEdgeAssetAssetIDEQ = number;

/**
 * Filters field "asset_id" to be not equal to the provided value.
 */
export type ParameterEdgeAssetAssetIDNEQ = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterEdgeAssetCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterEdgeAssetCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterEdgeAssetCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterEdgeAssetCreatedAtNEQ = string;

/**
 * Filters field "download_count" to be greater than the provided value.
 */
export type ParameterEdgeAssetDownloadCountGT = number;

/**
 * Filters field "download_count" to be less than the provided value.
 */
export type ParameterEdgeAssetDownloadCountLT = number;

/**
 * Filters field "label" to contain the provided value.
 */
export type ParameterEdgeAssetLabelContains = string;

/**
 * Filters field "label" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAssetLabelContainsFold = string;

/**
 * Filters field "label" to be equal to the provided value.
 */
export type ParameterEdgeAssetLabelEQ = string;

/**
 * Filters field "label" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAssetLabelEqualFold = string;

/**
 * Filters field "label" to start with the provided value.
 */
export type ParameterEdgeAssetLabelHasPrefix = string;

/**
 * Filters field "label" to end with the provided value.
 */
export type ParameterEdgeAssetLabelHasSuffix = string;

/**
 * Filters field "label" to be within the provided values.
 */
export type ParameterEdgeAssetLabelIn = Array<(string)>;

/**
 * Filters field "label" to be null/nil.
 */
export type ParameterEdgeAssetLabelIsNil = boolean;

/**
 * Filters field "label" to be not equal to the provided value.
 */
export type ParameterEdgeAssetLabelNEQ = string;

/**
 * Filters field "label" to be not within the provided values.
 */
export type ParameterEdgeAssetLabelNotIn = Array<(string)>;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeAssetNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAssetNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeAssetNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAssetNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeAssetNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeAssetNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeAssetNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeAssetNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeAssetNameNotIn = Array<(string)>;

/**
 * Filters field "size" to be greater than the provided value.
 */
export type ParameterEdgeAssetSizeGT = number;

/**
 * Filters field "size" to be less than the provided value.
 */
export type ParameterEdgeAssetSizeLT = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterEdgeAssetUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterEdgeAssetUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type ParameterEdgeAssetUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterEdgeAssetUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterEdgeAssetUpdatedAtNEQ = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterEdgeAuthorCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterEdgeAuthorCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterEdgeAuthorCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorCreateTimeNEQ = string;

/**
 * Filters field "email" to contain the provided value.
 */
export type ParameterEdgeAuthorEmailContains = string;

/**
 * Filters field "email" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorEmailContainsFold = string;

/**
 * Filters field "email" to be equal to the provided value.
 */
export type ParameterEdgeAuthorEmailEQ = string;

/**
 * Filters field "email" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorEmailEqualFold = string;

/**
 * Filters field "email" to start with the provided value.
 */
export type ParameterEdgeAuthorEmailHasPrefix = string;

/**
 * Filters field "email" to end with the provided value.
 */
export type ParameterEdgeAuthorEmailHasSuffix = string;

/**
 * Filters field "email" to be within the provided values.
 */
export type ParameterEdgeAuthorEmailIn = Array<(string)>;

/**
 * Filters field "email" to be null/nil.
 */
export type ParameterEdgeAuthorEmailIsNil = boolean;

/**
 * Filters field "email" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorEmailNEQ = string;

/**
 * Filters field "email" to be not within the provided values.
 */
export type ParameterEdgeAuthorEmailNotIn = Array<(string)>;

/**
 * Filters field "location" to contain the provided value.
 */
export type ParameterEdgeAuthorLocationContains = string;

/**
 * Filters field "location" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorLocationContainsFold = string;

/**
 * Filters field "location" to be equal to the provided value.
 */
export type ParameterEdgeAuthorLocationEQ = string;

/**
 * Filters field "location" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorLocationEqualFold = string;

/**
 * Filters field "location" to start with the provided value.
 */
export type ParameterEdgeAuthorLocationHasPrefix = string;

/**
 * Filters field "location" to end with the provided value.
 */
export type ParameterEdgeAuthorLocationHasSuffix = string;

/**
 * Filters field "location" to be within the provided values.
 */
export type ParameterEdgeAuthorLocationIn = Array<(string)>;

/**
 * Filters field "location" to be null/nil.
 */
export type ParameterEdgeAuthorLocationIsNil = boolean;

/**
 * Filters field "location" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorLocationNEQ = string;

/**
 * Filters field "location" to be not within the provided values.
 */
export type ParameterEdgeAuthorLocationNotIn = Array<(string)>;

/**
 * Filters field "login" to contain the provided value.
 */
export type ParameterEdgeAuthorLoginContains = string;

/**
 * Filters field "login" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorLoginContainsFold = string;

/**
 * Filters field "login" to be equal to the provided value.
 */
export type ParameterEdgeAuthorLoginEQ = string;

/**
 * Filters field "login" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorLoginEqualFold = string;

/**
 * Filters field "login" to start with the provided value.
 */
export type ParameterEdgeAuthorLoginHasPrefix = string;

/**
 * Filters field "login" to end with the provided value.
 */
export type ParameterEdgeAuthorLoginHasSuffix = string;

/**
 * Filters field "login" to be within the provided values.
 */
export type ParameterEdgeAuthorLoginIn = Array<(string)>;

/**
 * Filters field "login" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorLoginNEQ = string;

/**
 * Filters field "login" to be not within the provided values.
 */
export type ParameterEdgeAuthorLoginNotIn = Array<(string)>;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeAuthorNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeAuthorNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeAuthorNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeAuthorNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeAuthorNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeAuthorNameIn = Array<(string)>;

/**
 * Filters field "name" to be null/nil.
 */
export type ParameterEdgeAuthorNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeAuthorNameNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterEdgeAuthorUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterEdgeAuthorUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterEdgeAuthorUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorUpdateTimeNEQ = string;

/**
 * Filters field "user_id" to be equal to the provided value.
 */
export type ParameterEdgeAuthorUserIDEQ = number;

/**
 * Filters field "user_id" to be within the provided values.
 */
export type ParameterEdgeAuthorUserIDIn = Array<(number)>;

/**
 * Filters field "user_id" to be not equal to the provided value.
 */
export type ParameterEdgeAuthorUserIDNEQ = number;

/**
 * Filters field "user_id" to be not within the provided values.
 */
export type ParameterEdgeAuthorUserIDNotIn = Array<(number)>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryArchivedEQ = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterEdgeGithubRepositoryCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterEdgeGithubRepositoryCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryCreatedAtNEQ = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchEQ = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchIn = Array<(string)>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchNEQ = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type ParameterEdgeGithubRepositoryDefaultBranchNotIn = Array<(string)>;

/**
 * Filters field "description" to contain the provided value.
 */
export type ParameterEdgeGithubRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type ParameterEdgeGithubRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryForkEQ = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type ParameterEdgeGithubRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryFullNameEQ = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type ParameterEdgeGithubRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type ParameterEdgeGithubRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type ParameterEdgeGithubRepositoryFullNameIn = Array<(string)>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryFullNameNEQ = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type ParameterEdgeGithubRepositoryFullNameNotIn = Array<(string)>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryHasIssuesEQ = boolean;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryIsTemplateEQ = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeGithubRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeGithubRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeGithubRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeGithubRepositoryNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeGithubRepositoryNameNotIn = Array<(string)>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginEQ = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginIn = Array<(string)>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginNEQ = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type ParameterEdgeGithubRepositoryOwnerLoginNotIn = Array<(string)>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryPublicEQ = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type ParameterEdgeGithubRepositoryPushedAtIn = Array<(string)>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type ParameterEdgeGithubRepositoryPushedAtNotIn = Array<(string)>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryRepoIDEQ = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryRepoIDNEQ = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type ParameterEdgeGithubRepositoryStarCountGT = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type ParameterEdgeGithubRepositoryStarCountLT = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterEdgeGithubRepositoryUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type ParameterEdgeGithubRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterEdgeGithubRepositoryUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterEdgeGithubRepositoryUpdatedAtNEQ = string;

/**
 * If true, only return entities that have a asset edge.
 */
export type ParameterEdgeHasAsset = boolean;

/**
 * If true, only return entities that have a author edge.
 */
export type ParameterEdgeHasAuthor = boolean;

/**
 * If true, only return entities that have a github_repository edge.
 */
export type ParameterEdgeHasGithubRepository = boolean;

/**
 * If true, only return entities that have a label edge.
 */
export type ParameterEdgeHasLabel = boolean;

/**
 * If true, only return entities that have a post edge.
 */
export type ParameterEdgeHasPost = boolean;

/**
 * If true, only return entities that have a release edge.
 */
export type ParameterEdgeHasRelease = boolean;

/**
 * If true, only return entities that have a repository edge.
 */
export type ParameterEdgeHasRepository = boolean;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterEdgeLabelCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterEdgeLabelCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterEdgeLabelCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterEdgeLabelCreateTimeNEQ = string;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeLabelNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeLabelNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeLabelNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeLabelNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeLabelNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeLabelNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeLabelNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeLabelNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeLabelNameNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterEdgeLabelUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterEdgeLabelUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterEdgeLabelUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterEdgeLabelUpdateTimeNEQ = string;

/**
 * Filters field "content" to contain the provided value.
 */
export type ParameterEdgePostContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type ParameterEdgePostContentContainsFold = string;

/**
 * Filters field "content_html" to contain the provided value.
 */
export type ParameterEdgePostContentHTMLContains = string;

/**
 * Filters field "content_html" to contain the provided value, case-insensitive.
 */
export type ParameterEdgePostContentHTMLContainsFold = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterEdgePostCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterEdgePostCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterEdgePostCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterEdgePostCreateTimeNEQ = string;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterEdgePostPublicEQ = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type ParameterEdgePostPublishedAtEQ = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type ParameterEdgePostPublishedAtGT = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type ParameterEdgePostPublishedAtLT = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type ParameterEdgePostPublishedAtNEQ = string;

/**
 * Filters field "slug" to be equal to the provided value.
 */
export type ParameterEdgePostSlugEQ = string;

/**
 * Filters field "slug" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgePostSlugEqualFold = string;

/**
 * Filters field "slug" to be not equal to the provided value.
 */
export type ParameterEdgePostSlugNEQ = string;

/**
 * Filters field "title" to contain the provided value.
 */
export type ParameterEdgePostTitleContains = string;

/**
 * Filters field "title" to contain the provided value, case-insensitive.
 */
export type ParameterEdgePostTitleContainsFold = string;

/**
 * Filters field "title" to be equal to the provided value.
 */
export type ParameterEdgePostTitleEQ = string;

/**
 * Filters field "title" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgePostTitleEqualFold = string;

/**
 * Filters field "title" to start with the provided value.
 */
export type ParameterEdgePostTitleHasPrefix = string;

/**
 * Filters field "title" to end with the provided value.
 */
export type ParameterEdgePostTitleHasSuffix = string;

/**
 * Filters field "title" to be within the provided values.
 */
export type ParameterEdgePostTitleIn = Array<(string)>;

/**
 * Filters field "title" to be not equal to the provided value.
 */
export type ParameterEdgePostTitleNEQ = string;

/**
 * Filters field "title" to be not within the provided values.
 */
export type ParameterEdgePostTitleNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterEdgePostUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterEdgePostUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterEdgePostUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterEdgePostUpdateTimeNEQ = string;

/**
 * Filters field "view_count" to be equal to the provided value.
 */
export type ParameterEdgePostViewCountEQ = number;

/**
 * Filters field "view_count" to be greater than the provided value.
 */
export type ParameterEdgePostViewCountGT = number;

/**
 * Filters field "view_count" to be less than the provided value.
 */
export type ParameterEdgePostViewCountLT = number;

/**
 * Filters field "view_count" to be not equal to the provided value.
 */
export type ParameterEdgePostViewCountNEQ = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterEdgeReleaseCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterEdgeReleaseCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterEdgeReleaseCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterEdgeReleaseCreatedAtNEQ = string;

/**
 * Filters field "draft" to be equal to the provided value.
 */
export type ParameterEdgeReleaseDraftEQ = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeReleaseNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeReleaseNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeReleaseNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeReleaseNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeReleaseNameIn = Array<(string)>;

/**
 * Filters field "name" to be null/nil.
 */
export type ParameterEdgeReleaseNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeReleaseNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeReleaseNameNotIn = Array<(string)>;

/**
 * Filters field "prerelease" to be equal to the provided value.
 */
export type ParameterEdgeReleasePrereleaseEQ = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type ParameterEdgeReleasePublishedAtEQ = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type ParameterEdgeReleasePublishedAtGT = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type ParameterEdgeReleasePublishedAtLT = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type ParameterEdgeReleasePublishedAtNEQ = string;

/**
 * Filters field "release_id" to be equal to the provided value.
 */
export type ParameterEdgeReleaseReleaseIDEQ = number;

/**
 * Filters field "release_id" to be not equal to the provided value.
 */
export type ParameterEdgeReleaseReleaseIDNEQ = number;

/**
 * Filters field "tag_name" to contain the provided value.
 */
export type ParameterEdgeReleaseTagNameContains = string;

/**
 * Filters field "tag_name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseTagNameContainsFold = string;

/**
 * Filters field "tag_name" to be equal to the provided value.
 */
export type ParameterEdgeReleaseTagNameEQ = string;

/**
 * Filters field "tag_name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseTagNameEqualFold = string;

/**
 * Filters field "tag_name" to start with the provided value.
 */
export type ParameterEdgeReleaseTagNameHasPrefix = string;

/**
 * Filters field "tag_name" to end with the provided value.
 */
export type ParameterEdgeReleaseTagNameHasSuffix = string;

/**
 * Filters field "tag_name" to be within the provided values.
 */
export type ParameterEdgeReleaseTagNameIn = Array<(string)>;

/**
 * Filters field "tag_name" to be not equal to the provided value.
 */
export type ParameterEdgeReleaseTagNameNEQ = string;

/**
 * Filters field "tag_name" to be not within the provided values.
 */
export type ParameterEdgeReleaseTagNameNotIn = Array<(string)>;

/**
 * Filters field "target_commitish" to contain the provided value.
 */
export type ParameterEdgeReleaseTargetCommitishContains = string;

/**
 * Filters field "target_commitish" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseTargetCommitishContainsFold = string;

/**
 * Filters field "target_commitish" to be equal to the provided value.
 */
export type ParameterEdgeReleaseTargetCommitishEQ = string;

/**
 * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeReleaseTargetCommitishEqualFold = string;

/**
 * Filters field "target_commitish" to start with the provided value.
 */
export type ParameterEdgeReleaseTargetCommitishHasPrefix = string;

/**
 * Filters field "target_commitish" to end with the provided value.
 */
export type ParameterEdgeReleaseTargetCommitishHasSuffix = string;

/**
 * Filters field "target_commitish" to be within the provided values.
 */
export type ParameterEdgeReleaseTargetCommitishIn = Array<(string)>;

/**
 * Filters field "target_commitish" to be not equal to the provided value.
 */
export type ParameterEdgeReleaseTargetCommitishNEQ = string;

/**
 * Filters field "target_commitish" to be not within the provided values.
 */
export type ParameterEdgeReleaseTargetCommitishNotIn = Array<(string)>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryArchivedEQ = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterEdgeRepositoryCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterEdgeRepositoryCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryCreatedAtNEQ = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type ParameterEdgeRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryDefaultBranchEQ = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type ParameterEdgeRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type ParameterEdgeRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type ParameterEdgeRepositoryDefaultBranchIn = Array<(string)>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryDefaultBranchNEQ = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type ParameterEdgeRepositoryDefaultBranchNotIn = Array<(string)>;

/**
 * Filters field "description" to contain the provided value.
 */
export type ParameterEdgeRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type ParameterEdgeRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryForkEQ = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type ParameterEdgeRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryFullNameEQ = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type ParameterEdgeRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type ParameterEdgeRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type ParameterEdgeRepositoryFullNameIn = Array<(string)>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryFullNameNEQ = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type ParameterEdgeRepositoryFullNameNotIn = Array<(string)>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryHasIssuesEQ = boolean;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryIsTemplateEQ = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterEdgeRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterEdgeRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterEdgeRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterEdgeRepositoryNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterEdgeRepositoryNameNotIn = Array<(string)>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type ParameterEdgeRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryOwnerLoginEQ = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type ParameterEdgeRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type ParameterEdgeRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type ParameterEdgeRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type ParameterEdgeRepositoryOwnerLoginIn = Array<(string)>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryOwnerLoginNEQ = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type ParameterEdgeRepositoryOwnerLoginNotIn = Array<(string)>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryPublicEQ = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type ParameterEdgeRepositoryPushedAtIn = Array<(string)>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type ParameterEdgeRepositoryPushedAtNotIn = Array<(string)>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryRepoIDEQ = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryRepoIDNEQ = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type ParameterEdgeRepositoryStarCountGT = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type ParameterEdgeRepositoryStarCountLT = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterEdgeRepositoryUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterEdgeRepositoryUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type ParameterEdgeRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterEdgeRepositoryUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterEdgeRepositoryUpdatedAtNEQ = string;

/**
 * Filter operation to use.
 */
export type ParameterFilterOperation = FilterOperation;

/**
 * Filters field "asset_id" to be equal to the provided value.
 */
export type ParameterGithubAssetAssetIDEQ = number;

/**
 * Filters field "asset_id" to be not equal to the provided value.
 */
export type ParameterGithubAssetAssetIDNEQ = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterGithubAssetCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterGithubAssetCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterGithubAssetCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterGithubAssetCreatedAtNEQ = string;

/**
 * Filters field "download_count" to be greater than the provided value.
 */
export type ParameterGithubAssetDownloadCountGT = number;

/**
 * Filters field "download_count" to be less than the provided value.
 */
export type ParameterGithubAssetDownloadCountLT = number;

/**
 * The ID of the GithubAsset to act upon.
 */
export type ParameterGithubAssetID = number;

/**
 * Filters field "label" to contain the provided value.
 */
export type ParameterGithubAssetLabelContains = string;

/**
 * Filters field "label" to contain the provided value, case-insensitive.
 */
export type ParameterGithubAssetLabelContainsFold = string;

/**
 * Filters field "label" to be equal to the provided value.
 */
export type ParameterGithubAssetLabelEQ = string;

/**
 * Filters field "label" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubAssetLabelEqualFold = string;

/**
 * Filters field "label" to start with the provided value.
 */
export type ParameterGithubAssetLabelHasPrefix = string;

/**
 * Filters field "label" to end with the provided value.
 */
export type ParameterGithubAssetLabelHasSuffix = string;

/**
 * Filters field "label" to be within the provided values.
 */
export type ParameterGithubAssetLabelIn = Array<(string)>;

/**
 * Filters field "label" to be null/nil.
 */
export type ParameterGithubAssetLabelIsNil = boolean;

/**
 * Filters field "label" to be not equal to the provided value.
 */
export type ParameterGithubAssetLabelNEQ = string;

/**
 * Filters field "label" to be not within the provided values.
 */
export type ParameterGithubAssetLabelNotIn = Array<(string)>;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterGithubAssetNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubAssetNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterGithubAssetNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubAssetNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterGithubAssetNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterGithubAssetNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterGithubAssetNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterGithubAssetNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterGithubAssetNameNotIn = Array<(string)>;

/**
 * Filters field "size" to be greater than the provided value.
 */
export type ParameterGithubAssetSizeGT = number;

/**
 * Filters field "size" to be less than the provided value.
 */
export type ParameterGithubAssetSizeLT = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterGithubAssetUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterGithubAssetUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type ParameterGithubAssetUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterGithubAssetUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterGithubAssetUpdatedAtNEQ = string;

/**
 * Filters field "actor_id" to be equal to the provided value.
 */
export type ParameterGithubEventActorIDEQ = number;

/**
 * Filters field "actor_id" to be not equal to the provided value.
 */
export type ParameterGithubEventActorIDNEQ = number;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterGithubEventCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterGithubEventCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterGithubEventCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterGithubEventCreatedAtNEQ = string;

/**
 * Filters field "event_id" to be equal to the provided value.
 */
export type ParameterGithubEventEventIDEQ = string;

/**
 * Filters field "event_id" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubEventEventIDEqualFold = string;

/**
 * Filters field "event_id" to be not equal to the provided value.
 */
export type ParameterGithubEventEventIDNEQ = string;

/**
 * Filters field "event_type" to contain the provided value.
 */
export type ParameterGithubEventEventTypeContains = string;

/**
 * Filters field "event_type" to contain the provided value, case-insensitive.
 */
export type ParameterGithubEventEventTypeContainsFold = string;

/**
 * Filters field "event_type" to be equal to the provided value.
 */
export type ParameterGithubEventEventTypeEQ = string;

/**
 * Filters field "event_type" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubEventEventTypeEqualFold = string;

/**
 * Filters field "event_type" to start with the provided value.
 */
export type ParameterGithubEventEventTypeHasPrefix = string;

/**
 * Filters field "event_type" to end with the provided value.
 */
export type ParameterGithubEventEventTypeHasSuffix = string;

/**
 * Filters field "event_type" to be within the provided values.
 */
export type ParameterGithubEventEventTypeIn = Array<(string)>;

/**
 * Filters field "event_type" to be not equal to the provided value.
 */
export type ParameterGithubEventEventTypeNEQ = string;

/**
 * Filters field "event_type" to be not within the provided values.
 */
export type ParameterGithubEventEventTypeNotIn = Array<(string)>;

/**
 * The ID of the GithubEvent to act upon.
 */
export type ParameterGithubEventID = number;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterGithubEventPublicEQ = boolean;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type ParameterGithubEventRepoIDEQ = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type ParameterGithubEventRepoIDNEQ = number;

/**
 * Filters field "content" to contain the provided value.
 */
export type ParameterGithubGistContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type ParameterGithubGistContentContainsFold = string;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterGithubGistCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterGithubGistCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterGithubGistCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterGithubGistCreatedAtNEQ = string;

/**
 * Filters field "description" to contain the provided value.
 */
export type ParameterGithubGistDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type ParameterGithubGistDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type ParameterGithubGistDescriptionIsNil = boolean;

/**
 * Filters field "gist_id" to be equal to the provided value.
 */
export type ParameterGithubGistGistIDEQ = string;

/**
 * Filters field "gist_id" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubGistGistIDEqualFold = string;

/**
 * Filters field "gist_id" to be not equal to the provided value.
 */
export type ParameterGithubGistGistIDNEQ = string;

/**
 * The ID of the GithubGist to act upon.
 */
export type ParameterGithubGistID = number;

/**
 * Filters field "language" to contain the provided value.
 */
export type ParameterGithubGistLanguageContains = string;

/**
 * Filters field "language" to contain the provided value, case-insensitive.
 */
export type ParameterGithubGistLanguageContainsFold = string;

/**
 * Filters field "language" to be equal to the provided value.
 */
export type ParameterGithubGistLanguageEQ = string;

/**
 * Filters field "language" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubGistLanguageEqualFold = string;

/**
 * Filters field "language" to start with the provided value.
 */
export type ParameterGithubGistLanguageHasPrefix = string;

/**
 * Filters field "language" to end with the provided value.
 */
export type ParameterGithubGistLanguageHasSuffix = string;

/**
 * Filters field "language" to be within the provided values.
 */
export type ParameterGithubGistLanguageIn = Array<(string)>;

/**
 * Filters field "language" to be null/nil.
 */
export type ParameterGithubGistLanguageIsNil = boolean;

/**
 * Filters field "language" to be not equal to the provided value.
 */
export type ParameterGithubGistLanguageNEQ = string;

/**
 * Filters field "language" to be not within the provided values.
 */
export type ParameterGithubGistLanguageNotIn = Array<(string)>;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterGithubGistNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubGistNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterGithubGistNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubGistNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterGithubGistNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterGithubGistNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterGithubGistNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterGithubGistNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterGithubGistNameNotIn = Array<(string)>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterGithubGistPublicEQ = boolean;

/**
 * Filters field "size" to be equal to the provided value.
 */
export type ParameterGithubGistSizeEQ = number;

/**
 * Filters field "size" to be not equal to the provided value.
 */
export type ParameterGithubGistSizeNEQ = number;

/**
 * Filters field "type" to contain the provided value.
 */
export type ParameterGithubGistTypeContains = string;

/**
 * Filters field "type" to contain the provided value, case-insensitive.
 */
export type ParameterGithubGistTypeContainsFold = string;

/**
 * Filters field "type" to be equal to the provided value.
 */
export type ParameterGithubGistTypeEQ = string;

/**
 * Filters field "type" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubGistTypeEqualFold = string;

/**
 * Filters field "type" to start with the provided value.
 */
export type ParameterGithubGistTypeHasPrefix = string;

/**
 * Filters field "type" to end with the provided value.
 */
export type ParameterGithubGistTypeHasSuffix = string;

/**
 * Filters field "type" to be within the provided values.
 */
export type ParameterGithubGistTypeIn = Array<(string)>;

/**
 * Filters field "type" to be not equal to the provided value.
 */
export type ParameterGithubGistTypeNEQ = string;

/**
 * Filters field "type" to be not within the provided values.
 */
export type ParameterGithubGistTypeNotIn = Array<(string)>;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterGithubGistUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterGithubGistUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterGithubGistUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterGithubGistUpdatedAtNEQ = string;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterGithubReleaseCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterGithubReleaseCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterGithubReleaseCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterGithubReleaseCreatedAtNEQ = string;

/**
 * Filters field "draft" to be equal to the provided value.
 */
export type ParameterGithubReleaseDraftEQ = boolean;

/**
 * The ID of the GithubRelease to act upon.
 */
export type ParameterGithubReleaseID = number;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterGithubReleaseNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubReleaseNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterGithubReleaseNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubReleaseNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterGithubReleaseNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterGithubReleaseNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterGithubReleaseNameIn = Array<(string)>;

/**
 * Filters field "name" to be null/nil.
 */
export type ParameterGithubReleaseNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterGithubReleaseNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterGithubReleaseNameNotIn = Array<(string)>;

/**
 * Filters field "prerelease" to be equal to the provided value.
 */
export type ParameterGithubReleasePrereleaseEQ = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type ParameterGithubReleasePublishedAtEQ = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type ParameterGithubReleasePublishedAtGT = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type ParameterGithubReleasePublishedAtLT = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type ParameterGithubReleasePublishedAtNEQ = string;

/**
 * Filters field "release_id" to be equal to the provided value.
 */
export type ParameterGithubReleaseReleaseIDEQ = number;

/**
 * Filters field "release_id" to be not equal to the provided value.
 */
export type ParameterGithubReleaseReleaseIDNEQ = number;

/**
 * Filters field "tag_name" to contain the provided value.
 */
export type ParameterGithubReleaseTagNameContains = string;

/**
 * Filters field "tag_name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubReleaseTagNameContainsFold = string;

/**
 * Filters field "tag_name" to be equal to the provided value.
 */
export type ParameterGithubReleaseTagNameEQ = string;

/**
 * Filters field "tag_name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubReleaseTagNameEqualFold = string;

/**
 * Filters field "tag_name" to start with the provided value.
 */
export type ParameterGithubReleaseTagNameHasPrefix = string;

/**
 * Filters field "tag_name" to end with the provided value.
 */
export type ParameterGithubReleaseTagNameHasSuffix = string;

/**
 * Filters field "tag_name" to be within the provided values.
 */
export type ParameterGithubReleaseTagNameIn = Array<(string)>;

/**
 * Filters field "tag_name" to be not equal to the provided value.
 */
export type ParameterGithubReleaseTagNameNEQ = string;

/**
 * Filters field "tag_name" to be not within the provided values.
 */
export type ParameterGithubReleaseTagNameNotIn = Array<(string)>;

/**
 * Filters field "target_commitish" to contain the provided value.
 */
export type ParameterGithubReleaseTargetCommitishContains = string;

/**
 * Filters field "target_commitish" to contain the provided value, case-insensitive.
 */
export type ParameterGithubReleaseTargetCommitishContainsFold = string;

/**
 * Filters field "target_commitish" to be equal to the provided value.
 */
export type ParameterGithubReleaseTargetCommitishEQ = string;

/**
 * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubReleaseTargetCommitishEqualFold = string;

/**
 * Filters field "target_commitish" to start with the provided value.
 */
export type ParameterGithubReleaseTargetCommitishHasPrefix = string;

/**
 * Filters field "target_commitish" to end with the provided value.
 */
export type ParameterGithubReleaseTargetCommitishHasSuffix = string;

/**
 * Filters field "target_commitish" to be within the provided values.
 */
export type ParameterGithubReleaseTargetCommitishIn = Array<(string)>;

/**
 * Filters field "target_commitish" to be not equal to the provided value.
 */
export type ParameterGithubReleaseTargetCommitishNEQ = string;

/**
 * Filters field "target_commitish" to be not within the provided values.
 */
export type ParameterGithubReleaseTargetCommitishNotIn = Array<(string)>;

/**
 * Filters field "archived" to be equal to the provided value.
 */
export type ParameterGithubRepositoryArchivedEQ = boolean;

/**
 * Filters field "created_at" to be equal to the provided value.
 */
export type ParameterGithubRepositoryCreatedAtEQ = string;

/**
 * Filters field "created_at" to be greater than the provided value.
 */
export type ParameterGithubRepositoryCreatedAtGT = number;

/**
 * Filters field "created_at" to be less than the provided value.
 */
export type ParameterGithubRepositoryCreatedAtLT = number;

/**
 * Filters field "created_at" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryCreatedAtNEQ = string;

/**
 * Filters field "default_branch" to contain the provided value.
 */
export type ParameterGithubRepositoryDefaultBranchContains = string;

/**
 * Filters field "default_branch" to contain the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryDefaultBranchContainsFold = string;

/**
 * Filters field "default_branch" to be equal to the provided value.
 */
export type ParameterGithubRepositoryDefaultBranchEQ = string;

/**
 * Filters field "default_branch" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryDefaultBranchEqualFold = string;

/**
 * Filters field "default_branch" to start with the provided value.
 */
export type ParameterGithubRepositoryDefaultBranchHasPrefix = string;

/**
 * Filters field "default_branch" to end with the provided value.
 */
export type ParameterGithubRepositoryDefaultBranchHasSuffix = string;

/**
 * Filters field "default_branch" to be within the provided values.
 */
export type ParameterGithubRepositoryDefaultBranchIn = Array<(string)>;

/**
 * Filters field "default_branch" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryDefaultBranchNEQ = string;

/**
 * Filters field "default_branch" to be not within the provided values.
 */
export type ParameterGithubRepositoryDefaultBranchNotIn = Array<(string)>;

/**
 * Filters field "description" to contain the provided value.
 */
export type ParameterGithubRepositoryDescriptionContains = string;

/**
 * Filters field "description" to contain the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryDescriptionContainsFold = string;

/**
 * Filters field "description" to be null/nil.
 */
export type ParameterGithubRepositoryDescriptionIsNil = boolean;

/**
 * Filters field "fork" to be equal to the provided value.
 */
export type ParameterGithubRepositoryForkEQ = boolean;

/**
 * Filters field "full_name" to contain the provided value.
 */
export type ParameterGithubRepositoryFullNameContains = string;

/**
 * Filters field "full_name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryFullNameContainsFold = string;

/**
 * Filters field "full_name" to be equal to the provided value.
 */
export type ParameterGithubRepositoryFullNameEQ = string;

/**
 * Filters field "full_name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryFullNameEqualFold = string;

/**
 * Filters field "full_name" to start with the provided value.
 */
export type ParameterGithubRepositoryFullNameHasPrefix = string;

/**
 * Filters field "full_name" to end with the provided value.
 */
export type ParameterGithubRepositoryFullNameHasSuffix = string;

/**
 * Filters field "full_name" to be within the provided values.
 */
export type ParameterGithubRepositoryFullNameIn = Array<(string)>;

/**
 * Filters field "full_name" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryFullNameNEQ = string;

/**
 * Filters field "full_name" to be not within the provided values.
 */
export type ParameterGithubRepositoryFullNameNotIn = Array<(string)>;

/**
 * Filters field "has_issues" to be equal to the provided value.
 */
export type ParameterGithubRepositoryHasIssuesEQ = boolean;

/**
 * The ID of the GithubRepository to act upon.
 */
export type ParameterGithubRepositoryID = number;

/**
 * Filters field "is_template" to be equal to the provided value.
 */
export type ParameterGithubRepositoryIsTemplateEQ = boolean;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterGithubRepositoryNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterGithubRepositoryNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterGithubRepositoryNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterGithubRepositoryNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterGithubRepositoryNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterGithubRepositoryNameNotIn = Array<(string)>;

/**
 * Filters field "owner_login" to contain the provided value.
 */
export type ParameterGithubRepositoryOwnerLoginContains = string;

/**
 * Filters field "owner_login" to contain the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryOwnerLoginContainsFold = string;

/**
 * Filters field "owner_login" to be equal to the provided value.
 */
export type ParameterGithubRepositoryOwnerLoginEQ = string;

/**
 * Filters field "owner_login" to be equal to the provided value, case-insensitive.
 */
export type ParameterGithubRepositoryOwnerLoginEqualFold = string;

/**
 * Filters field "owner_login" to start with the provided value.
 */
export type ParameterGithubRepositoryOwnerLoginHasPrefix = string;

/**
 * Filters field "owner_login" to end with the provided value.
 */
export type ParameterGithubRepositoryOwnerLoginHasSuffix = string;

/**
 * Filters field "owner_login" to be within the provided values.
 */
export type ParameterGithubRepositoryOwnerLoginIn = Array<(string)>;

/**
 * Filters field "owner_login" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryOwnerLoginNEQ = string;

/**
 * Filters field "owner_login" to be not within the provided values.
 */
export type ParameterGithubRepositoryOwnerLoginNotIn = Array<(string)>;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterGithubRepositoryPublicEQ = boolean;

/**
 * Filters field "pushed_at" to be within the provided values.
 */
export type ParameterGithubRepositoryPushedAtIn = Array<(string)>;

/**
 * Filters field "pushed_at" to be not within the provided values.
 */
export type ParameterGithubRepositoryPushedAtNotIn = Array<(string)>;

/**
 * Filters field "repo_id" to be equal to the provided value.
 */
export type ParameterGithubRepositoryRepoIDEQ = number;

/**
 * Filters field "repo_id" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryRepoIDNEQ = number;

/**
 * Filters field "star_count" to be greater than the provided value.
 */
export type ParameterGithubRepositoryStarCountGT = number;

/**
 * Filters field "star_count" to be less than the provided value.
 */
export type ParameterGithubRepositoryStarCountLT = number;

/**
 * Filters field "updated_at" to be equal to the provided value.
 */
export type ParameterGithubRepositoryUpdatedAtEQ = string;

/**
 * Filters field "updated_at" to be greater than the provided value.
 */
export type ParameterGithubRepositoryUpdatedAtGT = number;

/**
 * Filters field "updated_at" to be null/nil.
 */
export type ParameterGithubRepositoryUpdatedAtIsNil = boolean;

/**
 * Filters field "updated_at" to be less than the provided value.
 */
export type ParameterGithubRepositoryUpdatedAtLT = number;

/**
 * Filters field "updated_at" to be not equal to the provided value.
 */
export type ParameterGithubRepositoryUpdatedAtNEQ = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterLabelCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterLabelCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterLabelCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterLabelCreateTimeNEQ = string;

/**
 * The ID of the Label to act upon.
 */
export type ParameterLabelID = number;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterLabelNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterLabelNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterLabelNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterLabelNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterLabelNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterLabelNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterLabelNameIn = Array<(string)>;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterLabelNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterLabelNameNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterLabelUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterLabelUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterLabelUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterLabelUpdateTimeNEQ = string;

/**
 * The page number to retrieve.
 */
export type ParameterPage = number;

/**
 * Filters field "content" to contain the provided value.
 */
export type ParameterPostContentContains = string;

/**
 * Filters field "content" to contain the provided value, case-insensitive.
 */
export type ParameterPostContentContainsFold = string;

/**
 * Filters field "content_html" to contain the provided value.
 */
export type ParameterPostContentHTMLContains = string;

/**
 * Filters field "content_html" to contain the provided value, case-insensitive.
 */
export type ParameterPostContentHTMLContainsFold = string;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterPostCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterPostCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterPostCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterPostCreateTimeNEQ = string;

/**
 * The ID of the Post to act upon.
 */
export type ParameterPostID = number;

/**
 * Filters field "public" to be equal to the provided value.
 */
export type ParameterPostPublicEQ = boolean;

/**
 * Filters field "published_at" to be equal to the provided value.
 */
export type ParameterPostPublishedAtEQ = string;

/**
 * Filters field "published_at" to be greater than the provided value.
 */
export type ParameterPostPublishedAtGT = number;

/**
 * Filters field "published_at" to be less than the provided value.
 */
export type ParameterPostPublishedAtLT = number;

/**
 * Filters field "published_at" to be not equal to the provided value.
 */
export type ParameterPostPublishedAtNEQ = string;

/**
 * Filters field "slug" to be equal to the provided value.
 */
export type ParameterPostSlugEQ = string;

/**
 * Filters field "slug" to be equal to the provided value, case-insensitive.
 */
export type ParameterPostSlugEqualFold = string;

/**
 * Filters field "slug" to be not equal to the provided value.
 */
export type ParameterPostSlugNEQ = string;

/**
 * Filters field "title" to contain the provided value.
 */
export type ParameterPostTitleContains = string;

/**
 * Filters field "title" to contain the provided value, case-insensitive.
 */
export type ParameterPostTitleContainsFold = string;

/**
 * Filters field "title" to be equal to the provided value.
 */
export type ParameterPostTitleEQ = string;

/**
 * Filters field "title" to be equal to the provided value, case-insensitive.
 */
export type ParameterPostTitleEqualFold = string;

/**
 * Filters field "title" to start with the provided value.
 */
export type ParameterPostTitleHasPrefix = string;

/**
 * Filters field "title" to end with the provided value.
 */
export type ParameterPostTitleHasSuffix = string;

/**
 * Filters field "title" to be within the provided values.
 */
export type ParameterPostTitleIn = Array<(string)>;

/**
 * Filters field "title" to be not equal to the provided value.
 */
export type ParameterPostTitleNEQ = string;

/**
 * Filters field "title" to be not within the provided values.
 */
export type ParameterPostTitleNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterPostUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterPostUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterPostUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterPostUpdateTimeNEQ = string;

/**
 * Filters field "view_count" to be equal to the provided value.
 */
export type ParameterPostViewCountEQ = number;

/**
 * Filters field "view_count" to be greater than the provided value.
 */
export type ParameterPostViewCountGT = number;

/**
 * Filters field "view_count" to be less than the provided value.
 */
export type ParameterPostViewCountLT = number;

/**
 * Filters field "view_count" to be not equal to the provided value.
 */
export type ParameterPostViewCountNEQ = number;

/**
 * If set to true, any JSON response will be indented. Not recommended for best performance.
 */
export type ParameterPrettyResponse = boolean;

/**
 * Background type.
 */
export type ParameterSVGBackground = 'geometric' | 'topography';

/**
 * Background type.
 */
export const ParameterSVGBackground = {
    GEOMETRIC: 'geometric',
    TOPOGRAPHY: 'topography'
} as const;

/**
 * Background color (hex, rgb, rgba, hsl).
 */
export type ParameterSVGBackgroundColor = string;

/**
 * Description of the project (not required if using owner/repo).
 */
export type ParameterSVGDescription = string;

/**
 * Font scale.
 */
export type ParameterSVGFontScale = number;

/**
 * Height of the SVG (in px).
 */
export type ParameterSVGHeight = number;

/**
 * Iconidfy icon to use.
 */
export type ParameterSVGIcon = string;

/**
 * Color of the icon (hex, rgb, rgba, hsl).
 */
export type ParameterSVGIconColor = string;

/**
 * Flip the icon.
 */
export type ParameterSVGIconFlip = 'horizontal' | 'vertical';

/**
 * Flip the icon.
 */
export const ParameterSVGIconFlip = {
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
} as const;

/**
 * Height of the icon (in px).
 */
export type ParameterSVGIconHeight = number;

/**
 * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
 */
export type ParameterSVGIconRotate = 1 | 2 | 3;

/**
 * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
 */
export const ParameterSVGIconRotate = {
    '_1': 1,
    '_2': 2,
    '_3': 3
} as const;

/**
 * Width of the icon (in px).
 */
export type ParameterSVGIconWidth = number;

/**
 * Layout of the SVG.
 */
export type ParameterSVGLayout = 'all' | 'left' | 'right';

/**
 * Layout of the SVG.
 */
export const ParameterSVGLayout = {
    ALL: 'all',
    LEFT: 'left',
    RIGHT: 'right'
} as const;

/**
 * Title of the project (not required if using owner/repo).
 */
export type ParameterSVGTitle = string;

/**
 * Width of the SVG (in px).
 */
export type ParameterSVGWidth = number;

/**
 * Filters field "create_time" to be equal to the provided value.
 */
export type ParameterUserCreateTimeEQ = string;

/**
 * Filters field "create_time" to be greater than the provided value.
 */
export type ParameterUserCreateTimeGT = number;

/**
 * Filters field "create_time" to be less than the provided value.
 */
export type ParameterUserCreateTimeLT = number;

/**
 * Filters field "create_time" to be not equal to the provided value.
 */
export type ParameterUserCreateTimeNEQ = string;

/**
 * Filters field "email" to contain the provided value.
 */
export type ParameterUserEmailContains = string;

/**
 * Filters field "email" to contain the provided value, case-insensitive.
 */
export type ParameterUserEmailContainsFold = string;

/**
 * Filters field "email" to be equal to the provided value.
 */
export type ParameterUserEmailEQ = string;

/**
 * Filters field "email" to be equal to the provided value, case-insensitive.
 */
export type ParameterUserEmailEqualFold = string;

/**
 * Filters field "email" to start with the provided value.
 */
export type ParameterUserEmailHasPrefix = string;

/**
 * Filters field "email" to end with the provided value.
 */
export type ParameterUserEmailHasSuffix = string;

/**
 * Filters field "email" to be within the provided values.
 */
export type ParameterUserEmailIn = Array<(string)>;

/**
 * Filters field "email" to be null/nil.
 */
export type ParameterUserEmailIsNil = boolean;

/**
 * Filters field "email" to be not equal to the provided value.
 */
export type ParameterUserEmailNEQ = string;

/**
 * Filters field "email" to be not within the provided values.
 */
export type ParameterUserEmailNotIn = Array<(string)>;

/**
 * The ID of the User to act upon.
 */
export type ParameterUserID = number;

/**
 * Filters field "location" to contain the provided value.
 */
export type ParameterUserLocationContains = string;

/**
 * Filters field "location" to contain the provided value, case-insensitive.
 */
export type ParameterUserLocationContainsFold = string;

/**
 * Filters field "location" to be equal to the provided value.
 */
export type ParameterUserLocationEQ = string;

/**
 * Filters field "location" to be equal to the provided value, case-insensitive.
 */
export type ParameterUserLocationEqualFold = string;

/**
 * Filters field "location" to start with the provided value.
 */
export type ParameterUserLocationHasPrefix = string;

/**
 * Filters field "location" to end with the provided value.
 */
export type ParameterUserLocationHasSuffix = string;

/**
 * Filters field "location" to be within the provided values.
 */
export type ParameterUserLocationIn = Array<(string)>;

/**
 * Filters field "location" to be null/nil.
 */
export type ParameterUserLocationIsNil = boolean;

/**
 * Filters field "location" to be not equal to the provided value.
 */
export type ParameterUserLocationNEQ = string;

/**
 * Filters field "location" to be not within the provided values.
 */
export type ParameterUserLocationNotIn = Array<(string)>;

/**
 * Filters field "login" to contain the provided value.
 */
export type ParameterUserLoginContains = string;

/**
 * Filters field "login" to contain the provided value, case-insensitive.
 */
export type ParameterUserLoginContainsFold = string;

/**
 * Filters field "login" to be equal to the provided value.
 */
export type ParameterUserLoginEQ = string;

/**
 * Filters field "login" to be equal to the provided value, case-insensitive.
 */
export type ParameterUserLoginEqualFold = string;

/**
 * Filters field "login" to start with the provided value.
 */
export type ParameterUserLoginHasPrefix = string;

/**
 * Filters field "login" to end with the provided value.
 */
export type ParameterUserLoginHasSuffix = string;

/**
 * Filters field "login" to be within the provided values.
 */
export type ParameterUserLoginIn = Array<(string)>;

/**
 * Filters field "login" to be not equal to the provided value.
 */
export type ParameterUserLoginNEQ = string;

/**
 * Filters field "login" to be not within the provided values.
 */
export type ParameterUserLoginNotIn = Array<(string)>;

/**
 * Filters field "name" to contain the provided value.
 */
export type ParameterUserNameContains = string;

/**
 * Filters field "name" to contain the provided value, case-insensitive.
 */
export type ParameterUserNameContainsFold = string;

/**
 * Filters field "name" to be equal to the provided value.
 */
export type ParameterUserNameEQ = string;

/**
 * Filters field "name" to be equal to the provided value, case-insensitive.
 */
export type ParameterUserNameEqualFold = string;

/**
 * Filters field "name" to start with the provided value.
 */
export type ParameterUserNameHasPrefix = string;

/**
 * Filters field "name" to end with the provided value.
 */
export type ParameterUserNameHasSuffix = string;

/**
 * Filters field "name" to be within the provided values.
 */
export type ParameterUserNameIn = Array<(string)>;

/**
 * Filters field "name" to be null/nil.
 */
export type ParameterUserNameIsNil = boolean;

/**
 * Filters field "name" to be not equal to the provided value.
 */
export type ParameterUserNameNEQ = string;

/**
 * Filters field "name" to be not within the provided values.
 */
export type ParameterUserNameNotIn = Array<(string)>;

/**
 * Filters field "update_time" to be equal to the provided value.
 */
export type ParameterUserUpdateTimeEQ = string;

/**
 * Filters field "update_time" to be greater than the provided value.
 */
export type ParameterUserUpdateTimeGT = number;

/**
 * Filters field "update_time" to be less than the provided value.
 */
export type ParameterUserUpdateTimeLT = number;

/**
 * Filters field "update_time" to be not equal to the provided value.
 */
export type ParameterUserUpdateTimeNEQ = string;

/**
 * Filters field "user_id" to be equal to the provided value.
 */
export type ParameterUserUserIDEQ = number;

/**
 * Filters field "user_id" to be within the provided values.
 */
export type ParameterUserUserIDIn = Array<(number)>;

/**
 * Filters field "user_id" to be not equal to the provided value.
 */
export type ParameterUserUserIDNEQ = number;

/**
 * Filters field "user_id" to be not within the provided values.
 */
export type ParameterUserUserIDNotIn = Array<(number)>;

/**
 * A unique identifier for the request.
 */
export type ParameterX_Request_Id = string;

export type GetGithubSvgData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query: {
        /**
         * Background type.
         */
        bg?: 'geometric' | 'topography';
        /**
         * Background color (hex, rgb, rgba, hsl).
         */
        bgcolor?: string;
        /**
         * Description of the project (not required if using owner/repo).
         */
        description: string;
        /**
         * Font scale.
         */
        font?: number;
        /**
         * Height of the SVG (in px).
         */
        h?: number;
        /**
         * Iconidfy icon to use.
         */
        icon?: string;
        /**
         * Color of the icon (hex, rgb, rgba, hsl).
         */
        'icon.color'?: string;
        /**
         * Flip the icon.
         */
        'icon.flip'?: 'horizontal' | 'vertical';
        /**
         * Height of the icon (in px).
         */
        'icon.height'?: number;
        /**
         * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
         */
        'icon.rotate'?: 1 | 2 | 3;
        /**
         * Width of the icon (in px).
         */
        'icon.width'?: number;
        /**
         * Layout of the SVG.
         */
        layout?: 'all' | 'left' | 'right';
        /**
         * Title of the project (not required if using owner/repo).
         */
        title: string;
        /**
         * Width of the SVG (in px).
         */
        w?: number;
    };
};

export type GetGithubSvgResponse = (string);

export type GetGithubSvgError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubRepoSvgData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        ownerID: string;
        repoID: string;
    };
    query?: {
        /**
         * Background type.
         */
        bg?: 'geometric' | 'topography';
        /**
         * Background color (hex, rgb, rgba, hsl).
         */
        bgcolor?: string;
        /**
         * Font scale.
         */
        font?: number;
        /**
         * Height of the SVG (in px).
         */
        h?: number;
        /**
         * Iconidfy icon to use.
         */
        icon?: string;
        /**
         * Color of the icon (hex, rgb, rgba, hsl).
         */
        'icon.color'?: string;
        /**
         * Flip the icon.
         */
        'icon.flip'?: 'horizontal' | 'vertical';
        /**
         * Height of the icon (in px).
         */
        'icon.height'?: number;
        /**
         * Rotate the icon (1=90deg, 2=180deg, 3=270deg).
         */
        'icon.rotate'?: 1 | 2 | 3;
        /**
         * Width of the icon (in px).
         */
        'icon.width'?: number;
        /**
         * Layout of the SVG.
         */
        layout?: 'all' | 'left' | 'right';
        /**
         * Width of the SVG (in px).
         */
        w?: number;
    };
};

export type GetGithubRepoSvgResponse = (string);

export type GetGithubRepoSvgError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubAssetsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'assetID.neq'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'downloadCount.lt'?: number;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'label.eq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'label.has'?: string;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'label.ihas'?: string;
        /**
         * Filters field "label" to be within the provided values.
         */
        'label.in'?: Array<(string)>;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'label.neq'?: string;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'label.notIn'?: Array<(string)>;
        /**
         * Filters field "label" to be null/nil.
         */
        'label.null'?: boolean;
        /**
         * Filters field "label" to start with the provided value.
         */
        'label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'label.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'size.lt'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubAssetSortableFields;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
    };
};

export type ListGithubAssetsResponse = (GithubAssetList);

export type ListGithubAssetsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubAssetData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubAsset to act upon.
         */
        githubassetID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubAssetResponse = (GithubAsset);

export type GetGithubAssetError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubAssetReleaseData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubAsset to act upon.
         */
        githubassetID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubAssetReleaseResponse = (GithubReleaseRead);

export type GetGithubAssetReleaseError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubEventsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "actor_id" to be equal to the provided value.
         */
        'actorID.eq'?: number;
        /**
         * Filters field "actor_id" to be not equal to the provided value.
         */
        'actorID.neq'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "event_id" to be equal to the provided value.
         */
        'eventID.eq'?: string;
        /**
         * Filters field "event_id" to be equal to the provided value, case-insensitive.
         */
        'eventID.ieq'?: string;
        /**
         * Filters field "event_id" to be not equal to the provided value.
         */
        'eventID.neq'?: string;
        /**
         * Filters field "event_type" to be equal to the provided value.
         */
        'eventType.eq'?: string;
        /**
         * Filters field "event_type" to contain the provided value.
         */
        'eventType.has'?: string;
        /**
         * Filters field "event_type" to be equal to the provided value, case-insensitive.
         */
        'eventType.ieq'?: string;
        /**
         * Filters field "event_type" to contain the provided value, case-insensitive.
         */
        'eventType.ihas'?: string;
        /**
         * Filters field "event_type" to be within the provided values.
         */
        'eventType.in'?: Array<(string)>;
        /**
         * Filters field "event_type" to be not equal to the provided value.
         */
        'eventType.neq'?: string;
        /**
         * Filters field "event_type" to be not within the provided values.
         */
        'eventType.notIn'?: Array<(string)>;
        /**
         * Filters field "event_type" to start with the provided value.
         */
        'eventType.prefix'?: string;
        /**
         * Filters field "event_type" to end with the provided value.
         */
        'eventType.suffix'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubEventSortableFields;
    };
};

export type ListGithubEventsResponse = (GithubEventList);

export type ListGithubEventsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubEventData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubEvent to act upon.
         */
        githubeventID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubEventResponse = (GithubEvent);

export type GetGithubEventError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubGistsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "gist_id" to be equal to the provided value.
         */
        'gistID.eq'?: string;
        /**
         * Filters field "gist_id" to be equal to the provided value, case-insensitive.
         */
        'gistID.ieq'?: string;
        /**
         * Filters field "gist_id" to be not equal to the provided value.
         */
        'gistID.neq'?: string;
        /**
         * Filters field "language" to be equal to the provided value.
         */
        'language.eq'?: string;
        /**
         * Filters field "language" to contain the provided value.
         */
        'language.has'?: string;
        /**
         * Filters field "language" to be equal to the provided value, case-insensitive.
         */
        'language.ieq'?: string;
        /**
         * Filters field "language" to contain the provided value, case-insensitive.
         */
        'language.ihas'?: string;
        /**
         * Filters field "language" to be within the provided values.
         */
        'language.in'?: Array<(string)>;
        /**
         * Filters field "language" to be not equal to the provided value.
         */
        'language.neq'?: string;
        /**
         * Filters field "language" to be not within the provided values.
         */
        'language.notIn'?: Array<(string)>;
        /**
         * Filters field "language" to be null/nil.
         */
        'language.null'?: boolean;
        /**
         * Filters field "language" to start with the provided value.
         */
        'language.prefix'?: string;
        /**
         * Filters field "language" to end with the provided value.
         */
        'language.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "size" to be equal to the provided value.
         */
        'size.eq'?: number;
        /**
         * Filters field "size" to be not equal to the provided value.
         */
        'size.neq'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubGistSortableFields;
        /**
         * Filters field "type" to be equal to the provided value.
         */
        'type.eq'?: string;
        /**
         * Filters field "type" to contain the provided value.
         */
        'type.has'?: string;
        /**
         * Filters field "type" to be equal to the provided value, case-insensitive.
         */
        'type.ieq'?: string;
        /**
         * Filters field "type" to contain the provided value, case-insensitive.
         */
        'type.ihas'?: string;
        /**
         * Filters field "type" to be within the provided values.
         */
        'type.in'?: Array<(string)>;
        /**
         * Filters field "type" to be not equal to the provided value.
         */
        'type.neq'?: string;
        /**
         * Filters field "type" to be not within the provided values.
         */
        'type.notIn'?: Array<(string)>;
        /**
         * Filters field "type" to start with the provided value.
         */
        'type.prefix'?: string;
        /**
         * Filters field "type" to end with the provided value.
         */
        'type.suffix'?: string;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
    };
};

export type ListGithubGistsResponse = (GithubGistList);

export type ListGithubGistsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubGistData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubGist to act upon.
         */
        githubgistID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubGistResponse = (GithubGist);

export type GetGithubGistError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubReleasesData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'asset.assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'asset.assetID.neq'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'asset.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'asset.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'asset.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'asset.createdAt.neq'?: string;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'asset.downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'asset.downloadCount.lt'?: number;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'asset.label.eq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'asset.label.has'?: string;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'asset.label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'asset.label.ihas'?: string;
        /**
         * Filters field "label" to be within the provided values.
         */
        'asset.label.in'?: Array<(string)>;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'asset.label.neq'?: string;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'asset.label.notIn'?: Array<(string)>;
        /**
         * Filters field "label" to be null/nil.
         */
        'asset.label.null'?: boolean;
        /**
         * Filters field "label" to start with the provided value.
         */
        'asset.label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'asset.label.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'asset.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'asset.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'asset.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'asset.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'asset.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'asset.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'asset.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'asset.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'asset.name.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'asset.size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'asset.size.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'asset.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'asset.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'asset.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'asset.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'asset.updatedAt.null'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'draft.eq'?: boolean;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a asset edge.
         */
        'has.asset'?: boolean;
        /**
         * If true, only return entities that have a repository edge.
         */
        'has.repository'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'prerelease.eq'?: boolean;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'releaseID.neq'?: number;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'repository.archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'repository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'repository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'repository.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'repository.createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'repository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'repository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'repository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'repository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'repository.defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'repository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'repository.defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'repository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'repository.defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'repository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'repository.description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'repository.description.null'?: boolean;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'repository.fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'repository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'repository.fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'repository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'repository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'repository.fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'repository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'repository.fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'repository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'repository.fullName.suffix'?: string;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'repository.hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'repository.isTemplate.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'repository.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'repository.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'repository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'repository.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'repository.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'repository.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'repository.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'repository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'repository.name.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'repository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'repository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'repository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'repository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'repository.ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'repository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'repository.ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'repository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'repository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'repository.public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'repository.pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'repository.pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repository.repoID.neq'?: number;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'repository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'repository.starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'repository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'repository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'repository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'repository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'repository.updatedAt.null'?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubReleaseSortableFields;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'targetCommitish.suffix'?: string;
    };
};

export type ListGithubReleasesResponse = (GithubReleaseList);

export type ListGithubReleasesError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type ListOutdatedGithubReleasesData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type ListOutdatedGithubReleasesResponse = (Array<OutdatedRepositoryRelease>);

export type ListOutdatedGithubReleasesError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubReleaseData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubReleaseResponse = (GithubReleaseRead);

export type GetGithubReleaseError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubReleaseAssetsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'assetID.neq'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'downloadCount.lt'?: number;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'label.eq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'label.has'?: string;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'label.ihas'?: string;
        /**
         * Filters field "label" to be within the provided values.
         */
        'label.in'?: Array<(string)>;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'label.neq'?: string;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'label.notIn'?: Array<(string)>;
        /**
         * Filters field "label" to be null/nil.
         */
        'label.null'?: boolean;
        /**
         * Filters field "label" to start with the provided value.
         */
        'label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'label.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'size.lt'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubAssetSortableFields;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
    };
};

export type ListGithubReleaseAssetsResponse = (GithubReleaseAssetList);

export type ListGithubReleaseAssetsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubReleaseRepositoryData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRelease to act upon.
         */
        githubreleaseID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubReleaseRepositoryResponse = (GithubRepositoryRead);

export type GetGithubReleaseRepositoryError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubRepositoriesData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'fullName.suffix'?: string;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'isTemplate.eq'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'ownerLogin.suffix'?: string;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubRepositorySortableFields;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
    };
};

export type ListGithubRepositoriesResponse = (GithubRepositoryList);

export type ListGithubRepositoriesError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubRepositoryData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetGithubRepositoryResponse = (GithubRepositoryRead);

export type GetGithubRepositoryError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubRepositoryLabelsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
    };
};

export type ListGithubRepositoryLabelsResponse = (GithubRepositoryLabelList);

export type ListGithubRepositoryLabelsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type ListGithubRepositoryReleasesData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the GithubRepository to act upon.
         */
        githubrepositoryID: number;
    };
    query?: {
        /**
         * Filters field "asset_id" to be equal to the provided value.
         */
        'asset.assetID.eq'?: number;
        /**
         * Filters field "asset_id" to be not equal to the provided value.
         */
        'asset.assetID.neq'?: number;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'asset.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'asset.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'asset.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'asset.createdAt.neq'?: string;
        /**
         * Filters field "download_count" to be greater than the provided value.
         */
        'asset.downloadCount.gt'?: number;
        /**
         * Filters field "download_count" to be less than the provided value.
         */
        'asset.downloadCount.lt'?: number;
        /**
         * Filters field "label" to be equal to the provided value.
         */
        'asset.label.eq'?: string;
        /**
         * Filters field "label" to contain the provided value.
         */
        'asset.label.has'?: string;
        /**
         * Filters field "label" to be equal to the provided value, case-insensitive.
         */
        'asset.label.ieq'?: string;
        /**
         * Filters field "label" to contain the provided value, case-insensitive.
         */
        'asset.label.ihas'?: string;
        /**
         * Filters field "label" to be within the provided values.
         */
        'asset.label.in'?: Array<(string)>;
        /**
         * Filters field "label" to be not equal to the provided value.
         */
        'asset.label.neq'?: string;
        /**
         * Filters field "label" to be not within the provided values.
         */
        'asset.label.notIn'?: Array<(string)>;
        /**
         * Filters field "label" to be null/nil.
         */
        'asset.label.null'?: boolean;
        /**
         * Filters field "label" to start with the provided value.
         */
        'asset.label.prefix'?: string;
        /**
         * Filters field "label" to end with the provided value.
         */
        'asset.label.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'asset.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'asset.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'asset.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'asset.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'asset.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'asset.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'asset.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'asset.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'asset.name.suffix'?: string;
        /**
         * Filters field "size" to be greater than the provided value.
         */
        'asset.size.gt'?: number;
        /**
         * Filters field "size" to be less than the provided value.
         */
        'asset.size.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'asset.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'asset.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'asset.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'asset.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'asset.updatedAt.null'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'draft.eq'?: boolean;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a asset edge.
         */
        'has.asset'?: boolean;
        /**
         * If true, only return entities that have a repository edge.
         */
        'has.repository'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'prerelease.eq'?: boolean;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'releaseID.neq'?: number;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'repository.archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'repository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'repository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'repository.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'repository.createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'repository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'repository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'repository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'repository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'repository.defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'repository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'repository.defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'repository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'repository.defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'repository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'repository.description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'repository.description.null'?: boolean;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'repository.fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'repository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'repository.fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'repository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'repository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'repository.fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'repository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'repository.fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'repository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'repository.fullName.suffix'?: string;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'repository.hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'repository.isTemplate.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'repository.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'repository.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'repository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'repository.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'repository.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'repository.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'repository.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'repository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'repository.name.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'repository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'repository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'repository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'repository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'repository.ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'repository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'repository.ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'repository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'repository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'repository.public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'repository.pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'repository.pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repository.repoID.neq'?: number;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'repository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'repository.starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'repository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'repository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'repository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'repository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'repository.updatedAt.null'?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubReleaseSortableFields;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'targetCommitish.suffix'?: string;
    };
};

export type ListGithubRepositoryReleasesResponse = (GithubReleaseList);

export type ListGithubRepositoryReleasesError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubUserData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetGithubUserResponse = (GithubUser);

export type GetGithubUserError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListLabelsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
    };
};

export type ListLabelsResponse = (LabelList);

export type ListLabelsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type CreateLabelData = {
    body: LabelCreate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type CreateLabelResponse = (Label);

export type CreateLabelError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorConflict | ErrorTooManyRequests | ErrorInternalServerError);

export type GetLabelsCountData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetLabelsCountResponse = (LabelCountList);

export type GetLabelsCountError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetLabelData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetLabelResponse = (Label);

export type GetLabelError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type DeleteLabelData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type DeleteLabelResponse = (string);

export type DeleteLabelError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type UpdateLabelData = {
    body: LabelUpdate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type UpdateLabelResponse = (Label);

export type UpdateLabelError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorConflict | ErrorTooManyRequests | ErrorInternalServerError);

export type ListLabelGithubRepositoriesData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'description.null'?: boolean;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'fullName.suffix'?: string;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * If true, only return entities that have a release edge.
         */
        'has.release'?: boolean;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'isTemplate.eq'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'ownerLogin.suffix'?: string;
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'release.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'release.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'release.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'release.createdAt.neq'?: string;
        /**
         * Filters field "draft" to be equal to the provided value.
         */
        'release.draft.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'release.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'release.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'release.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'release.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'release.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'release.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'release.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'release.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'release.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'release.name.suffix'?: string;
        /**
         * Filters field "prerelease" to be equal to the provided value.
         */
        'release.prerelease.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'release.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'release.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'release.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'release.publishedAt.neq'?: string;
        /**
         * Filters field "release_id" to be equal to the provided value.
         */
        'release.releaseID.eq'?: number;
        /**
         * Filters field "release_id" to be not equal to the provided value.
         */
        'release.releaseID.neq'?: number;
        /**
         * Filters field "tag_name" to be equal to the provided value.
         */
        'release.tagName.eq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value.
         */
        'release.tagName.has'?: string;
        /**
         * Filters field "tag_name" to be equal to the provided value, case-insensitive.
         */
        'release.tagName.ieq'?: string;
        /**
         * Filters field "tag_name" to contain the provided value, case-insensitive.
         */
        'release.tagName.ihas'?: string;
        /**
         * Filters field "tag_name" to be within the provided values.
         */
        'release.tagName.in'?: Array<(string)>;
        /**
         * Filters field "tag_name" to be not equal to the provided value.
         */
        'release.tagName.neq'?: string;
        /**
         * Filters field "tag_name" to be not within the provided values.
         */
        'release.tagName.notIn'?: Array<(string)>;
        /**
         * Filters field "tag_name" to start with the provided value.
         */
        'release.tagName.prefix'?: string;
        /**
         * Filters field "tag_name" to end with the provided value.
         */
        'release.tagName.suffix'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value.
         */
        'release.targetCommitish.eq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value.
         */
        'release.targetCommitish.has'?: string;
        /**
         * Filters field "target_commitish" to be equal to the provided value, case-insensitive.
         */
        'release.targetCommitish.ieq'?: string;
        /**
         * Filters field "target_commitish" to contain the provided value, case-insensitive.
         */
        'release.targetCommitish.ihas'?: string;
        /**
         * Filters field "target_commitish" to be within the provided values.
         */
        'release.targetCommitish.in'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to be not equal to the provided value.
         */
        'release.targetCommitish.neq'?: string;
        /**
         * Filters field "target_commitish" to be not within the provided values.
         */
        'release.targetCommitish.notIn'?: Array<(string)>;
        /**
         * Filters field "target_commitish" to start with the provided value.
         */
        'release.targetCommitish.prefix'?: string;
        /**
         * Filters field "target_commitish" to end with the provided value.
         */
        'release.targetCommitish.suffix'?: string;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'repoID.neq'?: number;
        /**
         * Sort entity results by the given field.
         */
        sort?: GithubRepositorySortableFields;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'updatedAt.null'?: boolean;
    };
};

export type ListLabelGithubRepositoriesResponse = (GithubRepositoryList);

export type ListLabelGithubRepositoriesError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type ListLabelPostsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Label to act upon.
         */
        labelID: number;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<(string)>;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<(string)>;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<(string)>;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<(string)>;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<(string)>;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<(string)>;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<(number)>;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<(number)>;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
    };
};

export type ListLabelPostsResponse = (PostList);

export type ListLabelPostsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetOpenApiData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetOpenApiResponse = ({
    [key: string]: unknown;
});

export type GetOpenApiError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListPostsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<(string)>;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<(string)>;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<(string)>;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<(string)>;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<(string)>;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<(string)>;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<(number)>;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<(number)>;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
    };
};

export type ListPostsResponse = (PostList);

export type ListPostsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type CreatePostData = {
    body: PostCreate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type CreatePostResponse = (PostRead);

export type CreatePostError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorConflict | ErrorTooManyRequests | ErrorInternalServerError);

export type RegeneratePostsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type RegeneratePostsResponse = (string);

export type RegeneratePostsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetPostData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetPostResponse = (PostRead);

export type GetPostError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type DeletePostData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type DeletePostResponse = (string);

export type DeletePostError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type UpdatePostData = {
    body: PostUpdate;
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type UpdatePostResponse = (PostRead);

export type UpdatePostError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorConflict | ErrorTooManyRequests | ErrorInternalServerError);

export type GetPostAuthorData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetPostAuthorResponse = (User);

export type GetPostAuthorError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListPostLabelsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the Post to act upon.
         */
        postID: number;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "archived" to be equal to the provided value.
         */
        'githubRepository.archived.eq'?: boolean;
        /**
         * Filters field "created_at" to be equal to the provided value.
         */
        'githubRepository.createdAt.eq'?: string;
        /**
         * Filters field "created_at" to be greater than the provided value.
         */
        'githubRepository.createdAt.gt'?: number;
        /**
         * Filters field "created_at" to be less than the provided value.
         */
        'githubRepository.createdAt.lt'?: number;
        /**
         * Filters field "created_at" to be not equal to the provided value.
         */
        'githubRepository.createdAt.neq'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value.
         */
        'githubRepository.defaultBranch.eq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value.
         */
        'githubRepository.defaultBranch.has'?: string;
        /**
         * Filters field "default_branch" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ieq'?: string;
        /**
         * Filters field "default_branch" to contain the provided value, case-insensitive.
         */
        'githubRepository.defaultBranch.ihas'?: string;
        /**
         * Filters field "default_branch" to be within the provided values.
         */
        'githubRepository.defaultBranch.in'?: Array<(string)>;
        /**
         * Filters field "default_branch" to be not equal to the provided value.
         */
        'githubRepository.defaultBranch.neq'?: string;
        /**
         * Filters field "default_branch" to be not within the provided values.
         */
        'githubRepository.defaultBranch.notIn'?: Array<(string)>;
        /**
         * Filters field "default_branch" to start with the provided value.
         */
        'githubRepository.defaultBranch.prefix'?: string;
        /**
         * Filters field "default_branch" to end with the provided value.
         */
        'githubRepository.defaultBranch.suffix'?: string;
        /**
         * Filters field "description" to contain the provided value.
         */
        'githubRepository.description.has'?: string;
        /**
         * Filters field "description" to contain the provided value, case-insensitive.
         */
        'githubRepository.description.ihas'?: string;
        /**
         * Filters field "description" to be null/nil.
         */
        'githubRepository.description.null'?: boolean;
        /**
         * Filters field "fork" to be equal to the provided value.
         */
        'githubRepository.fork.eq'?: boolean;
        /**
         * Filters field "full_name" to be equal to the provided value.
         */
        'githubRepository.fullName.eq'?: string;
        /**
         * Filters field "full_name" to contain the provided value.
         */
        'githubRepository.fullName.has'?: string;
        /**
         * Filters field "full_name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.fullName.ieq'?: string;
        /**
         * Filters field "full_name" to contain the provided value, case-insensitive.
         */
        'githubRepository.fullName.ihas'?: string;
        /**
         * Filters field "full_name" to be within the provided values.
         */
        'githubRepository.fullName.in'?: Array<(string)>;
        /**
         * Filters field "full_name" to be not equal to the provided value.
         */
        'githubRepository.fullName.neq'?: string;
        /**
         * Filters field "full_name" to be not within the provided values.
         */
        'githubRepository.fullName.notIn'?: Array<(string)>;
        /**
         * Filters field "full_name" to start with the provided value.
         */
        'githubRepository.fullName.prefix'?: string;
        /**
         * Filters field "full_name" to end with the provided value.
         */
        'githubRepository.fullName.suffix'?: string;
        /**
         * Filters field "has_issues" to be equal to the provided value.
         */
        'githubRepository.hasIssues.eq'?: boolean;
        /**
         * Filters field "is_template" to be equal to the provided value.
         */
        'githubRepository.isTemplate.eq'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'githubRepository.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'githubRepository.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'githubRepository.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'githubRepository.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'githubRepository.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'githubRepository.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'githubRepository.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'githubRepository.name.suffix'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value.
         */
        'githubRepository.ownerLogin.eq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value.
         */
        'githubRepository.ownerLogin.has'?: string;
        /**
         * Filters field "owner_login" to be equal to the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ieq'?: string;
        /**
         * Filters field "owner_login" to contain the provided value, case-insensitive.
         */
        'githubRepository.ownerLogin.ihas'?: string;
        /**
         * Filters field "owner_login" to be within the provided values.
         */
        'githubRepository.ownerLogin.in'?: Array<(string)>;
        /**
         * Filters field "owner_login" to be not equal to the provided value.
         */
        'githubRepository.ownerLogin.neq'?: string;
        /**
         * Filters field "owner_login" to be not within the provided values.
         */
        'githubRepository.ownerLogin.notIn'?: Array<(string)>;
        /**
         * Filters field "owner_login" to start with the provided value.
         */
        'githubRepository.ownerLogin.prefix'?: string;
        /**
         * Filters field "owner_login" to end with the provided value.
         */
        'githubRepository.ownerLogin.suffix'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'githubRepository.public.eq'?: boolean;
        /**
         * Filters field "pushed_at" to be within the provided values.
         */
        'githubRepository.pushedAt.in'?: Array<(string)>;
        /**
         * Filters field "pushed_at" to be not within the provided values.
         */
        'githubRepository.pushedAt.notIn'?: Array<(string)>;
        /**
         * Filters field "repo_id" to be equal to the provided value.
         */
        'githubRepository.repoID.eq'?: number;
        /**
         * Filters field "repo_id" to be not equal to the provided value.
         */
        'githubRepository.repoID.neq'?: number;
        /**
         * Filters field "star_count" to be greater than the provided value.
         */
        'githubRepository.starCount.gt'?: number;
        /**
         * Filters field "star_count" to be less than the provided value.
         */
        'githubRepository.starCount.lt'?: number;
        /**
         * Filters field "updated_at" to be equal to the provided value.
         */
        'githubRepository.updatedAt.eq'?: string;
        /**
         * Filters field "updated_at" to be greater than the provided value.
         */
        'githubRepository.updatedAt.gt'?: number;
        /**
         * Filters field "updated_at" to be less than the provided value.
         */
        'githubRepository.updatedAt.lt'?: number;
        /**
         * Filters field "updated_at" to be not equal to the provided value.
         */
        'githubRepository.updatedAt.neq'?: string;
        /**
         * Filters field "updated_at" to be null/nil.
         */
        'githubRepository.updatedAt.null'?: boolean;
        /**
         * If true, only return entities that have a github_repository edge.
         */
        'has.githubRepository'?: boolean;
        /**
         * If true, only return entities that have a post edge.
         */
        'has.post'?: boolean;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * Filters field "content" to contain the provided value.
         */
        'post.content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'post.content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'post.contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'post.contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'post.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'post.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'post.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'post.createTime.neq'?: string;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'post.public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'post.publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'post.publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'post.publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'post.publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'post.slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'post.slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'post.slug.neq'?: string;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'post.title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'post.title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'post.title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'post.title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'post.title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'post.title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'post.title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'post.title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'post.title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'post.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'post.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'post.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'post.updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'post.viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'post.viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'post.viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'post.viewCount.neq'?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: LabelSortableFields;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
    };
};

export type ListPostLabelsResponse = (PostLabelList);

export type ListPostLabelsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetSelfData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetSelfResponse = (User);

export type GetSelfError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetCodingStatsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetCodingStatsResponse = (CodingStats);

export type GetCodingStatsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type GetGithubStatsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetGithubStatsResponse = (GithubStats);

export type GetGithubStatsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListUsersData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'email.eq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'email.has'?: string;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'email.ihas'?: string;
        /**
         * Filters field "email" to be within the provided values.
         */
        'email.in'?: Array<(string)>;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'email.neq'?: string;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'email.notIn'?: Array<(string)>;
        /**
         * Filters field "email" to be null/nil.
         */
        'email.null'?: boolean;
        /**
         * Filters field "email" to start with the provided value.
         */
        'email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'email.suffix'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'location.eq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'location.has'?: string;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'location.ihas'?: string;
        /**
         * Filters field "location" to be within the provided values.
         */
        'location.in'?: Array<(string)>;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'location.neq'?: string;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'location.notIn'?: Array<(string)>;
        /**
         * Filters field "location" to be null/nil.
         */
        'location.null'?: boolean;
        /**
         * Filters field "location" to start with the provided value.
         */
        'location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'location.suffix'?: string;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'login.eq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'login.has'?: string;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'login.ihas'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'login.in'?: Array<(string)>;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'login.neq'?: string;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'login.notIn'?: Array<(string)>;
        /**
         * Filters field "login" to start with the provided value.
         */
        'login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'name.suffix'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Sort entity results by the given field.
         */
        sort?: UserSortableFields;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'userID.eq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'userID.in'?: Array<(number)>;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'userID.neq'?: number;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'userID.notIn'?: Array<(number)>;
    };
};

export type ListUsersResponse = (UserList);

export type ListUsersError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetUserData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the User to act upon.
         */
        userID: number;
    };
    query?: {
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
    };
};

export type GetUserResponse = (User);

export type GetUserError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);

export type ListUserPostsData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
    path: {
        /**
         * The ID of the User to act upon.
         */
        userID: number;
    };
    query?: {
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'author.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'author.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'author.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'author.createTime.neq'?: string;
        /**
         * Filters field "email" to be equal to the provided value.
         */
        'author.email.eq'?: string;
        /**
         * Filters field "email" to contain the provided value.
         */
        'author.email.has'?: string;
        /**
         * Filters field "email" to be equal to the provided value, case-insensitive.
         */
        'author.email.ieq'?: string;
        /**
         * Filters field "email" to contain the provided value, case-insensitive.
         */
        'author.email.ihas'?: string;
        /**
         * Filters field "email" to be within the provided values.
         */
        'author.email.in'?: Array<(string)>;
        /**
         * Filters field "email" to be not equal to the provided value.
         */
        'author.email.neq'?: string;
        /**
         * Filters field "email" to be not within the provided values.
         */
        'author.email.notIn'?: Array<(string)>;
        /**
         * Filters field "email" to be null/nil.
         */
        'author.email.null'?: boolean;
        /**
         * Filters field "email" to start with the provided value.
         */
        'author.email.prefix'?: string;
        /**
         * Filters field "email" to end with the provided value.
         */
        'author.email.suffix'?: string;
        /**
         * Filters field "location" to be equal to the provided value.
         */
        'author.location.eq'?: string;
        /**
         * Filters field "location" to contain the provided value.
         */
        'author.location.has'?: string;
        /**
         * Filters field "location" to be equal to the provided value, case-insensitive.
         */
        'author.location.ieq'?: string;
        /**
         * Filters field "location" to contain the provided value, case-insensitive.
         */
        'author.location.ihas'?: string;
        /**
         * Filters field "location" to be within the provided values.
         */
        'author.location.in'?: Array<(string)>;
        /**
         * Filters field "location" to be not equal to the provided value.
         */
        'author.location.neq'?: string;
        /**
         * Filters field "location" to be not within the provided values.
         */
        'author.location.notIn'?: Array<(string)>;
        /**
         * Filters field "location" to be null/nil.
         */
        'author.location.null'?: boolean;
        /**
         * Filters field "location" to start with the provided value.
         */
        'author.location.prefix'?: string;
        /**
         * Filters field "location" to end with the provided value.
         */
        'author.location.suffix'?: string;
        /**
         * Filters field "login" to be equal to the provided value.
         */
        'author.login.eq'?: string;
        /**
         * Filters field "login" to contain the provided value.
         */
        'author.login.has'?: string;
        /**
         * Filters field "login" to be equal to the provided value, case-insensitive.
         */
        'author.login.ieq'?: string;
        /**
         * Filters field "login" to contain the provided value, case-insensitive.
         */
        'author.login.ihas'?: string;
        /**
         * Filters field "login" to be within the provided values.
         */
        'author.login.in'?: Array<(string)>;
        /**
         * Filters field "login" to be not equal to the provided value.
         */
        'author.login.neq'?: string;
        /**
         * Filters field "login" to be not within the provided values.
         */
        'author.login.notIn'?: Array<(string)>;
        /**
         * Filters field "login" to start with the provided value.
         */
        'author.login.prefix'?: string;
        /**
         * Filters field "login" to end with the provided value.
         */
        'author.login.suffix'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'author.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'author.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'author.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'author.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'author.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'author.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'author.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to be null/nil.
         */
        'author.name.null'?: boolean;
        /**
         * Filters field "name" to start with the provided value.
         */
        'author.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'author.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'author.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'author.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'author.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'author.updateTime.neq'?: string;
        /**
         * Filters field "user_id" to be equal to the provided value.
         */
        'author.userID.eq'?: number;
        /**
         * Filters field "user_id" to be within the provided values.
         */
        'author.userID.in'?: Array<(number)>;
        /**
         * Filters field "user_id" to be not equal to the provided value.
         */
        'author.userID.neq'?: number;
        /**
         * Filters field "user_id" to be not within the provided values.
         */
        'author.userID.notIn'?: Array<(number)>;
        /**
         * Filters field "content" to contain the provided value.
         */
        'content.has'?: string;
        /**
         * Filters field "content" to contain the provided value, case-insensitive.
         */
        'content.ihas'?: string;
        /**
         * Filters field "content_html" to contain the provided value.
         */
        'contentHTML.has'?: string;
        /**
         * Filters field "content_html" to contain the provided value, case-insensitive.
         */
        'contentHTML.ihas'?: string;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'createTime.neq'?: string;
        /**
         * Filter operation to use.
         */
        filter_op?: FilterOperation;
        /**
         * If true, only return entities that have a author edge.
         */
        'has.author'?: boolean;
        /**
         * If true, only return entities that have a label edge.
         */
        'has.label'?: boolean;
        /**
         * Filters field "create_time" to be equal to the provided value.
         */
        'label.createTime.eq'?: string;
        /**
         * Filters field "create_time" to be greater than the provided value.
         */
        'label.createTime.gt'?: number;
        /**
         * Filters field "create_time" to be less than the provided value.
         */
        'label.createTime.lt'?: number;
        /**
         * Filters field "create_time" to be not equal to the provided value.
         */
        'label.createTime.neq'?: string;
        /**
         * Filters field "name" to be equal to the provided value.
         */
        'label.name.eq'?: string;
        /**
         * Filters field "name" to contain the provided value.
         */
        'label.name.has'?: string;
        /**
         * Filters field "name" to be equal to the provided value, case-insensitive.
         */
        'label.name.ieq'?: string;
        /**
         * Filters field "name" to contain the provided value, case-insensitive.
         */
        'label.name.ihas'?: string;
        /**
         * Filters field "name" to be within the provided values.
         */
        'label.name.in'?: Array<(string)>;
        /**
         * Filters field "name" to be not equal to the provided value.
         */
        'label.name.neq'?: string;
        /**
         * Filters field "name" to be not within the provided values.
         */
        'label.name.notIn'?: Array<(string)>;
        /**
         * Filters field "name" to start with the provided value.
         */
        'label.name.prefix'?: string;
        /**
         * Filters field "name" to end with the provided value.
         */
        'label.name.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'label.updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'label.updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'label.updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'label.updateTime.neq'?: string;
        /**
         * Order the results in ascending or descending order.
         */
        order?: 'asc' | 'desc';
        /**
         * The page number to retrieve.
         */
        page?: number;
        /**
         * The number of entities to retrieve per page.
         */
        per_page?: number;
        /**
         * If set to true, any JSON response will be indented. Not recommended for best performance.
         */
        pretty?: boolean;
        /**
         * Filters field "public" to be equal to the provided value.
         */
        'public.eq'?: boolean;
        /**
         * Filters field "published_at" to be equal to the provided value.
         */
        'publishedAt.eq'?: string;
        /**
         * Filters field "published_at" to be greater than the provided value.
         */
        'publishedAt.gt'?: number;
        /**
         * Filters field "published_at" to be less than the provided value.
         */
        'publishedAt.lt'?: number;
        /**
         * Filters field "published_at" to be not equal to the provided value.
         */
        'publishedAt.neq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value.
         */
        'slug.eq'?: string;
        /**
         * Filters field "slug" to be equal to the provided value, case-insensitive.
         */
        'slug.ieq'?: string;
        /**
         * Filters field "slug" to be not equal to the provided value.
         */
        'slug.neq'?: string;
        /**
         * Sort entity results by the given field.
         */
        sort?: PostSortableFields;
        /**
         * Filters field "title" to be equal to the provided value.
         */
        'title.eq'?: string;
        /**
         * Filters field "title" to contain the provided value.
         */
        'title.has'?: string;
        /**
         * Filters field "title" to be equal to the provided value, case-insensitive.
         */
        'title.ieq'?: string;
        /**
         * Filters field "title" to contain the provided value, case-insensitive.
         */
        'title.ihas'?: string;
        /**
         * Filters field "title" to be within the provided values.
         */
        'title.in'?: Array<(string)>;
        /**
         * Filters field "title" to be not equal to the provided value.
         */
        'title.neq'?: string;
        /**
         * Filters field "title" to be not within the provided values.
         */
        'title.notIn'?: Array<(string)>;
        /**
         * Filters field "title" to start with the provided value.
         */
        'title.prefix'?: string;
        /**
         * Filters field "title" to end with the provided value.
         */
        'title.suffix'?: string;
        /**
         * Filters field "update_time" to be equal to the provided value.
         */
        'updateTime.eq'?: string;
        /**
         * Filters field "update_time" to be greater than the provided value.
         */
        'updateTime.gt'?: number;
        /**
         * Filters field "update_time" to be less than the provided value.
         */
        'updateTime.lt'?: number;
        /**
         * Filters field "update_time" to be not equal to the provided value.
         */
        'updateTime.neq'?: string;
        /**
         * Filters field "view_count" to be equal to the provided value.
         */
        'viewCount.eq'?: number;
        /**
         * Filters field "view_count" to be greater than the provided value.
         */
        'viewCount.gt'?: number;
        /**
         * Filters field "view_count" to be less than the provided value.
         */
        'viewCount.lt'?: number;
        /**
         * Filters field "view_count" to be not equal to the provided value.
         */
        'viewCount.neq'?: number;
    };
};

export type ListUserPostsResponse = (PostList);

export type ListUserPostsError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorTooManyRequests | ErrorInternalServerError);

export type GetServiceVersionData = {
    headers?: {
        /**
         * A unique identifier for the request.
         */
        'X-Request-Id'?: string;
    };
};

export type GetServiceVersionResponse = (VersionInfo);

export type GetServiceVersionError = (ErrorBadRequest | ErrorUnauthorized | ErrorForbidden | ErrorNotFound | ErrorTooManyRequests | ErrorInternalServerError);