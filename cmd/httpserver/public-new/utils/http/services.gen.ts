// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetGithubSvgData, GetGithubSvgError, GetGithubSvgResponse, GetGithubRepoSvgData, GetGithubRepoSvgError, GetGithubRepoSvgResponse, ListGithubAssetsData, ListGithubAssetsError, ListGithubAssetsResponse, GetGithubAssetData, GetGithubAssetError, GetGithubAssetResponse, GetGithubAssetReleaseData, GetGithubAssetReleaseError, GetGithubAssetReleaseResponse, ListGithubEventsData, ListGithubEventsError, ListGithubEventsResponse, GetGithubEventData, GetGithubEventError, GetGithubEventResponse, ListGithubGistsData, ListGithubGistsError, ListGithubGistsResponse, GetGithubGistData, GetGithubGistError, GetGithubGistResponse, ListGithubReleasesData, ListGithubReleasesError, ListGithubReleasesResponse, ListOutdatedGithubReleasesData, ListOutdatedGithubReleasesError, ListOutdatedGithubReleasesResponse, GetGithubReleaseData, GetGithubReleaseError, GetGithubReleaseResponse, ListGithubReleaseAssetsData, ListGithubReleaseAssetsError, ListGithubReleaseAssetsResponse, GetGithubReleaseRepositoryData, GetGithubReleaseRepositoryError, GetGithubReleaseRepositoryResponse, ListGithubRepositoriesData, ListGithubRepositoriesError, ListGithubRepositoriesResponse, GetGithubRepositoryData, GetGithubRepositoryError, GetGithubRepositoryResponse, ListGithubRepositoryLabelsData, ListGithubRepositoryLabelsError, ListGithubRepositoryLabelsResponse, ListGithubRepositoryReleasesData, ListGithubRepositoryReleasesError, ListGithubRepositoryReleasesResponse, GetGithubUserData, GetGithubUserError, GetGithubUserResponse, ListLabelsData, ListLabelsError, ListLabelsResponse, CreateLabelData, CreateLabelError, CreateLabelResponse, GetLabelsCountData, GetLabelsCountError, GetLabelsCountResponse, GetLabelData, GetLabelError, GetLabelResponse, DeleteLabelData, DeleteLabelError, DeleteLabelResponse, UpdateLabelData, UpdateLabelError, UpdateLabelResponse, ListLabelGithubRepositoriesData, ListLabelGithubRepositoriesError, ListLabelGithubRepositoriesResponse, ListLabelPostsData, ListLabelPostsError, ListLabelPostsResponse, GetOpenApiData, GetOpenApiError, GetOpenApiResponse, ListPostsData, ListPostsError, ListPostsResponse, CreatePostData, CreatePostError, CreatePostResponse, RegeneratePostsData, RegeneratePostsError, RegeneratePostsResponse, GetPostData, GetPostError, GetPostResponse, DeletePostData, DeletePostError, DeletePostResponse, UpdatePostData, UpdatePostError, UpdatePostResponse, GetPostAuthorData, GetPostAuthorError, GetPostAuthorResponse, ListPostLabelsData, ListPostLabelsError, ListPostLabelsResponse, GetSelfData, GetSelfError, GetSelfResponse, GetCodingStatsData, GetCodingStatsError, GetCodingStatsResponse, GetGithubStatsData, GetGithubStatsError, GetGithubStatsResponse, ListUsersData, ListUsersError, ListUsersResponse, GetUserData, GetUserError, GetUserResponse, ListUserPostsData, ListUserPostsError, ListUserPostsResponse, GetServiceVersionData, GetServiceVersionError, GetServiceVersionResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Dynamic SVG generator based off title/description parameters.
 * Dynamic SVG generator based off title/description parameters.
 */
export const getGithubSvg = <ThrowOnError extends boolean = false>(options: Options<GetGithubSvgData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubSvgResponse, GetGithubSvgError, ThrowOnError>({
    ...options,
    url: '/gh/svg'
}); };

/**
 * Dynamic SVG generator based off repo.
 * Dynamic SVG generator based off repo.
 */
export const getGithubRepoSvg = <ThrowOnError extends boolean = false>(options: Options<GetGithubRepoSvgData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubRepoSvgResponse, GetGithubRepoSvgError, ThrowOnError>({
    ...options,
    url: '/gh/svg/{ownerID}/{repoID}'
}); };

/**
 * List githubassets
 * List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubAssets = <ThrowOnError extends boolean = false>(options?: Options<ListGithubAssetsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubAssetsResponse, ListGithubAssetsError, ThrowOnError>({
    ...options,
    url: '/github-assets'
}); };

/**
 * Retrieve a githubasset
 * Retrieve a single GithubAsset entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAsset = <ThrowOnError extends boolean = false>(options: Options<GetGithubAssetData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubAssetResponse, GetGithubAssetError, ThrowOnError>({
    ...options,
    url: '/github-assets/{githubassetID}'
}); };

/**
 * Get a githubassets associated release
 * Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubAssetRelease = <ThrowOnError extends boolean = false>(options: Options<GetGithubAssetReleaseData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubAssetReleaseResponse, GetGithubAssetReleaseError, ThrowOnError>({
    ...options,
    url: '/github-assets/{githubassetID}/release'
}); };

/**
 * List githubevents
 * List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubEvents = <ThrowOnError extends boolean = false>(options?: Options<ListGithubEventsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubEventsResponse, ListGithubEventsError, ThrowOnError>({
    ...options,
    url: '/github-events'
}); };

/**
 * Retrieve a githubevent
 * Retrieve a single GithubEvent entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubEvent = <ThrowOnError extends boolean = false>(options: Options<GetGithubEventData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubEventResponse, GetGithubEventError, ThrowOnError>({
    ...options,
    url: '/github-events/{githubeventID}'
}); };

/**
 * List githubgists
 * List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubGists = <ThrowOnError extends boolean = false>(options?: Options<ListGithubGistsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubGistsResponse, ListGithubGistsError, ThrowOnError>({
    ...options,
    url: '/github-gists'
}); };

/**
 * Retrieve a githubgist
 * Retrieve a single GithubGist entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubGist = <ThrowOnError extends boolean = false>(options: Options<GetGithubGistData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubGistResponse, GetGithubGistError, ThrowOnError>({
    ...options,
    url: '/github-gists/{githubgistID}'
}); };

/**
 * List githubreleases
 * List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleases = <ThrowOnError extends boolean = false>(options?: Options<ListGithubReleasesData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubReleasesResponse, ListGithubReleasesError, ThrowOnError>({
    ...options,
    url: '/github-releases'
}); };

/**
 * Get outdated Github releases
 * List github repositories which have potentially outdated releases.
 */
export const listOutdatedGithubReleases = <ThrowOnError extends boolean = false>(options?: Options<ListOutdatedGithubReleasesData, ThrowOnError>) => { return (options?.client ?? client).get<ListOutdatedGithubReleasesResponse, ListOutdatedGithubReleasesError, ThrowOnError>({
    ...options,
    url: '/github-releases/outdated'
}); };

/**
 * Retrieve a githubrelease
 * Retrieve a single GithubRelease entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRelease = <ThrowOnError extends boolean = false>(options: Options<GetGithubReleaseData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubReleaseResponse, GetGithubReleaseError, ThrowOnError>({
    ...options,
    url: '/github-releases/{githubreleaseID}'
}); };

/**
 * List a githubreleases associated assets
 * List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubReleaseAssets = <ThrowOnError extends boolean = false>(options: Options<ListGithubReleaseAssetsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubReleaseAssetsResponse, ListGithubReleaseAssetsError, ThrowOnError>({
    ...options,
    url: '/github-releases/{githubreleaseID}/assets'
}); };

/**
 * Get a githubreleases associated repository
 * Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubReleaseRepository = <ThrowOnError extends boolean = false>(options: Options<GetGithubReleaseRepositoryData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubReleaseRepositoryResponse, GetGithubReleaseRepositoryError, ThrowOnError>({
    ...options,
    url: '/github-releases/{githubreleaseID}/repository'
}); };

/**
 * List githubrepositories
 * List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositories = <ThrowOnError extends boolean = false>(options?: Options<ListGithubRepositoriesData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubRepositoriesResponse, ListGithubRepositoriesError, ThrowOnError>({
    ...options,
    url: '/github-repositories'
}); };

/**
 * Retrieve a githubrepository
 * Retrieve a single GithubRepository entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getGithubRepository = <ThrowOnError extends boolean = false>(options: Options<GetGithubRepositoryData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubRepositoryResponse, GetGithubRepositoryError, ThrowOnError>({
    ...options,
    url: '/github-repositories/{githubrepositoryID}'
}); };

/**
 * List a githubrepositories associated labels
 * List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryLabels = <ThrowOnError extends boolean = false>(options: Options<ListGithubRepositoryLabelsData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubRepositoryLabelsResponse, ListGithubRepositoryLabelsError, ThrowOnError>({
    ...options,
    url: '/github-repositories/{githubrepositoryID}/labels'
}); };

/**
 * List a githubrepositories associated releases
 * List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listGithubRepositoryReleases = <ThrowOnError extends boolean = false>(options: Options<ListGithubRepositoryReleasesData, ThrowOnError>) => { return (options?.client ?? client).get<ListGithubRepositoryReleasesResponse, ListGithubRepositoryReleasesError, ThrowOnError>({
    ...options,
    url: '/github-repositories/{githubrepositoryID}/releases'
}); };

/**
 * Get GitHub user
 * Get the GitHub user.
 */
export const getGithubUser = <ThrowOnError extends boolean = false>(options?: Options<GetGithubUserData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubUserResponse, GetGithubUserError, ThrowOnError>({
    ...options,
    url: '/github-user'
}); };

/**
 * List labels
 * List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabels = <ThrowOnError extends boolean = false>(options?: Options<ListLabelsData, ThrowOnError>) => { return (options?.client ?? client).get<ListLabelsResponse, ListLabelsError, ThrowOnError>({
    ...options,
    url: '/labels'
}); };

/**
 * Create a new label
 * Create a new Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createLabel = <ThrowOnError extends boolean = false>(options: Options<CreateLabelData, ThrowOnError>) => { return (options?.client ?? client).post<CreateLabelResponse, CreateLabelError, ThrowOnError>({
    ...options,
    url: '/labels'
}); };

/**
 * Get labels count
 * Get the edge count for labels.
 */
export const getLabelsCount = <ThrowOnError extends boolean = false>(options?: Options<GetLabelsCountData, ThrowOnError>) => { return (options?.client ?? client).get<GetLabelsCountResponse, GetLabelsCountError, ThrowOnError>({
    ...options,
    url: '/labels/count'
}); };

/**
 * Retrieve a label
 * Retrieve a single Label entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getLabel = <ThrowOnError extends boolean = false>(options: Options<GetLabelData, ThrowOnError>) => { return (options?.client ?? client).get<GetLabelResponse, GetLabelError, ThrowOnError>({
    ...options,
    url: '/labels/{labelID}'
}); };

/**
 * Delete a label
 * Delete a single Label entity by its ID.
 */
export const deleteLabel = <ThrowOnError extends boolean = false>(options: Options<DeleteLabelData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteLabelResponse, DeleteLabelError, ThrowOnError>({
    ...options,
    url: '/labels/{labelID}'
}); };

/**
 * Update a label
 * Update an existing Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updateLabel = <ThrowOnError extends boolean = false>(options: Options<UpdateLabelData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateLabelResponse, UpdateLabelError, ThrowOnError>({
    ...options,
    url: '/labels/{labelID}'
}); };

/**
 * List a labels associated githubRepositories
 * List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelGithubRepositories = <ThrowOnError extends boolean = false>(options: Options<ListLabelGithubRepositoriesData, ThrowOnError>) => { return (options?.client ?? client).get<ListLabelGithubRepositoriesResponse, ListLabelGithubRepositoriesError, ThrowOnError>({
    ...options,
    url: '/labels/{labelID}/github-repositories'
}); };

/**
 * List a labels associated posts
 * List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listLabelPosts = <ThrowOnError extends boolean = false>(options: Options<ListLabelPostsData, ThrowOnError>) => { return (options?.client ?? client).get<ListLabelPostsResponse, ListLabelPostsError, ThrowOnError>({
    ...options,
    url: '/labels/{labelID}/posts'
}); };

/**
 * Get OpenAPI spec
 * Get the OpenAPI specification for this service.
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => { return (options?.client ?? client).get<GetOpenApiResponse, GetOpenApiError, ThrowOnError>({
    ...options,
    url: '/openapi.json'
}); };

/**
 * List posts
 * List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPosts = <ThrowOnError extends boolean = false>(options?: Options<ListPostsData, ThrowOnError>) => { return (options?.client ?? client).get<ListPostsResponse, ListPostsError, ThrowOnError>({
    ...options,
    url: '/posts'
}); };

/**
 * Create a new post
 * Create a new Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => { return (options?.client ?? client).post<CreatePostResponse, CreatePostError, ThrowOnError>({
    ...options,
    url: '/posts'
}); };

/**
 * Regenerate posts.
 * Regenerate posts.
 */
export const regeneratePosts = <ThrowOnError extends boolean = false>(options?: Options<RegeneratePostsData, ThrowOnError>) => { return (options?.client ?? client).post<RegeneratePostsResponse, RegeneratePostsError, ThrowOnError>({
    ...options,
    url: '/posts/regenerate'
}); };

/**
 * Retrieve a post
 * Retrieve a single Post entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPost = <ThrowOnError extends boolean = false>(options: Options<GetPostData, ThrowOnError>) => { return (options?.client ?? client).get<GetPostResponse, GetPostError, ThrowOnError>({
    ...options,
    url: '/posts/{postID}'
}); };

/**
 * Delete a post
 * Delete a single Post entity by its ID.
 */
export const deletePost = <ThrowOnError extends boolean = false>(options: Options<DeletePostData, ThrowOnError>) => { return (options?.client ?? client).delete<DeletePostResponse, DeletePostError, ThrowOnError>({
    ...options,
    url: '/posts/{postID}'
}); };

/**
 * Update a post
 * Update an existing Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdatePostResponse, UpdatePostError, ThrowOnError>({
    ...options,
    url: '/posts/{postID}'
}); };

/**
 * Get a posts associated author
 * Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getPostAuthor = <ThrowOnError extends boolean = false>(options: Options<GetPostAuthorData, ThrowOnError>) => { return (options?.client ?? client).get<GetPostAuthorResponse, GetPostAuthorError, ThrowOnError>({
    ...options,
    url: '/posts/{postID}/author'
}); };

/**
 * List a posts associated labels
 * List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listPostLabels = <ThrowOnError extends boolean = false>(options: Options<ListPostLabelsData, ThrowOnError>) => { return (options?.client ?? client).get<ListPostLabelsResponse, ListPostLabelsError, ThrowOnError>({
    ...options,
    url: '/posts/{postID}/labels'
}); };

/**
 * Get authenticated user
 * Get the authenticated user.
 */
export const getSelf = <ThrowOnError extends boolean = false>(options?: Options<GetSelfData, ThrowOnError>) => { return (options?.client ?? client).get<GetSelfResponse, GetSelfError, ThrowOnError>({
    ...options,
    url: '/self'
}); };

/**
 * Get coding statistics
 * Get coding statistics.
 */
export const getCodingStats = <ThrowOnError extends boolean = false>(options?: Options<GetCodingStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetCodingStatsResponse, GetCodingStatsError, ThrowOnError>({
    ...options,
    url: '/stats/coding'
}); };

/**
 * Get github statistics
 * Get github statistics.
 */
export const getGithubStats = <ThrowOnError extends boolean = false>(options?: Options<GetGithubStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetGithubStatsResponse, GetGithubStatsError, ThrowOnError>({
    ...options,
    url: '/stats/github'
}); };

/**
 * List users
 * List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => { return (options?.client ?? client).get<ListUsersResponse, ListUsersError, ThrowOnError>({
    ...options,
    url: '/users'
}); };

/**
 * Retrieve a user
 * Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/users/{userID}'
}); };

/**
 * List a users associated posts
 * List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -> edge, not entity -> edge -> edge -> etc).
 */
export const listUserPosts = <ThrowOnError extends boolean = false>(options: Options<ListUserPostsData, ThrowOnError>) => { return (options?.client ?? client).get<ListUserPostsResponse, ListUserPostsError, ThrowOnError>({
    ...options,
    url: '/users/{userID}/posts'
}); };

/**
 * Get service version
 * Get the version of the service.
 */
export const getServiceVersion = <ThrowOnError extends boolean = false>(options?: Options<GetServiceVersionData, ThrowOnError>) => { return (options?.client ?? client).get<GetServiceVersionResponse, GetServiceVersionError, ThrowOnError>({
    ...options,
    url: '/version'
}); };