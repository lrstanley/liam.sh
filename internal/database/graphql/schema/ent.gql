directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateLabelInput is used for create Label object.
Input was generated by ent.
"""
input CreateLabelInput {
  createTime: Time
  updateTime: Time
  name: String!
  postIDs: [ID!]
  githubRepositoryIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createTime: Time
  updateTime: Time
  slug: String!
  title: String!
  content: String!
  publishedAt: Time
  public: Boolean
  labelIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type GithubAsset implements Node {
  id: ID!
  assetID: Int!
  browserDownloadURL: String!
  name: String!
  label: String
  state: String
  contentType: String!
  size: Int!
  downloadCount: Int!
  createdAt: Time!
  updatedAt: Time
  uploader: GithubUser!
  release: GithubRelease!
}
"""A connection to a list of items."""
type GithubAssetConnection {
  """A list of edges."""
  edges: [GithubAssetEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubAssetEdge {
  """The item at the end of the edge."""
  node: GithubAsset
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubAsset connections"""
input GithubAssetOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubAssets."""
  field: GithubAssetOrderField!
}
"""Properties by which GithubAsset connections can be ordered."""
enum GithubAssetOrderField {
  NAME
  DOWNLOAD_COUNT
  CREATED_AT
  UPDATED_AT
}
"""
GithubAssetWhereInput is used for filtering GithubAsset objects.
Input was generated by ent.
"""
input GithubAssetWhereInput {
  not: GithubAssetWhereInput
  and: [GithubAssetWhereInput!]
  or: [GithubAssetWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """asset_id field predicates"""
  assetID: Int
  assetIDNEQ: Int
  assetIDIn: [Int!]
  assetIDNotIn: [Int!]
  assetIDGT: Int
  assetIDGTE: Int
  assetIDLT: Int
  assetIDLTE: Int
  """browser_download_url field predicates"""
  browserDownloadURL: String
  browserDownloadURLNEQ: String
  browserDownloadURLIn: [String!]
  browserDownloadURLNotIn: [String!]
  browserDownloadURLGT: String
  browserDownloadURLGTE: String
  browserDownloadURLLT: String
  browserDownloadURLLTE: String
  browserDownloadURLContains: String
  browserDownloadURLHasPrefix: String
  browserDownloadURLHasSuffix: String
  browserDownloadURLEqualFold: String
  browserDownloadURLContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """label field predicates"""
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelIsNil: Boolean
  labelNotNil: Boolean
  labelEqualFold: String
  labelContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateIsNil: Boolean
  stateNotNil: Boolean
  stateEqualFold: String
  stateContainsFold: String
  """content_type field predicates"""
  contentType: String
  contentTypeNEQ: String
  contentTypeIn: [String!]
  contentTypeNotIn: [String!]
  contentTypeGT: String
  contentTypeGTE: String
  contentTypeLT: String
  contentTypeLTE: String
  contentTypeContains: String
  contentTypeHasPrefix: String
  contentTypeHasSuffix: String
  contentTypeEqualFold: String
  contentTypeContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """download_count field predicates"""
  downloadCount: Int
  downloadCountNEQ: Int
  downloadCountIn: [Int!]
  downloadCountNotIn: [Int!]
  downloadCountGT: Int
  downloadCountGTE: Int
  downloadCountLT: Int
  downloadCountLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """release edge predicates"""
  hasRelease: Boolean
  hasReleaseWith: [GithubReleaseWhereInput!]
}
type GithubEvent implements Node {
  id: ID!
  eventID: String!
  eventType: String!
  createdAt: Time!
  public: Boolean!
  actorID: Int!
  actor: GithubUser!
  repoID: Int!
  repo: GithubEventRepo!
  payload: Map!
}
"""A connection to a list of items."""
type GithubEventConnection {
  """A list of edges."""
  edges: [GithubEventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubEventEdge {
  """The item at the end of the edge."""
  node: GithubEvent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubEvent connections"""
input GithubEventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubEvents."""
  field: GithubEventOrderField!
}
"""Properties by which GithubEvent connections can be ordered."""
enum GithubEventOrderField {
  EVENT_ID
  EVENT_TYPE
  CREATED_AT
  ACTOR_ID
  REPO_ID
}
"""
GithubEventWhereInput is used for filtering GithubEvent objects.
Input was generated by ent.
"""
input GithubEventWhereInput {
  not: GithubEventWhereInput
  and: [GithubEventWhereInput!]
  or: [GithubEventWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """event_id field predicates"""
  eventID: String
  eventIDNEQ: String
  eventIDIn: [String!]
  eventIDNotIn: [String!]
  eventIDGT: String
  eventIDGTE: String
  eventIDLT: String
  eventIDLTE: String
  eventIDContains: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDEqualFold: String
  eventIDContainsFold: String
  """event_type field predicates"""
  eventType: String
  eventTypeNEQ: String
  eventTypeIn: [String!]
  eventTypeNotIn: [String!]
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeContains: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeEqualFold: String
  eventTypeContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """actor_id field predicates"""
  actorID: Int
  actorIDNEQ: Int
  actorIDIn: [Int!]
  actorIDNotIn: [Int!]
  actorIDGT: Int
  actorIDGTE: Int
  actorIDLT: Int
  actorIDLTE: Int
  """repo_id field predicates"""
  repoID: Int
  repoIDNEQ: Int
  repoIDIn: [Int!]
  repoIDNotIn: [Int!]
  repoIDGT: Int
  repoIDGTE: Int
  repoIDLT: Int
  repoIDLTE: Int
}
type GithubGist implements Node {
  id: ID!
  gistID: String!
  htmlURL: String!
  public: Boolean!
  createdAt: Time!
  updatedAt: Time!
  description: String
  owner: GithubUser!
  name: String!
  type: String!
  language: String
  size: Int!
  rawURL: String!
  content: String!
}
"""A connection to a list of items."""
type GithubGistConnection {
  """A list of edges."""
  edges: [GithubGistEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubGistEdge {
  """The item at the end of the edge."""
  node: GithubGist
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubGist connections"""
input GithubGistOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubGists."""
  field: GithubGistOrderField!
}
"""Properties by which GithubGist connections can be ordered."""
enum GithubGistOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
  TYPE
  LANGUAGE
  SIZE
}
"""
GithubGistWhereInput is used for filtering GithubGist objects.
Input was generated by ent.
"""
input GithubGistWhereInput {
  not: GithubGistWhereInput
  and: [GithubGistWhereInput!]
  or: [GithubGistWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """gist_id field predicates"""
  gistID: String
  gistIDNEQ: String
  gistIDIn: [String!]
  gistIDNotIn: [String!]
  gistIDGT: String
  gistIDGTE: String
  gistIDLT: String
  gistIDLTE: String
  gistIDContains: String
  gistIDHasPrefix: String
  gistIDHasSuffix: String
  gistIDEqualFold: String
  gistIDContainsFold: String
  """html_url field predicates"""
  htmlURL: String
  htmlURLNEQ: String
  htmlURLIn: [String!]
  htmlURLNotIn: [String!]
  htmlURLGT: String
  htmlURLGTE: String
  htmlURLLT: String
  htmlURLLTE: String
  htmlURLContains: String
  htmlURLHasPrefix: String
  htmlURLHasSuffix: String
  htmlURLEqualFold: String
  htmlURLContainsFold: String
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """language field predicates"""
  language: String
  languageNEQ: String
  languageIn: [String!]
  languageNotIn: [String!]
  languageGT: String
  languageGTE: String
  languageLT: String
  languageLTE: String
  languageContains: String
  languageHasPrefix: String
  languageHasSuffix: String
  languageIsNil: Boolean
  languageNotNil: Boolean
  languageEqualFold: String
  languageContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """raw_url field predicates"""
  rawURL: String
  rawURLNEQ: String
  rawURLIn: [String!]
  rawURLNotIn: [String!]
  rawURLGT: String
  rawURLGTE: String
  rawURLLT: String
  rawURLLTE: String
  rawURLContains: String
  rawURLHasPrefix: String
  rawURLHasSuffix: String
  rawURLEqualFold: String
  rawURLContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
}
type GithubRelease implements Node {
  id: ID!
  releaseID: Int!
  htmlURL: String!
  tagName: String!
  targetCommitish: String!
  name: String
  draft: Boolean!
  prerelease: Boolean!
  createdAt: Time!
  publishedAt: Time!
  author: GithubUser!
  repository: GithubRepository!
  assets(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubAssets returned from the connection."""
    orderBy: GithubAssetOrder

    """Filtering options for GithubAssets returned from the connection."""
    where: GithubAssetWhereInput
  ): GithubAssetConnection!
}
"""A connection to a list of items."""
type GithubReleaseConnection {
  """A list of edges."""
  edges: [GithubReleaseEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubReleaseEdge {
  """The item at the end of the edge."""
  node: GithubRelease
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubRelease connections"""
input GithubReleaseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubReleases."""
  field: GithubReleaseOrderField!
}
"""Properties by which GithubRelease connections can be ordered."""
enum GithubReleaseOrderField {
  TAG_NAME
  NAME
  CREATED_AT
  PUBLISHED_AT
}
"""
GithubReleaseWhereInput is used for filtering GithubRelease objects.
Input was generated by ent.
"""
input GithubReleaseWhereInput {
  not: GithubReleaseWhereInput
  and: [GithubReleaseWhereInput!]
  or: [GithubReleaseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """release_id field predicates"""
  releaseID: Int
  releaseIDNEQ: Int
  releaseIDIn: [Int!]
  releaseIDNotIn: [Int!]
  releaseIDGT: Int
  releaseIDGTE: Int
  releaseIDLT: Int
  releaseIDLTE: Int
  """html_url field predicates"""
  htmlURL: String
  htmlURLNEQ: String
  htmlURLIn: [String!]
  htmlURLNotIn: [String!]
  htmlURLGT: String
  htmlURLGTE: String
  htmlURLLT: String
  htmlURLLTE: String
  htmlURLContains: String
  htmlURLHasPrefix: String
  htmlURLHasSuffix: String
  htmlURLEqualFold: String
  htmlURLContainsFold: String
  """tag_name field predicates"""
  tagName: String
  tagNameNEQ: String
  tagNameIn: [String!]
  tagNameNotIn: [String!]
  tagNameGT: String
  tagNameGTE: String
  tagNameLT: String
  tagNameLTE: String
  tagNameContains: String
  tagNameHasPrefix: String
  tagNameHasSuffix: String
  tagNameEqualFold: String
  tagNameContainsFold: String
  """target_commitish field predicates"""
  targetCommitish: String
  targetCommitishNEQ: String
  targetCommitishIn: [String!]
  targetCommitishNotIn: [String!]
  targetCommitishGT: String
  targetCommitishGTE: String
  targetCommitishLT: String
  targetCommitishLTE: String
  targetCommitishContains: String
  targetCommitishHasPrefix: String
  targetCommitishHasSuffix: String
  targetCommitishEqualFold: String
  targetCommitishContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """draft field predicates"""
  draft: Boolean
  draftNEQ: Boolean
  """prerelease field predicates"""
  prerelease: Boolean
  prereleaseNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """published_at field predicates"""
  publishedAt: Time
  publishedAtNEQ: Time
  publishedAtIn: [Time!]
  publishedAtNotIn: [Time!]
  publishedAtGT: Time
  publishedAtGTE: Time
  publishedAtLT: Time
  publishedAtLTE: Time
  """repository edge predicates"""
  hasRepository: Boolean
  hasRepositoryWith: [GithubRepositoryWhereInput!]
  """assets edge predicates"""
  hasAssets: Boolean
  hasAssetsWith: [GithubAssetWhereInput!]
}
type GithubRepository implements Node {
  id: ID!
  repoID: Int!
  name: String!
  fullName: String!
  ownerLogin: String!
  owner: GithubUser!
  public: Boolean!
  htmlURL: String!
  description: String
  fork: Boolean!
  homepage: String
  starCount: Int!
  defaultBranch: String!
  isTemplate: Boolean!
  hasIssues: Boolean!
  archived: Boolean!
  pushedAt: Time
  createdAt: Time!
  updatedAt: Time
  license: GithubLicense
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Labels returned from the connection."""
    orderBy: LabelOrder

    """Filtering options for Labels returned from the connection."""
    where: LabelWhereInput
  ): LabelConnection!
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubReleases returned from the connection."""
    orderBy: GithubReleaseOrder

    """Filtering options for GithubReleases returned from the connection."""
    where: GithubReleaseWhereInput
  ): GithubReleaseConnection!
}
"""A connection to a list of items."""
type GithubRepositoryConnection {
  """A list of edges."""
  edges: [GithubRepositoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GithubRepositoryEdge {
  """The item at the end of the edge."""
  node: GithubRepository
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GithubRepository connections"""
input GithubRepositoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GithubRepositories."""
  field: GithubRepositoryOrderField!
}
"""Properties by which GithubRepository connections can be ordered."""
enum GithubRepositoryOrderField {
  NAME
  FULL_NAME
  OWNER_LOGIN
  STAR_COUNT
  PUSHED_AT
  CREATED_AT
  UPDATED_AT
}
"""
GithubRepositoryWhereInput is used for filtering GithubRepository objects.
Input was generated by ent.
"""
input GithubRepositoryWhereInput {
  not: GithubRepositoryWhereInput
  and: [GithubRepositoryWhereInput!]
  or: [GithubRepositoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """repo_id field predicates"""
  repoID: Int
  repoIDNEQ: Int
  repoIDIn: [Int!]
  repoIDNotIn: [Int!]
  repoIDGT: Int
  repoIDGTE: Int
  repoIDLT: Int
  repoIDLTE: Int
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """owner_login field predicates"""
  ownerLogin: String
  ownerLoginNEQ: String
  ownerLoginIn: [String!]
  ownerLoginNotIn: [String!]
  ownerLoginGT: String
  ownerLoginGTE: String
  ownerLoginLT: String
  ownerLoginLTE: String
  ownerLoginContains: String
  ownerLoginHasPrefix: String
  ownerLoginHasSuffix: String
  ownerLoginEqualFold: String
  ownerLoginContainsFold: String
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """html_url field predicates"""
  htmlURL: String
  htmlURLNEQ: String
  htmlURLIn: [String!]
  htmlURLNotIn: [String!]
  htmlURLGT: String
  htmlURLGTE: String
  htmlURLLT: String
  htmlURLLTE: String
  htmlURLContains: String
  htmlURLHasPrefix: String
  htmlURLHasSuffix: String
  htmlURLEqualFold: String
  htmlURLContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """fork field predicates"""
  fork: Boolean
  forkNEQ: Boolean
  """homepage field predicates"""
  homepage: String
  homepageNEQ: String
  homepageIn: [String!]
  homepageNotIn: [String!]
  homepageGT: String
  homepageGTE: String
  homepageLT: String
  homepageLTE: String
  homepageContains: String
  homepageHasPrefix: String
  homepageHasSuffix: String
  homepageIsNil: Boolean
  homepageNotNil: Boolean
  homepageEqualFold: String
  homepageContainsFold: String
  """star_count field predicates"""
  starCount: Int
  starCountNEQ: Int
  starCountIn: [Int!]
  starCountNotIn: [Int!]
  starCountGT: Int
  starCountGTE: Int
  starCountLT: Int
  starCountLTE: Int
  """default_branch field predicates"""
  defaultBranch: String
  defaultBranchNEQ: String
  defaultBranchIn: [String!]
  defaultBranchNotIn: [String!]
  defaultBranchGT: String
  defaultBranchGTE: String
  defaultBranchLT: String
  defaultBranchLTE: String
  defaultBranchContains: String
  defaultBranchHasPrefix: String
  defaultBranchHasSuffix: String
  defaultBranchEqualFold: String
  defaultBranchContainsFold: String
  """is_template field predicates"""
  isTemplate: Boolean
  isTemplateNEQ: Boolean
  """has_issues field predicates"""
  hasIssues: Boolean
  hasIssuesNEQ: Boolean
  """archived field predicates"""
  archived: Boolean
  archivedNEQ: Boolean
  """pushed_at field predicates"""
  pushedAt: Time
  pushedAtNEQ: Time
  pushedAtIn: [Time!]
  pushedAtNotIn: [Time!]
  pushedAtGT: Time
  pushedAtGTE: Time
  pushedAtLT: Time
  pushedAtLTE: Time
  pushedAtIsNil: Boolean
  pushedAtNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """labels edge predicates"""
  hasLabels: Boolean
  hasLabelsWith: [LabelWhereInput!]
  """releases edge predicates"""
  hasReleases: Boolean
  hasReleasesWith: [GithubReleaseWhereInput!]
}
type Label implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  githubRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubRepositories returned from the connection."""
    orderBy: GithubRepositoryOrder

    """Filtering options for GithubRepositories returned from the connection."""
    where: GithubRepositoryWhereInput
  ): GithubRepositoryConnection!
}
"""A connection to a list of items."""
type LabelConnection {
  """A list of edges."""
  edges: [LabelEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LabelEdge {
  """The item at the end of the edge."""
  node: Label
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Label connections"""
input LabelOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Labels."""
  field: LabelOrderField!
}
"""Properties by which Label connections can be ordered."""
enum LabelOrderField {
  NAME
}
"""
LabelWhereInput is used for filtering Label objects.
Input was generated by ent.
"""
input LabelWhereInput {
  not: LabelWhereInput
  and: [LabelWhereInput!]
  or: [LabelWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """github_repositories edge predicates"""
  hasGithubRepositories: Boolean
  hasGithubRepositoriesWith: [GithubRepositoryWhereInput!]
}
"""The builtin Map type"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/lrstanley/liam.sh/internal/database/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  slug: String!
  title: String!
  content: String!
  contentHTML: String!
  summary: String!
  publishedAt: Time!
  viewCount: Int!
  public: Boolean!
  author: User!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Labels returned from the connection."""
    orderBy: LabelOrder

    """Filtering options for Labels returned from the connection."""
    where: LabelWhereInput
  ): LabelConnection!
}
"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Posts."""
  field: PostOrderField!
}
"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  SLUG
  TITLE
  DATE
  VIEW_COUNT
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """slug field predicates"""
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugEqualFold: String
  slugContainsFold: String
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """content_html field predicates"""
  contentHTML: String
  contentHTMLNEQ: String
  contentHTMLIn: [String!]
  contentHTMLNotIn: [String!]
  contentHTMLGT: String
  contentHTMLGTE: String
  contentHTMLLT: String
  contentHTMLLTE: String
  contentHTMLContains: String
  contentHTMLHasPrefix: String
  contentHTMLHasSuffix: String
  contentHTMLEqualFold: String
  contentHTMLContainsFold: String
  """summary field predicates"""
  summary: String
  summaryNEQ: String
  summaryIn: [String!]
  summaryNotIn: [String!]
  summaryGT: String
  summaryGTE: String
  summaryLT: String
  summaryLTE: String
  summaryContains: String
  summaryHasPrefix: String
  summaryHasSuffix: String
  summaryEqualFold: String
  summaryContainsFold: String
  """published_at field predicates"""
  publishedAt: Time
  publishedAtNEQ: Time
  publishedAtIn: [Time!]
  publishedAtNotIn: [Time!]
  publishedAtGT: Time
  publishedAtGTE: Time
  publishedAtLT: Time
  publishedAtLTE: Time
  """view_count field predicates"""
  viewCount: Int
  viewCountNEQ: Int
  viewCountIn: [Int!]
  viewCountNotIn: [Int!]
  viewCountGT: Int
  viewCountGTE: Int
  viewCountLT: Int
  viewCountLTE: Int
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
  """labels edge predicates"""
  hasLabels: Boolean
  hasLabelsWith: [LabelWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  githubAssets(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubAssets returned from the connection."""
    orderBy: GithubAssetOrder

    """Filtering options for GithubAssets returned from the connection."""
    where: GithubAssetWhereInput
  ): GithubAssetConnection!
  githubEvents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubEvents returned from the connection."""
    orderBy: GithubEventOrder

    """Filtering options for GithubEvents returned from the connection."""
    where: GithubEventWhereInput
  ): GithubEventConnection!
  githubGists(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubGists returned from the connection."""
    orderBy: GithubGistOrder

    """Filtering options for GithubGists returned from the connection."""
    where: GithubGistWhereInput
  ): GithubGistConnection!
  githubReleases(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubReleases returned from the connection."""
    orderBy: GithubReleaseOrder

    """Filtering options for GithubReleases returned from the connection."""
    where: GithubReleaseWhereInput
  ): GithubReleaseConnection!
  githubRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GithubRepositories returned from the connection."""
    orderBy: GithubRepositoryOrder

    """Filtering options for GithubRepositories returned from the connection."""
    where: GithubRepositoryWhereInput
  ): GithubRepositoryConnection!
  labels(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Labels returned from the connection."""
    orderBy: LabelOrder

    """Filtering options for Labels returned from the connection."""
    where: LabelWhereInput
  ): LabelConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateLabelInput is used for update Label object.
Input was generated by ent.
"""
input UpdateLabelInput {
  updateTime: Time
  name: String
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addGithubRepositoryIDs: [ID!]
  removeGithubRepositoryIDs: [ID!]
  clearGithubRepositories: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updateTime: Time
  slug: String
  title: String
  content: String
  publishedAt: Time
  public: Boolean
  addLabelIDs: [ID!]
  removeLabelIDs: [ID!]
  clearLabels: Boolean
}
type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  userID: Int!
  login: String!
  name: String
  avatarURL: String
  htmlURL: String
  email: String
  location: String
  bio: String
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  LOGIN
  NAME
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """user_id field predicates"""
  userID: Int
  userIDNEQ: Int
  userIDIn: [Int!]
  userIDNotIn: [Int!]
  userIDGT: Int
  userIDGTE: Int
  userIDLT: Int
  userIDLTE: Int
  """login field predicates"""
  login: String
  loginNEQ: String
  loginIn: [String!]
  loginNotIn: [String!]
  loginGT: String
  loginGTE: String
  loginLT: String
  loginLTE: String
  loginContains: String
  loginHasPrefix: String
  loginHasSuffix: String
  loginEqualFold: String
  loginContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """avatar_url field predicates"""
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """html_url field predicates"""
  htmlURL: String
  htmlURLNEQ: String
  htmlURLIn: [String!]
  htmlURLNotIn: [String!]
  htmlURLGT: String
  htmlURLGTE: String
  htmlURLLT: String
  htmlURLLTE: String
  htmlURLContains: String
  htmlURLHasPrefix: String
  htmlURLHasSuffix: String
  htmlURLIsNil: Boolean
  htmlURLNotNil: Boolean
  htmlURLEqualFold: String
  htmlURLContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """location field predicates"""
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationIsNil: Boolean
  locationNotNil: Boolean
  locationEqualFold: String
  locationContainsFold: String
  """bio field predicates"""
  bio: String
  bioNEQ: String
  bioIn: [String!]
  bioNotIn: [String!]
  bioGT: String
  bioGTE: String
  bioLT: String
  bioLTE: String
  bioContains: String
  bioHasPrefix: String
  bioHasSuffix: String
  bioIsNil: Boolean
  bioNotNil: Boolean
  bioEqualFold: String
  bioContainsFold: String
  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
