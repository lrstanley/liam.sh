// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubevent"
	"github.com/lrstanley/liam.sh/internal/database/ent/predicate"
)

// GithubEventDelete is the builder for deleting a GithubEvent entity.
type GithubEventDelete struct {
	config
	hooks    []Hook
	mutation *GithubEventMutation
}

// Where appends a list predicates to the GithubEventDelete builder.
func (ged *GithubEventDelete) Where(ps ...predicate.GithubEvent) *GithubEventDelete {
	ged.mutation.Where(ps...)
	return ged
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ged *GithubEventDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ged.sqlExec, ged.mutation, ged.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ged *GithubEventDelete) ExecX(ctx context.Context) int {
	n, err := ged.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ged *GithubEventDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(githubevent.Table, sqlgraph.NewFieldSpec(githubevent.FieldID, field.TypeInt))
	if ps := ged.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ged.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ged.mutation.done = true
	return affected, err
}

// GithubEventDeleteOne is the builder for deleting a single GithubEvent entity.
type GithubEventDeleteOne struct {
	ged *GithubEventDelete
}

// Where appends a list predicates to the GithubEventDelete builder.
func (gedo *GithubEventDeleteOne) Where(ps ...predicate.GithubEvent) *GithubEventDeleteOne {
	gedo.ged.mutation.Where(ps...)
	return gedo
}

// Exec executes the deletion query.
func (gedo *GithubEventDeleteOne) Exec(ctx context.Context) error {
	n, err := gedo.ged.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{githubevent.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gedo *GithubEventDeleteOne) ExecX(ctx context.Context) {
	if err := gedo.Exec(ctx); err != nil {
		panic(err)
	}
}
