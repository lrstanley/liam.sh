{
    "openapi": "3.0.3",
    "info": {
        "title": "liam.sh Rest API",
        "version": "1.0.0"
    },
    "paths": {
        "/gh/svg": {
            "get": {
                "tags": [
                    "GithubSVG"
                ],
                "summary": "Dynamic SVG generator based off title/description parameters.",
                "description": "Dynamic SVG generator based off title/description parameters.",
                "operationId": "getGithubSVG",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SVGBackground"
                    },
                    {
                        "$ref": "#/components/parameters/SVGBackgroundColor"
                    },
                    {
                        "$ref": "#/components/parameters/SVGDescription"
                    },
                    {
                        "$ref": "#/components/parameters/SVGFontScale"
                    },
                    {
                        "$ref": "#/components/parameters/SVGHeight"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIcon"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconColor"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconHeight"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconRotate"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconWidth"
                    },
                    {
                        "$ref": "#/components/parameters/SVGLayout"
                    },
                    {
                        "$ref": "#/components/parameters/SVGTitle"
                    },
                    {
                        "$ref": "#/components/parameters/SVGWidth"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconFlip"
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "image/svg+xml": {}
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/gh/svg/{ownerID}/{repoID}": {
            "get": {
                "tags": [
                    "GithubSVG"
                ],
                "summary": "Dynamic SVG generator based off repo.",
                "description": "Dynamic SVG generator based off repo.",
                "operationId": "getGithubRepoSVG",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/SVGBackground"
                    },
                    {
                        "$ref": "#/components/parameters/SVGBackgroundColor"
                    },
                    {
                        "$ref": "#/components/parameters/SVGFontScale"
                    },
                    {
                        "$ref": "#/components/parameters/SVGHeight"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIcon"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconColor"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconHeight"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconRotate"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconWidth"
                    },
                    {
                        "$ref": "#/components/parameters/SVGLayout"
                    },
                    {
                        "$ref": "#/components/parameters/SVGWidth"
                    },
                    {
                        "$ref": "#/components/parameters/SVGIconFlip"
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "image/svg+xml": {}
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "name": "ownerID",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "description": "GitHub user ID.",
                        "type": "string"
                    }
                },
                {
                    "name": "repoID",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "description": "GitHub repository ID.",
                        "type": "string"
                    }
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-assets": {
            "summary": "List githubassets",
            "description": "List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubAssets"
                ],
                "summary": "List githubassets",
                "description": "List GithubAsset entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubAssets",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubAssetSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetAssetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetAssetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetSizeGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetSizeLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetDownloadCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetDownloadCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRelease"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested GithubAsset.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubAssetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-assets/{githubassetID}": {
            "summary": "Operate on a single GithubAsset entity",
            "description": "Operate on a single GithubAsset entity by its ID.",
            "get": {
                "tags": [
                    "GithubAssets"
                ],
                "summary": "Retrieve a githubasset",
                "description": "Retrieve a single GithubAsset entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubAsset",
                "responses": {
                    "200": {
                        "description": "The requested GithubAsset entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubAssetRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubAssetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-assets/{githubassetID}/release": {
            "summary": "Get a githubassets associated release",
            "description": "Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubAssets",
                    "GithubReleases"
                ],
                "summary": "Get a githubassets associated release",
                "description": "Get a githubassets associated release (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubAssetRelease",
                "responses": {
                    "200": {
                        "description": "The requested release entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubReleaseRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubAssetID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-events": {
            "summary": "List githubevents",
            "description": "List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubEvents"
                ],
                "summary": "List githubevents",
                "description": "List GithubEvent entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubEvents",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubEventSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventEventTypeHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventActorIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventActorIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubEventRepoIDNEQ"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested GithubEvent.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubEventList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-events/{githubeventID}": {
            "summary": "Operate on a single GithubEvent entity",
            "description": "Operate on a single GithubEvent entity by its ID.",
            "get": {
                "tags": [
                    "GithubEvents"
                ],
                "summary": "Retrieve a githubevent",
                "description": "Retrieve a single GithubEvent entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubEvent",
                "responses": {
                    "200": {
                        "description": "The requested GithubEvent entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubEventRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubEventID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-gists": {
            "summary": "List githubgists",
            "description": "List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubGists"
                ],
                "summary": "List githubgists",
                "description": "List GithubGist entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubGists",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubGistSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistGistIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistGistIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistGistIDEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistTypeHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistLanguageHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistSizeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistSizeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubGistContentContainsFold"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested GithubGist.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubGistList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-gists/{githubgistID}": {
            "summary": "Operate on a single GithubGist entity",
            "description": "Operate on a single GithubGist entity by its ID.",
            "get": {
                "tags": [
                    "GithubGists"
                ],
                "summary": "Retrieve a githubgist",
                "description": "Retrieve a single GithubGist entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubGist",
                "responses": {
                    "200": {
                        "description": "The requested GithubGist entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubGistRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubGistID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-releases": {
            "summary": "List githubreleases",
            "description": "List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubReleases"
                ],
                "summary": "List githubreleases",
                "description": "List GithubRelease entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubReleases",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubReleaseSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRepository"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasAsset"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetAssetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetAssetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetSizeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetSizeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetDownloadCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetDownloadCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested GithubRelease.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubReleaseList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-releases/outdated": {
            "get": {
                "tags": [
                    "GithubReleases"
                ],
                "summary": "Get outdated Github releases",
                "description": "List github repositories which have potentially outdated releases.",
                "operationId": "listOutdatedGithubReleases",
                "responses": {
                    "200": {
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OutdatedRepositoryRelease"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-releases/{githubreleaseID}": {
            "summary": "Operate on a single GithubRelease entity",
            "description": "Operate on a single GithubRelease entity by its ID.",
            "get": {
                "tags": [
                    "GithubReleases"
                ],
                "summary": "Retrieve a githubrelease",
                "description": "Retrieve a single GithubRelease entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubRelease",
                "responses": {
                    "200": {
                        "description": "The requested GithubRelease entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubReleaseRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubReleaseID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-releases/{githubreleaseID}/assets": {
            "summary": "List a githubreleases associated assets",
            "description": "List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubReleases",
                    "GithubAssets"
                ],
                "summary": "List a githubreleases associated assets",
                "description": "List a githubreleases associated assets (GithubAsset entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubReleaseAssets",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubAssetSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetAssetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetAssetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetLabelHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetSizeGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetSizeLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetDownloadCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetDownloadCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubAssetUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRelease"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested assets.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubReleaseAssetList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubReleaseID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-releases/{githubreleaseID}/repository": {
            "summary": "Get a githubreleases associated repository",
            "description": "Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubReleases",
                    "GithubRepositories"
                ],
                "summary": "Get a githubreleases associated repository",
                "description": "Get a githubreleases associated repository (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubReleaseRepository",
                "responses": {
                    "200": {
                        "description": "The requested repository entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubRepositoryRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubReleaseID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-repositories": {
            "summary": "List githubrepositories",
            "description": "List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubRepositories"
                ],
                "summary": "List githubrepositories",
                "description": "List GithubRepository entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubRepositories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubRepositorySortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasLabel"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRelease"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested GithubRepository.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubRepositoryList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-repositories/{githubrepositoryID}": {
            "summary": "Operate on a single GithubRepository entity",
            "description": "Operate on a single GithubRepository entity by its ID.",
            "get": {
                "tags": [
                    "GithubRepositories"
                ],
                "summary": "Retrieve a githubrepository",
                "description": "Retrieve a single GithubRepository entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getGithubRepository",
                "responses": {
                    "200": {
                        "description": "The requested GithubRepository entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubRepositoryRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubRepositoryID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-repositories/{githubrepositoryID}/labels": {
            "summary": "List a githubrepositories associated labels",
            "description": "List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubRepositories",
                    "Labels"
                ],
                "summary": "List a githubrepositories associated labels",
                "description": "List a githubrepositories associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubRepositoryLabels",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/LabelSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPost"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasGithubRepository"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested labels.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubRepositoryLabelList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubRepositoryID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-repositories/{githubrepositoryID}/releases": {
            "summary": "List a githubrepositories associated releases",
            "description": "List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "GithubRepositories",
                    "GithubReleases"
                ],
                "summary": "List a githubrepositories associated releases",
                "description": "List a githubrepositories associated releases (GithubRelease entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listGithubRepositoryReleases",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubReleaseSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubReleasePublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRepository"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeRepositoryUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasAsset"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetAssetIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetAssetIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetLabelHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetSizeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetSizeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetDownloadCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetDownloadCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAssetUpdatedAtIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested releases.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubReleaseList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/GithubRepositoryID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/github-user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get GitHub user",
                "description": "Get the GitHub user.",
                "operationId": "getGithubUser",
                "responses": {
                    "200": {
                        "description": "Github user was found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/labels": {
            "summary": "List labels",
            "description": "List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "List labels",
                "description": "List Label entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listLabels",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/LabelSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPost"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasGithubRepository"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Label.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Labels"
                ],
                "summary": "Create a new label",
                "description": "Create a new Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createLabel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Label entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/labels/count": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "Get labels count",
                "description": "Get the edge count for labels.",
                "operationId": "getLabelsCount",
                "responses": {
                    "200": {
                        "description": "Labels count was found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelCountList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/labels/{labelID}": {
            "summary": "Operate on a single Label entity",
            "description": "Operate on a single Label entity by its ID.",
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "Retrieve a label",
                "description": "Retrieve a single Label entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getLabel",
                "responses": {
                    "200": {
                        "description": "The requested Label entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Labels"
                ],
                "summary": "Delete a label",
                "description": "Delete a single Label entity by its ID.",
                "operationId": "deleteLabel",
                "responses": {
                    "204": {
                        "description": "The requested Label entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Labels"
                ],
                "summary": "Update a label",
                "description": "Update an existing Label entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updateLabel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Label entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/LabelID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/labels/{labelID}/github-repositories": {
            "summary": "List a labels associated githubRepositories",
            "description": "List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Labels",
                    "GithubRepositories"
                ],
                "summary": "List a labels associated githubRepositories",
                "description": "List a labels associated githubRepositories (GithubRepository entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listLabelGithubRepositories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/GithubRepositorySortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/GithubRepositoryUpdatedAtIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasLabel"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasRelease"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseReleaseIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTagNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseTargetCommitishHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseDraftEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePrereleaseEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleaseCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeReleasePublishedAtLT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested githubRepositories.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubRepositoryList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/LabelID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/labels/{labelID}/posts": {
            "summary": "List a labels associated posts",
            "description": "List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Labels",
                    "Posts"
                ],
                "summary": "List a labels associated posts",
                "description": "List a labels associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listLabelPosts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PostSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasAuthor"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasLabel"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested posts.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/LabelID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/openapi.json": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get OpenAPI spec",
                "description": "Get the OpenAPI specification for this service.",
                "operationId": "getOpenAPI",
                "responses": {
                    "200": {
                        "description": "OpenAPI specification was found",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": true
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/posts": {
            "summary": "List posts",
            "description": "List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "List posts",
                "description": "List Post entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPosts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PostSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasAuthor"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasLabel"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested Post.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new post",
                "description": "Create a new Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "createPost",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The created Post entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/posts/regenerate": {
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Regenerate posts.",
                "description": "Regenerate posts.",
                "operationId": "regeneratePosts",
                "responses": {
                    "200": {
                        "description": "Posts were regenerated.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/posts/{postID}": {
            "summary": "Operate on a single Post entity",
            "description": "Operate on a single Post entity by its ID.",
            "get": {
                "tags": [
                    "Posts"
                ],
                "summary": "Retrieve a post",
                "description": "Retrieve a single Post entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPost",
                "responses": {
                    "200": {
                        "description": "The requested Post entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Posts"
                ],
                "summary": "Delete a post",
                "description": "Delete a single Post entity by its ID.",
                "operationId": "deletePost",
                "responses": {
                    "204": {
                        "description": "The requested Post entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Posts"
                ],
                "summary": "Update a post",
                "description": "Update an existing Post entity. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "updatePost",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The update Post entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/ErrorConflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PostID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/posts/{postID}/author": {
            "summary": "Get a posts associated author",
            "description": "Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Posts",
                    "Users"
                ],
                "summary": "Get a posts associated author",
                "description": "Get a posts associated author (User entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getPostAuthor",
                "responses": {
                    "200": {
                        "description": "The requested author entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PostID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/posts/{postID}/labels": {
            "summary": "List a posts associated labels",
            "description": "List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Posts",
                    "Labels"
                ],
                "summary": "List a posts associated labels",
                "description": "List a posts associated labels (Label entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listPostLabels",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/LabelSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/LabelNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasPost"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgePostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasGithubRepository"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryRepoIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryFullNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryOwnerLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDescriptionContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryForkEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryStarCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryDefaultBranchHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryIsTemplateEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryHasIssuesEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryArchivedEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryPushedAtNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryCreatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeGithubRepositoryUpdatedAtIsNil"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested labels.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostLabelList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/PostID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/self": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get authenticated user",
                "description": "Get the authenticated user.",
                "operationId": "getSelf",
                "responses": {
                    "200": {
                        "description": "The authenticated user.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/stats/coding": {
            "get": {
                "tags": [
                    "Stats"
                ],
                "summary": "Get coding statistics",
                "description": "Get coding statistics.",
                "operationId": "getCodingStats",
                "responses": {
                    "200": {
                        "description": "Coding statistics were found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CodingStats"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/stats/github": {
            "get": {
                "tags": [
                    "Stats"
                ],
                "summary": "Get github statistics",
                "description": "Get github statistics.",
                "operationId": "getGithubStats",
                "responses": {
                    "200": {
                        "description": "Github statistics were found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GithubStats"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users": {
            "summary": "List users",
            "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "List User entities (including pagination, filtering, sorting, etc). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/UserSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/UserUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationContains"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/UserLocationHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested User.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}": {
            "summary": "Operate on a single User entity",
            "description": "Operate on a single User entity by its ID.",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve a user",
                "description": "Retrieve a single User entity by its ID. If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "getUser",
                "responses": {
                    "200": {
                        "description": "The requested User entity.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/users/{userID}/posts": {
            "summary": "List a users associated posts",
            "description": "List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
            "get": {
                "tags": [
                    "Users",
                    "Posts"
                ],
                "summary": "List a users associated posts",
                "description": "List a users associated posts (Post entity type). If the entity has eager-loaded edges, the depth of when those will be loaded is limited to a depth of 1 (entity -\u003e edge, not entity -\u003e edge -\u003e edge -\u003e etc).",
                "operationId": "listUserPosts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of entities to retrieve per page.",
                        "schema": {
                            "type": "integer",
                            "maximum": 1000,
                            "minimum": 1,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort entity results by the given field.",
                        "schema": {
                            "$ref": "#/components/schemas/PostSortableFields",
                            "default": "id"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order the results in ascending or descending order.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "asc"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/FilterOperation"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostSlugEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/PostTitleHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContains"
                    },
                    {
                        "$ref": "#/components/parameters/PostContentHTMLContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublishedAtLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountGT"
                    },
                    {
                        "$ref": "#/components/parameters/PostViewCountLT"
                    },
                    {
                        "$ref": "#/components/parameters/PostPublicEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasAuthor"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorUserIDNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLoginHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorNameHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorEmailHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIsNil"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeAuthorLocationHasSuffix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeHasLabel"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelCreateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeGT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelUpdateTimeLT"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNEQ"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameNotIn"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameEqualFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContains"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameContainsFold"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasPrefix"
                    },
                    {
                        "$ref": "#/components/parameters/EdgeLabelNameHasSuffix"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested posts.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/PrettyResponse"
                },
                {
                    "$ref": "#/components/parameters/UserID"
                },
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        },
        "/version": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get service version",
                "description": "Get the version of the service.",
                "operationId": "getServiceVersion",
                "responses": {
                    "200": {
                        "description": "Service version information was found.",
                        "headers": {
                            "X-Ratelimit-Limit": {
                                "$ref": "#/components/headers/X-Ratelimit-Limit"
                            },
                            "X-Ratelimit-Remaining": {
                                "$ref": "#/components/headers/X-Ratelimit-Remaining"
                            },
                            "X-Ratelimit-Reset": {
                                "$ref": "#/components/headers/X-Ratelimit-Reset"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionInfo"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorBadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/ErrorUnauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/ErrorForbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorNotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/ErrorTooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorInternalServerError"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/components/parameters/X-Request-Id"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "CodingStats": {
                "properties": {
                    "calculated_days": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LanguageStat"
                        }
                    },
                    "total_duration": {
                        "type": "string",
                        "example": "95 hrs 19 mins"
                    },
                    "total_duration_short": {
                        "type": "string",
                        "example": "95 hrs"
                    },
                    "total_seconds": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "calculated_days",
                    "languages",
                    "total_duration",
                    "total_duration_short",
                    "total_seconds"
                ]
            },
            "ErrorBadRequest": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Bad Request"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 400
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorConflict": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Conflict"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 409
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorForbidden": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Forbidden"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 403
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorInternalServerError": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Internal Server Error"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 500
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorNotFound": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Not Found"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 404
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorTooManyRequests": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Too Many Requests"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 429
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "ErrorUnauthorized": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "The underlying error, which may be masked when debugging is disabled.",
                        "type": "string"
                    },
                    "type": {
                        "description": "A summary of the error code based off the HTTP status code or application error code.",
                        "type": "string",
                        "example": "Unauthorized"
                    },
                    "code": {
                        "description": "The HTTP status code or other internal application error code.",
                        "type": "integer",
                        "example": 401
                    },
                    "request_id": {
                        "description": "The unique request ID for this error.",
                        "type": "string",
                        "example": "cb6f6f9c1783cdc9752cee2a4e95dd4c"
                    },
                    "timestamp": {
                        "description": "The timestamp of the error, in RFC3339 format.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-26T12:19:01Z"
                    }
                },
                "required": [
                    "error",
                    "type",
                    "code",
                    "timestamp"
                ]
            },
            "FilterOperation": {
                "description": "Specifies how to combine multiple filters.",
                "type": "string",
                "enum": [
                    "and",
                    "or"
                ],
                "default": "and"
            },
            "GithubAsset": {
                "description": "A single GithubAsset entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the GithubAsset entity.",
                        "type": "integer"
                    },
                    "asset_id": {
                        "description": "The ID of the asset.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "browser_download_url": {
                        "description": "The URL of the asset.",
                        "type": "string",
                        "example": "https://github.com/lrstanley/entrest/releases/download/v0.1.0/entrest-v0.1.0-linux-amd64.tar.gz"
                    },
                    "name": {
                        "description": "The name of the asset.",
                        "type": "string"
                    },
                    "label": {
                        "description": "The label of the asset.",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state of the asset.",
                        "type": "string"
                    },
                    "content_type": {
                        "description": "The content type of the asset.",
                        "type": "string"
                    },
                    "size": {
                        "description": "The size of the asset in bytes.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "download_count": {
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "created_at": {
                        "description": "The date the asset was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "The date the asset was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "uploader": {
                        "$ref": "#/components/schemas/GithubUser",
                        "description": "The data of the user that uploaded the asset."
                    }
                },
                "required": [
                    "id",
                    "asset_id",
                    "browser_download_url",
                    "name",
                    "content_type",
                    "size",
                    "download_count",
                    "created_at",
                    "uploader"
                ]
            },
            "GithubAssetList": {
                "description": "A paginated result set of GithubAsset entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GithubAssetRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "GithubAssetRead": {
                "$ref": "#/components/schemas/GithubAsset"
            },
            "GithubAssetSortableFields": {
                "description": "All potential sortable fields for GithubAsset entities.",
                "type": "string",
                "enum": [
                    "asset_id",
                    "created_at",
                    "download_count",
                    "id",
                    "label",
                    "name",
                    "random",
                    "release.created_at",
                    "release.draft",
                    "release.id",
                    "release.name",
                    "release.prerelease",
                    "release.published_at",
                    "release.release_id",
                    "release.tag_name",
                    "size",
                    "updated_at"
                ],
                "default": "id"
            },
            "GithubEvent": {
                "description": "A single GithubEvent entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the GithubEvent entity.",
                        "type": "integer"
                    },
                    "event_id": {
                        "description": "The ID of the event.",
                        "type": "string"
                    },
                    "event_type": {
                        "description": "The type of the event.",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The date the event was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "public": {
                        "description": "Whether the event is public or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "actor_id": {
                        "description": "The ID of the actor.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "actor": {
                        "$ref": "#/components/schemas/GithubUser",
                        "description": "The actor data of the event."
                    },
                    "repo_id": {
                        "description": "The ID of the repository.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "repo": {
                        "description": "The repository of the event.",
                        "type": "object",
                        "additionalProperties": true
                    },
                    "payload": {
                        "description": "The payload of the event.",
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "required": [
                    "id",
                    "event_id",
                    "event_type",
                    "created_at",
                    "public",
                    "actor_id",
                    "actor",
                    "repo_id",
                    "repo",
                    "payload"
                ]
            },
            "GithubEventList": {
                "description": "A paginated result set of GithubEvent entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GithubEventRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "GithubEventRead": {
                "$ref": "#/components/schemas/GithubEvent"
            },
            "GithubEventSortableFields": {
                "description": "All potential sortable fields for GithubEvent entities.",
                "type": "string",
                "enum": [
                    "actor_id",
                    "created_at",
                    "event_id",
                    "event_type",
                    "id",
                    "public",
                    "random",
                    "repo_id"
                ],
                "default": "id"
            },
            "GithubGist": {
                "description": "A single GithubGist entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the GithubGist entity.",
                        "type": "integer"
                    },
                    "gist_id": {
                        "description": "The ID of the gist.",
                        "type": "string"
                    },
                    "html_url": {
                        "description": "The URL of the gist.",
                        "type": "string",
                        "example": "https://gist.github.com/lrstanley/c4f0a3f2b8a2f3a4c2c0"
                    },
                    "public": {
                        "description": "Whether the gist is public or not.",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "The date the gist was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "The date the gist was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "description": "The description of the gist.",
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/GithubUser",
                        "description": "The owner data of the gist."
                    },
                    "name": {
                        "description": "The name of the file.",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the file.",
                        "type": "string"
                    },
                    "language": {
                        "description": "The programming language of the file.",
                        "type": "string"
                    },
                    "size": {
                        "description": "The size of the file in bytes.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "raw_url": {
                        "description": "The raw URL of the file.",
                        "type": "string"
                    },
                    "content": {
                        "description": "The content of the file.",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "gist_id",
                    "html_url",
                    "public",
                    "created_at",
                    "updated_at",
                    "owner",
                    "name",
                    "type",
                    "size",
                    "raw_url",
                    "content"
                ]
            },
            "GithubGistList": {
                "description": "A paginated result set of GithubGist entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GithubGistRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "GithubGistRead": {
                "$ref": "#/components/schemas/GithubGist"
            },
            "GithubGistSortableFields": {
                "description": "All potential sortable fields for GithubGist entities.",
                "type": "string",
                "enum": [
                    "created_at",
                    "gist_id",
                    "id",
                    "language",
                    "name",
                    "public",
                    "random",
                    "size",
                    "type",
                    "updated_at"
                ],
                "default": "id"
            },
            "GithubRelease": {
                "description": "A single GithubRelease entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the GithubRelease entity.",
                        "type": "integer"
                    },
                    "release_id": {
                        "description": "The ID of the release.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "html_url": {
                        "description": "The URL of the release.",
                        "type": "string",
                        "example": "https://github.com/lrstanley/entrest/releases/tag/v0.1.0"
                    },
                    "tag_name": {
                        "description": "The tag name of the release.",
                        "type": "string",
                        "example": "v0.1.0"
                    },
                    "target_commitish": {
                        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.",
                        "type": "string",
                        "example": "master"
                    },
                    "name": {
                        "description": "The name of the release.",
                        "type": "string"
                    },
                    "draft": {
                        "description": "Indicates whether the release is a draft.",
                        "type": "boolean"
                    },
                    "prerelease": {
                        "description": "Indicates whether the release is a prerelease.",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "The date the release was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "published_at": {
                        "description": "The date the release was published.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "author": {
                        "$ref": "#/components/schemas/GithubUser"
                    }
                },
                "required": [
                    "id",
                    "release_id",
                    "html_url",
                    "tag_name",
                    "target_commitish",
                    "draft",
                    "prerelease",
                    "created_at",
                    "published_at",
                    "author"
                ]
            },
            "GithubReleaseAssetList": {
                "description": "List of assets associated with githubreleases (githubasset entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/GithubAssetRead"
                }
            },
            "GithubReleaseEdges": {
                "type": "object",
                "properties": {
                    "repository": {
                        "$ref": "#/components/schemas/GithubRepository"
                    },
                    "assets": {
                        "description": "A list of GithubAsset entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GithubAsset"
                        },
                        "maxItems": 1000,
                        "minItems": 0
                    }
                },
                "required": [
                    "repository"
                ]
            },
            "GithubReleaseList": {
                "description": "A paginated result set of GithubRelease entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GithubReleaseRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "GithubReleaseRead": {
                "description": "A single GithubRelease entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GithubRelease"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/GithubReleaseEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "GithubReleaseSortableFields": {
                "description": "All potential sortable fields for GithubRelease entities.",
                "type": "string",
                "enum": [
                    "assets.asset_id.sum",
                    "assets.count",
                    "assets.download_count.sum",
                    "assets.size.sum",
                    "created_at",
                    "draft",
                    "id",
                    "name",
                    "prerelease",
                    "published_at",
                    "random",
                    "release_id",
                    "repository.archived",
                    "repository.created_at",
                    "repository.default_branch",
                    "repository.fork",
                    "repository.full_name",
                    "repository.has_issues",
                    "repository.id",
                    "repository.is_template",
                    "repository.name",
                    "repository.owner_login",
                    "repository.public",
                    "repository.pushed_at",
                    "repository.repo_id",
                    "repository.star_count",
                    "repository.updated_at",
                    "tag_name"
                ],
                "default": "id"
            },
            "GithubRepository": {
                "description": "A single GithubRepository entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the GithubRepository entity.",
                        "type": "integer"
                    },
                    "repo_id": {
                        "description": "The ID of the repository.",
                        "type": "integer",
                        "format": "int64",
                        "maximum": 9223372036854775807,
                        "minimum": -9223372036854775808
                    },
                    "name": {
                        "description": "The name of the repository.",
                        "type": "string",
                        "example": "entrest"
                    },
                    "full_name": {
                        "description": "The full name of the repository, which includes the owner.",
                        "type": "string",
                        "example": "lrstanley/entrest"
                    },
                    "owner_login": {
                        "description": "The username which owns the repository (user or organization).",
                        "type": "string",
                        "example": "lrstanley"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/GithubUser",
                        "description": "The owner data of the repository."
                    },
                    "public": {
                        "description": "Whether the repository is public or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "html_url": {
                        "description": "The URL of the repository.",
                        "type": "string",
                        "example": "https://github.com/lrstanley/entrest"
                    },
                    "description": {
                        "description": "The description of the repository.",
                        "type": "string"
                    },
                    "fork": {
                        "description": "Whether the repository is a fork or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "homepage": {
                        "description": "The homepage of the repository.",
                        "type": "string",
                        "example": "https://example.com"
                    },
                    "star_count": {
                        "description": "The number of stars the repository has.",
                        "type": "integer",
                        "default": 0
                    },
                    "default_branch": {
                        "description": "The default branch of the repository.",
                        "type": "string",
                        "example": "master"
                    },
                    "is_template": {
                        "description": "Whether the repository is a template repo or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "has_issues": {
                        "description": "Whether the repository has issues enabled or not.",
                        "type": "boolean",
                        "default": true
                    },
                    "archived": {
                        "description": "Whether the repository is archived or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "pushed_at": {
                        "description": "The date the repository was last pushed to.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "description": "The date the repository was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "The date the repository was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "license": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "required": [
                    "id",
                    "repo_id",
                    "name",
                    "full_name",
                    "owner_login",
                    "owner",
                    "public",
                    "html_url",
                    "fork",
                    "star_count",
                    "default_branch",
                    "is_template",
                    "has_issues",
                    "archived",
                    "created_at"
                ]
            },
            "GithubRepositoryEdges": {
                "type": "object",
                "properties": {
                    "labels": {
                        "description": "A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Label"
                        },
                        "maxItems": 1000,
                        "minItems": 0
                    }
                }
            },
            "GithubRepositoryLabelList": {
                "description": "List of labels associated with githubrepositories (label entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/LabelRead"
                }
            },
            "GithubRepositoryList": {
                "description": "A paginated result set of GithubRepository entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GithubRepositoryRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "GithubRepositoryRead": {
                "description": "A single GithubRepository entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GithubRepository"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/GithubRepositoryEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "GithubRepositorySortableFields": {
                "description": "All potential sortable fields for GithubRepository entities.",
                "type": "string",
                "enum": [
                    "archived",
                    "created_at",
                    "default_branch",
                    "fork",
                    "full_name",
                    "has_issues",
                    "id",
                    "is_template",
                    "labels.count",
                    "name",
                    "owner_login",
                    "public",
                    "pushed_at",
                    "random",
                    "releases.count",
                    "releases.release_id.sum",
                    "repo_id",
                    "star_count",
                    "updated_at"
                ],
                "default": "id"
            },
            "GithubStats": {
                "type": "object",
                "properties": {
                    "all_issues": {
                        "type": "integer"
                    },
                    "closed_issues": {
                        "type": "integer"
                    },
                    "commits_year": {
                        "type": "integer"
                    },
                    "contributed_repositories": {
                        "type": "integer"
                    },
                    "open_issues": {
                        "type": "integer"
                    },
                    "pull_requests": {
                        "type": "integer"
                    },
                    "repositories": {
                        "type": "integer"
                    },
                    "stars": {
                        "type": "integer"
                    }
                },
                "required": [
                    "commits_year",
                    "pull_requests",
                    "open_issues",
                    "closed_issues",
                    "all_issues",
                    "repositories",
                    "contributed_repositories",
                    "stars"
                ]
            },
            "GithubUser": {
                "type": "object",
                "properties": {
                    "avatar_url": {
                        "type": "string"
                    },
                    "bio": {
                        "type": "string"
                    },
                    "collaborators": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "followers": {
                        "type": "integer"
                    },
                    "following": {
                        "type": "integer"
                    },
                    "html_url": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "location": {
                        "type": "string"
                    },
                    "login": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owned_private_repos": {
                        "type": "integer"
                    },
                    "private_gists": {
                        "type": "integer"
                    },
                    "public_gists": {
                        "type": "integer"
                    },
                    "public_repos": {
                        "type": "integer"
                    },
                    "total_private_repos": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    }
                },
                "additionalProperties": true,
                "required": [
                    "login",
                    "id",
                    "avatar_url",
                    "html_url",
                    "name",
                    "location",
                    "email",
                    "bio",
                    "public_repos",
                    "public_gists",
                    "followers",
                    "following",
                    "created_at",
                    "updated_at",
                    "type",
                    "total_private_repos",
                    "owned_private_repos",
                    "private_gists",
                    "collaborators"
                ]
            },
            "Label": {
                "description": "A single Label entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Label entity.",
                        "type": "integer"
                    },
                    "create_time": {
                        "description": "Time the entity was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "Label name.",
                        "type": "string",
                        "example": "golang"
                    }
                },
                "required": [
                    "id",
                    "create_time",
                    "update_time",
                    "name"
                ]
            },
            "LabelCount": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Label"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "githubrepository_count": {
                                "type": "integer"
                            },
                            "post_count": {
                                "type": "integer"
                            },
                            "total_count": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "githubrepository_count",
                            "post_count",
                            "total_count"
                        ]
                    }
                ]
            },
            "LabelCountList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/LabelCount"
                }
            },
            "LabelCreate": {
                "description": "A single Label entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "create_time": {
                        "description": "Time the entity was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "Label name.",
                        "type": "string",
                        "example": "golang"
                    },
                    "posts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "github_repositories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "LabelList": {
                "description": "A paginated result set of Label entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LabelRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "LabelRead": {
                "$ref": "#/components/schemas/Label"
            },
            "LabelSortableFields": {
                "description": "All potential sortable fields for Label entities.",
                "type": "string",
                "enum": [
                    "create_time",
                    "github_repositories.count",
                    "github_repositories.repo_id.sum",
                    "github_repositories.star_count.sum",
                    "id",
                    "name",
                    "posts.count",
                    "posts.view_count.sum",
                    "random",
                    "update_time"
                ],
                "default": "id"
            },
            "LabelUpdate": {
                "description": "A single Label entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "Label name.",
                        "type": "string",
                        "example": "golang"
                    },
                    "add_posts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_posts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "add_github_repositories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_github_repositories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "LanguageStat": {
                "properties": {
                    "hex_color": {
                        "type": "string",
                        "example": "#00ADD8"
                    },
                    "key": {
                        "type": "string",
                        "example": "Go"
                    },
                    "total": {
                        "description": "Total seconds using the language.",
                        "type": "integer",
                        "minimum": 0
                    },
                    "total_duration": {
                        "type": "string",
                        "example": "95 hrs 19 mins"
                    }
                },
                "required": [
                    "hex_color",
                    "key",
                    "total_duration",
                    "total"
                ]
            },
            "OutdatedRepositoryRelease": {
                "properties": {
                    "release": {
                        "$ref": "#/components/schemas/GithubReleaseRead"
                    },
                    "repository": {
                        "$ref": "#/components/schemas/GithubRepositoryRead"
                    }
                },
                "required": [
                    "repository",
                    "release"
                ]
            },
            "PagedResponse": {
                "type": "object",
                "properties": {
                    "page": {
                        "description": "Page which the results are associated with.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "last_page": {
                        "description": "The number of the last page of results.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 3
                    },
                    "is_last_page": {
                        "description": "If true, the current results are the last page of results.",
                        "type": "boolean",
                        "example": false
                    },
                    "total_count": {
                        "description": "The total number of results based on the provided query.",
                        "type": "integer",
                        "minimum": 0,
                        "example": 123
                    }
                },
                "required": [
                    "page",
                    "last_page",
                    "is_last_page",
                    "total_count"
                ]
            },
            "Post": {
                "description": "A single Post entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the Post entity.",
                        "type": "integer"
                    },
                    "create_time": {
                        "description": "Time the entity was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "slug": {
                        "description": "Post slug.",
                        "type": "string",
                        "example": "hello-world"
                    },
                    "title": {
                        "description": "Post title.",
                        "type": "string",
                        "example": "Hello World"
                    },
                    "content": {
                        "description": "Post content in Markdown.",
                        "type": "string",
                        "example": "## Title\n\nHello World"
                    },
                    "content_html": {
                        "description": "Generated HTML content (produced from 'content' field).",
                        "type": "string",
                        "example": "\u003ch1\u003eTitle\u003c/h1\u003e\n\n\u003cp\u003eHello World\u003c/p\u003e"
                    },
                    "summary": {
                        "description": "Post summary, which is produced from the first sentence or two of the post content.",
                        "type": "string",
                        "example": "Some example content here..."
                    },
                    "published_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "view_count": {
                        "description": "Number of times the post has been viewed.",
                        "type": "integer",
                        "default": 0
                    },
                    "public": {
                        "description": "Whether the post is public or not.",
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "id",
                    "create_time",
                    "update_time",
                    "slug",
                    "title",
                    "content",
                    "content_html",
                    "summary",
                    "published_at",
                    "view_count",
                    "public"
                ]
            },
            "PostCreate": {
                "description": "A single Post entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "create_time": {
                        "description": "Time the entity was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "slug": {
                        "description": "Post slug.",
                        "type": "string",
                        "example": "hello-world"
                    },
                    "title": {
                        "description": "Post title.",
                        "type": "string",
                        "example": "Hello World"
                    },
                    "content": {
                        "description": "Post content in Markdown.",
                        "type": "string",
                        "example": "## Title\n\nHello World"
                    },
                    "published_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "public": {
                        "description": "Whether the post is public or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "author": {
                        "type": "integer"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "slug",
                    "title",
                    "content",
                    "author"
                ]
            },
            "PostEdges": {
                "type": "object",
                "properties": {
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "labels": {
                        "description": "A list of Label entities. Limited to 1000 items. If there are more results than the limit, the results are capped and you must use the associated edge endpoint with pagination -- see also the 'EagerLoadLimit' config option.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Label"
                        },
                        "maxItems": 1000,
                        "minItems": 0
                    }
                },
                "required": [
                    "author"
                ]
            },
            "PostLabelList": {
                "description": "List of labels associated with posts (label entity type).",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/LabelRead"
                }
            },
            "PostList": {
                "description": "A paginated result set of Post entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PostRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "PostRead": {
                "description": "A single Post entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Post"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "edges": {
                                "$ref": "#/components/schemas/PostEdges"
                            }
                        },
                        "required": [
                            "edges"
                        ]
                    }
                ]
            },
            "PostSortableFields": {
                "description": "All potential sortable fields for Post entities.",
                "type": "string",
                "enum": [
                    "author.create_time",
                    "author.email",
                    "author.id",
                    "author.location",
                    "author.login",
                    "author.name",
                    "author.update_time",
                    "create_time",
                    "id",
                    "labels.count",
                    "public",
                    "published_at",
                    "random",
                    "slug",
                    "title",
                    "update_time",
                    "view_count"
                ],
                "default": "id"
            },
            "PostUpdate": {
                "description": "A single Post entity and the fields that can be created/updated.",
                "type": "object",
                "properties": {
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "slug": {
                        "description": "Post slug.",
                        "type": "string",
                        "example": "hello-world"
                    },
                    "title": {
                        "description": "Post title.",
                        "type": "string",
                        "example": "Hello World"
                    },
                    "content": {
                        "description": "Post content in Markdown.",
                        "type": "string",
                        "example": "## Title\n\nHello World"
                    },
                    "published_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "public": {
                        "description": "Whether the post is public or not.",
                        "type": "boolean",
                        "default": false
                    },
                    "author": {
                        "type": "integer"
                    },
                    "add_labels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "remove_labels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "User": {
                "description": "A single User entity.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The ID of the User entity.",
                        "type": "integer"
                    },
                    "create_time": {
                        "description": "Time the entity was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "update_time": {
                        "description": "Time the entity was last updated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "description": "Users GitHub ID.",
                        "type": "integer",
                        "example": 12345
                    },
                    "login": {
                        "description": "Users GitHub login ID (username).",
                        "type": "string",
                        "example": "lrstanley"
                    },
                    "name": {
                        "description": "Users GitHub display name.",
                        "type": "string",
                        "example": "Liam Stanley"
                    },
                    "avatar_url": {
                        "description": "GitHub avatar of the user, provided by GitHub.",
                        "type": "string",
                        "example": "https://avatars.githubusercontent.com/u/1847365?v=4"
                    },
                    "html_url": {
                        "description": "Users GitHub profile URL.",
                        "type": "string",
                        "example": "https://github.com/lrstanley"
                    },
                    "email": {
                        "description": "Users GitHub email address.",
                        "type": "string"
                    },
                    "location": {
                        "description": "Users GitHub location.",
                        "type": "string"
                    },
                    "bio": {
                        "description": "Users GitHub bio.",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "create_time",
                    "update_time",
                    "user_id",
                    "login"
                ]
            },
            "UserList": {
                "description": "A paginated result set of User entities. Includes eager-loaded edges (if any) for each entity.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagedResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UserRead"
                                }
                            }
                        },
                        "required": [
                            "content"
                        ]
                    }
                ]
            },
            "UserRead": {
                "$ref": "#/components/schemas/User"
            },
            "UserSortableFields": {
                "description": "All potential sortable fields for User entities.",
                "type": "string",
                "enum": [
                    "create_time",
                    "email",
                    "id",
                    "location",
                    "login",
                    "name",
                    "posts.count",
                    "posts.view_count.sum",
                    "random",
                    "update_time"
                ],
                "default": "id"
            },
            "VersionInfo": {
                "type": "object",
                "properties": {
                    "arch": {
                        "description": "CPU Architecture for this build.",
                        "type": "string",
                        "example": "amd64"
                    },
                    "build_commit": {
                        "description": "VCS commit SHA.",
                        "type": "string"
                    },
                    "build_date": {
                        "description": "VCS commit date.",
                        "type": "string"
                    },
                    "build_version": {
                        "description": "Build version.",
                        "type": "string",
                        "example": "v1.0.0"
                    },
                    "command": {
                        "description": "Executable name where the command was called from.",
                        "type": "string",
                        "example": "httpserver"
                    },
                    "go_version": {
                        "description": "Version of Go that produced this binary.",
                        "type": "string",
                        "example": "go1.20.3"
                    },
                    "links": {
                        "description": "Links to other resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VersionLink"
                        }
                    },
                    "name": {
                        "description": "Name of cli tool.",
                        "type": "string",
                        "example": "github.com/lrstanley/entrest"
                    },
                    "os": {
                        "description": "Operating system for this build.",
                        "type": "string",
                        "example": "linux"
                    }
                },
                "required": [
                    "arch",
                    "build_commit",
                    "build_date",
                    "build_version",
                    "command",
                    "go_version",
                    "name",
                    "os",
                    "links"
                ]
            },
            "VersionLink": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the link.",
                        "type": "string",
                        "example": "github"
                    },
                    "url": {
                        "description": "URL of the link.",
                        "type": "string",
                        "example": "https://github.com/lrstanley/liam.sh"
                    }
                },
                "required": [
                    "name",
                    "url"
                ]
            }
        },
        "responses": {
            "ErrorBadRequest": {
                "description": "Bad Request (http status code 400)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorBadRequest"
                        }
                    }
                }
            },
            "ErrorConflict": {
                "description": "Conflict (http status code 409)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorConflict"
                        }
                    }
                }
            },
            "ErrorForbidden": {
                "description": "Forbidden (http status code 403)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorForbidden"
                        }
                    }
                }
            },
            "ErrorInternalServerError": {
                "description": "Internal Server Error (http status code 500)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInternalServerError"
                        }
                    }
                }
            },
            "ErrorNotFound": {
                "description": "Not Found (http status code 404)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorNotFound"
                        }
                    }
                }
            },
            "ErrorTooManyRequests": {
                "description": "Too Many Requests (http status code 429)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorTooManyRequests"
                        }
                    }
                }
            },
            "ErrorUnauthorized": {
                "description": "Unauthorized (http status code 401)",
                "headers": {
                    "X-Ratelimit-Limit": {
                        "$ref": "#/components/headers/X-Ratelimit-Limit"
                    },
                    "X-Ratelimit-Remaining": {
                        "$ref": "#/components/headers/X-Ratelimit-Remaining"
                    },
                    "X-Ratelimit-Reset": {
                        "$ref": "#/components/headers/X-Ratelimit-Reset"
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorUnauthorized"
                        }
                    }
                }
            }
        },
        "parameters": {
            "EdgeAssetAssetIDEQ": {
                "name": "asset.assetID.eq",
                "in": "query",
                "description": "Filters field \"asset_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetAssetIDNEQ": {
                "name": "asset.assetID.neq",
                "in": "query",
                "description": "Filters field \"asset_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetCreatedAtEQ": {
                "name": "asset.createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetCreatedAtGT": {
                "name": "asset.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetCreatedAtLT": {
                "name": "asset.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetCreatedAtNEQ": {
                "name": "asset.createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetDownloadCountGT": {
                "name": "asset.downloadCount.gt",
                "in": "query",
                "description": "Filters field \"download_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetDownloadCountLT": {
                "name": "asset.downloadCount.lt",
                "in": "query",
                "description": "Filters field \"download_count\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetLabelContains": {
                "name": "asset.label.has",
                "in": "query",
                "description": "Filters field \"label\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelContainsFold": {
                "name": "asset.label.ihas",
                "in": "query",
                "description": "Filters field \"label\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelEQ": {
                "name": "asset.label.eq",
                "in": "query",
                "description": "Filters field \"label\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelEqualFold": {
                "name": "asset.label.ieq",
                "in": "query",
                "description": "Filters field \"label\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelHasPrefix": {
                "name": "asset.label.prefix",
                "in": "query",
                "description": "Filters field \"label\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelHasSuffix": {
                "name": "asset.label.suffix",
                "in": "query",
                "description": "Filters field \"label\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelIn": {
                "name": "asset.label.in",
                "in": "query",
                "description": "Filters field \"label\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAssetLabelIsNil": {
                "name": "asset.label.null",
                "in": "query",
                "description": "Filters field \"label\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeAssetLabelNEQ": {
                "name": "asset.label.neq",
                "in": "query",
                "description": "Filters field \"label\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetLabelNotIn": {
                "name": "asset.label.notIn",
                "in": "query",
                "description": "Filters field \"label\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAssetNameContains": {
                "name": "asset.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameContainsFold": {
                "name": "asset.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameEQ": {
                "name": "asset.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameEqualFold": {
                "name": "asset.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameHasPrefix": {
                "name": "asset.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameHasSuffix": {
                "name": "asset.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameIn": {
                "name": "asset.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAssetNameNEQ": {
                "name": "asset.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAssetNameNotIn": {
                "name": "asset.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAssetSizeGT": {
                "name": "asset.size.gt",
                "in": "query",
                "description": "Filters field \"size\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetSizeLT": {
                "name": "asset.size.lt",
                "in": "query",
                "description": "Filters field \"size\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeAssetUpdatedAtEQ": {
                "name": "asset.updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetUpdatedAtGT": {
                "name": "asset.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetUpdatedAtIsNil": {
                "name": "asset.updatedAt.null",
                "in": "query",
                "description": "Filters field \"updated_at\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeAssetUpdatedAtLT": {
                "name": "asset.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAssetUpdatedAtNEQ": {
                "name": "asset.updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorCreateTimeEQ": {
                "name": "author.createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorCreateTimeGT": {
                "name": "author.createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorCreateTimeLT": {
                "name": "author.createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorCreateTimeNEQ": {
                "name": "author.createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorEmailContains": {
                "name": "author.email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailContainsFold": {
                "name": "author.email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailEQ": {
                "name": "author.email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailEqualFold": {
                "name": "author.email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailHasPrefix": {
                "name": "author.email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailHasSuffix": {
                "name": "author.email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailIn": {
                "name": "author.email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorEmailIsNil": {
                "name": "author.email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeAuthorEmailNEQ": {
                "name": "author.email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorEmailNotIn": {
                "name": "author.email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorLocationContains": {
                "name": "author.location.has",
                "in": "query",
                "description": "Filters field \"location\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationContainsFold": {
                "name": "author.location.ihas",
                "in": "query",
                "description": "Filters field \"location\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationEQ": {
                "name": "author.location.eq",
                "in": "query",
                "description": "Filters field \"location\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationEqualFold": {
                "name": "author.location.ieq",
                "in": "query",
                "description": "Filters field \"location\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationHasPrefix": {
                "name": "author.location.prefix",
                "in": "query",
                "description": "Filters field \"location\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationHasSuffix": {
                "name": "author.location.suffix",
                "in": "query",
                "description": "Filters field \"location\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationIn": {
                "name": "author.location.in",
                "in": "query",
                "description": "Filters field \"location\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorLocationIsNil": {
                "name": "author.location.null",
                "in": "query",
                "description": "Filters field \"location\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeAuthorLocationNEQ": {
                "name": "author.location.neq",
                "in": "query",
                "description": "Filters field \"location\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLocationNotIn": {
                "name": "author.location.notIn",
                "in": "query",
                "description": "Filters field \"location\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorLoginContains": {
                "name": "author.login.has",
                "in": "query",
                "description": "Filters field \"login\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginContainsFold": {
                "name": "author.login.ihas",
                "in": "query",
                "description": "Filters field \"login\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginEQ": {
                "name": "author.login.eq",
                "in": "query",
                "description": "Filters field \"login\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginEqualFold": {
                "name": "author.login.ieq",
                "in": "query",
                "description": "Filters field \"login\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginHasPrefix": {
                "name": "author.login.prefix",
                "in": "query",
                "description": "Filters field \"login\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginHasSuffix": {
                "name": "author.login.suffix",
                "in": "query",
                "description": "Filters field \"login\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginIn": {
                "name": "author.login.in",
                "in": "query",
                "description": "Filters field \"login\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorLoginNEQ": {
                "name": "author.login.neq",
                "in": "query",
                "description": "Filters field \"login\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorLoginNotIn": {
                "name": "author.login.notIn",
                "in": "query",
                "description": "Filters field \"login\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorNameContains": {
                "name": "author.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameContainsFold": {
                "name": "author.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameEQ": {
                "name": "author.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameEqualFold": {
                "name": "author.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameHasPrefix": {
                "name": "author.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameHasSuffix": {
                "name": "author.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameIn": {
                "name": "author.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorNameIsNil": {
                "name": "author.name.null",
                "in": "query",
                "description": "Filters field \"name\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeAuthorNameNEQ": {
                "name": "author.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeAuthorNameNotIn": {
                "name": "author.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeAuthorUpdateTimeEQ": {
                "name": "author.updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorUpdateTimeGT": {
                "name": "author.updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorUpdateTimeLT": {
                "name": "author.updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorUpdateTimeNEQ": {
                "name": "author.updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeAuthorUserIDEQ": {
                "name": "author.userID.eq",
                "in": "query",
                "description": "Filters field \"user_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeAuthorUserIDIn": {
                "name": "author.userID.in",
                "in": "query",
                "description": "Filters field \"user_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeAuthorUserIDNEQ": {
                "name": "author.userID.neq",
                "in": "query",
                "description": "Filters field \"user_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeAuthorUserIDNotIn": {
                "name": "author.userID.notIn",
                "in": "query",
                "description": "Filters field \"user_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "EdgeGithubRepositoryArchivedEQ": {
                "name": "githubRepository.archived.eq",
                "in": "query",
                "description": "Filters field \"archived\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryCreatedAtEQ": {
                "name": "githubRepository.createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryCreatedAtGT": {
                "name": "githubRepository.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryCreatedAtLT": {
                "name": "githubRepository.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryCreatedAtNEQ": {
                "name": "githubRepository.createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryDefaultBranchContains": {
                "name": "githubRepository.defaultBranch.has",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchContainsFold": {
                "name": "githubRepository.defaultBranch.ihas",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchEQ": {
                "name": "githubRepository.defaultBranch.eq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchEqualFold": {
                "name": "githubRepository.defaultBranch.ieq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchHasPrefix": {
                "name": "githubRepository.defaultBranch.prefix",
                "in": "query",
                "description": "Filters field \"default_branch\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchHasSuffix": {
                "name": "githubRepository.defaultBranch.suffix",
                "in": "query",
                "description": "Filters field \"default_branch\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchIn": {
                "name": "githubRepository.defaultBranch.in",
                "in": "query",
                "description": "Filters field \"default_branch\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryDefaultBranchNEQ": {
                "name": "githubRepository.defaultBranch.neq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDefaultBranchNotIn": {
                "name": "githubRepository.defaultBranch.notIn",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryDescriptionContains": {
                "name": "githubRepository.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDescriptionContainsFold": {
                "name": "githubRepository.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryDescriptionIsNil": {
                "name": "githubRepository.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryForkEQ": {
                "name": "githubRepository.fork.eq",
                "in": "query",
                "description": "Filters field \"fork\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryFullNameContains": {
                "name": "githubRepository.fullName.has",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameContainsFold": {
                "name": "githubRepository.fullName.ihas",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameEQ": {
                "name": "githubRepository.fullName.eq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameEqualFold": {
                "name": "githubRepository.fullName.ieq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameHasPrefix": {
                "name": "githubRepository.fullName.prefix",
                "in": "query",
                "description": "Filters field \"full_name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameHasSuffix": {
                "name": "githubRepository.fullName.suffix",
                "in": "query",
                "description": "Filters field \"full_name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameIn": {
                "name": "githubRepository.fullName.in",
                "in": "query",
                "description": "Filters field \"full_name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryFullNameNEQ": {
                "name": "githubRepository.fullName.neq",
                "in": "query",
                "description": "Filters field \"full_name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryFullNameNotIn": {
                "name": "githubRepository.fullName.notIn",
                "in": "query",
                "description": "Filters field \"full_name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryHasIssuesEQ": {
                "name": "githubRepository.hasIssues.eq",
                "in": "query",
                "description": "Filters field \"has_issues\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryIsTemplateEQ": {
                "name": "githubRepository.isTemplate.eq",
                "in": "query",
                "description": "Filters field \"is_template\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryNameContains": {
                "name": "githubRepository.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameContainsFold": {
                "name": "githubRepository.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameEQ": {
                "name": "githubRepository.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameEqualFold": {
                "name": "githubRepository.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameHasPrefix": {
                "name": "githubRepository.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameHasSuffix": {
                "name": "githubRepository.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameIn": {
                "name": "githubRepository.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryNameNEQ": {
                "name": "githubRepository.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryNameNotIn": {
                "name": "githubRepository.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryOwnerLoginContains": {
                "name": "githubRepository.ownerLogin.has",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginContainsFold": {
                "name": "githubRepository.ownerLogin.ihas",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginEQ": {
                "name": "githubRepository.ownerLogin.eq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginEqualFold": {
                "name": "githubRepository.ownerLogin.ieq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginHasPrefix": {
                "name": "githubRepository.ownerLogin.prefix",
                "in": "query",
                "description": "Filters field \"owner_login\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginHasSuffix": {
                "name": "githubRepository.ownerLogin.suffix",
                "in": "query",
                "description": "Filters field \"owner_login\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginIn": {
                "name": "githubRepository.ownerLogin.in",
                "in": "query",
                "description": "Filters field \"owner_login\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryOwnerLoginNEQ": {
                "name": "githubRepository.ownerLogin.neq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeGithubRepositoryOwnerLoginNotIn": {
                "name": "githubRepository.ownerLogin.notIn",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeGithubRepositoryPublicEQ": {
                "name": "githubRepository.public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryPushedAtIn": {
                "name": "githubRepository.pushedAt.in",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "EdgeGithubRepositoryPushedAtNotIn": {
                "name": "githubRepository.pushedAt.notIn",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "EdgeGithubRepositoryRepoIDEQ": {
                "name": "githubRepository.repoID.eq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeGithubRepositoryRepoIDNEQ": {
                "name": "githubRepository.repoID.neq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeGithubRepositoryStarCountGT": {
                "name": "githubRepository.starCount.gt",
                "in": "query",
                "description": "Filters field \"star_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeGithubRepositoryStarCountLT": {
                "name": "githubRepository.starCount.lt",
                "in": "query",
                "description": "Filters field \"star_count\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeGithubRepositoryUpdatedAtEQ": {
                "name": "githubRepository.updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryUpdatedAtGT": {
                "name": "githubRepository.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryUpdatedAtIsNil": {
                "name": "githubRepository.updatedAt.null",
                "in": "query",
                "description": "Filters field \"updated_at\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeGithubRepositoryUpdatedAtLT": {
                "name": "githubRepository.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeGithubRepositoryUpdatedAtNEQ": {
                "name": "githubRepository.updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeHasAsset": {
                "name": "has.asset",
                "in": "query",
                "description": "If true, only return entities that have a asset edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasAuthor": {
                "name": "has.author",
                "in": "query",
                "description": "If true, only return entities that have a author edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasGithubRepository": {
                "name": "has.githubRepository",
                "in": "query",
                "description": "If true, only return entities that have a github_repository edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasLabel": {
                "name": "has.label",
                "in": "query",
                "description": "If true, only return entities that have a label edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasPost": {
                "name": "has.post",
                "in": "query",
                "description": "If true, only return entities that have a post edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasRelease": {
                "name": "has.release",
                "in": "query",
                "description": "If true, only return entities that have a release edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeHasRepository": {
                "name": "has.repository",
                "in": "query",
                "description": "If true, only return entities that have a repository edge.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeLabelCreateTimeEQ": {
                "name": "label.createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelCreateTimeGT": {
                "name": "label.createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelCreateTimeLT": {
                "name": "label.createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelCreateTimeNEQ": {
                "name": "label.createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelNameContains": {
                "name": "label.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameContainsFold": {
                "name": "label.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameEQ": {
                "name": "label.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameEqualFold": {
                "name": "label.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameHasPrefix": {
                "name": "label.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameHasSuffix": {
                "name": "label.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameIn": {
                "name": "label.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeLabelNameNEQ": {
                "name": "label.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeLabelNameNotIn": {
                "name": "label.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeLabelUpdateTimeEQ": {
                "name": "label.updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelUpdateTimeGT": {
                "name": "label.updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelUpdateTimeLT": {
                "name": "label.updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeLabelUpdateTimeNEQ": {
                "name": "label.updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostContentContains": {
                "name": "post.content.has",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostContentContainsFold": {
                "name": "post.content.ihas",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostContentHTMLContains": {
                "name": "post.contentHTML.has",
                "in": "query",
                "description": "Filters field \"content_html\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostContentHTMLContainsFold": {
                "name": "post.contentHTML.ihas",
                "in": "query",
                "description": "Filters field \"content_html\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostCreateTimeEQ": {
                "name": "post.createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostCreateTimeGT": {
                "name": "post.createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostCreateTimeLT": {
                "name": "post.createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostCreateTimeNEQ": {
                "name": "post.createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostPublicEQ": {
                "name": "post.public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgePostPublishedAtEQ": {
                "name": "post.publishedAt.eq",
                "in": "query",
                "description": "Filters field \"published_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostPublishedAtGT": {
                "name": "post.publishedAt.gt",
                "in": "query",
                "description": "Filters field \"published_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostPublishedAtLT": {
                "name": "post.publishedAt.lt",
                "in": "query",
                "description": "Filters field \"published_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostPublishedAtNEQ": {
                "name": "post.publishedAt.neq",
                "in": "query",
                "description": "Filters field \"published_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostSlugEQ": {
                "name": "post.slug.eq",
                "in": "query",
                "description": "Filters field \"slug\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostSlugEqualFold": {
                "name": "post.slug.ieq",
                "in": "query",
                "description": "Filters field \"slug\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostSlugNEQ": {
                "name": "post.slug.neq",
                "in": "query",
                "description": "Filters field \"slug\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleContains": {
                "name": "post.title.has",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleContainsFold": {
                "name": "post.title.ihas",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleEQ": {
                "name": "post.title.eq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleEqualFold": {
                "name": "post.title.ieq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleHasPrefix": {
                "name": "post.title.prefix",
                "in": "query",
                "description": "Filters field \"title\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleHasSuffix": {
                "name": "post.title.suffix",
                "in": "query",
                "description": "Filters field \"title\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleIn": {
                "name": "post.title.in",
                "in": "query",
                "description": "Filters field \"title\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePostTitleNEQ": {
                "name": "post.title.neq",
                "in": "query",
                "description": "Filters field \"title\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgePostTitleNotIn": {
                "name": "post.title.notIn",
                "in": "query",
                "description": "Filters field \"title\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgePostUpdateTimeEQ": {
                "name": "post.updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostUpdateTimeGT": {
                "name": "post.updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostUpdateTimeLT": {
                "name": "post.updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostUpdateTimeNEQ": {
                "name": "post.updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgePostViewCountEQ": {
                "name": "post.viewCount.eq",
                "in": "query",
                "description": "Filters field \"view_count\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgePostViewCountGT": {
                "name": "post.viewCount.gt",
                "in": "query",
                "description": "Filters field \"view_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePostViewCountLT": {
                "name": "post.viewCount.lt",
                "in": "query",
                "description": "Filters field \"view_count\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgePostViewCountNEQ": {
                "name": "post.viewCount.neq",
                "in": "query",
                "description": "Filters field \"view_count\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "EdgeReleaseCreatedAtEQ": {
                "name": "release.createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleaseCreatedAtGT": {
                "name": "release.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleaseCreatedAtLT": {
                "name": "release.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleaseCreatedAtNEQ": {
                "name": "release.createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleaseDraftEQ": {
                "name": "release.draft.eq",
                "in": "query",
                "description": "Filters field \"draft\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeReleaseNameContains": {
                "name": "release.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameContainsFold": {
                "name": "release.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameEQ": {
                "name": "release.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameEqualFold": {
                "name": "release.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameHasPrefix": {
                "name": "release.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameHasSuffix": {
                "name": "release.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameIn": {
                "name": "release.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeReleaseNameIsNil": {
                "name": "release.name.null",
                "in": "query",
                "description": "Filters field \"name\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeReleaseNameNEQ": {
                "name": "release.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseNameNotIn": {
                "name": "release.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeReleasePrereleaseEQ": {
                "name": "release.prerelease.eq",
                "in": "query",
                "description": "Filters field \"prerelease\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeReleasePublishedAtEQ": {
                "name": "release.publishedAt.eq",
                "in": "query",
                "description": "Filters field \"published_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleasePublishedAtGT": {
                "name": "release.publishedAt.gt",
                "in": "query",
                "description": "Filters field \"published_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleasePublishedAtLT": {
                "name": "release.publishedAt.lt",
                "in": "query",
                "description": "Filters field \"published_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleasePublishedAtNEQ": {
                "name": "release.publishedAt.neq",
                "in": "query",
                "description": "Filters field \"published_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeReleaseReleaseIDEQ": {
                "name": "release.releaseID.eq",
                "in": "query",
                "description": "Filters field \"release_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeReleaseReleaseIDNEQ": {
                "name": "release.releaseID.neq",
                "in": "query",
                "description": "Filters field \"release_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeReleaseTagNameContains": {
                "name": "release.tagName.has",
                "in": "query",
                "description": "Filters field \"tag_name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameContainsFold": {
                "name": "release.tagName.ihas",
                "in": "query",
                "description": "Filters field \"tag_name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameEQ": {
                "name": "release.tagName.eq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameEqualFold": {
                "name": "release.tagName.ieq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameHasPrefix": {
                "name": "release.tagName.prefix",
                "in": "query",
                "description": "Filters field \"tag_name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameHasSuffix": {
                "name": "release.tagName.suffix",
                "in": "query",
                "description": "Filters field \"tag_name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameIn": {
                "name": "release.tagName.in",
                "in": "query",
                "description": "Filters field \"tag_name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeReleaseTagNameNEQ": {
                "name": "release.tagName.neq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTagNameNotIn": {
                "name": "release.tagName.notIn",
                "in": "query",
                "description": "Filters field \"tag_name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeReleaseTargetCommitishContains": {
                "name": "release.targetCommitish.has",
                "in": "query",
                "description": "Filters field \"target_commitish\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishContainsFold": {
                "name": "release.targetCommitish.ihas",
                "in": "query",
                "description": "Filters field \"target_commitish\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishEQ": {
                "name": "release.targetCommitish.eq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishEqualFold": {
                "name": "release.targetCommitish.ieq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishHasPrefix": {
                "name": "release.targetCommitish.prefix",
                "in": "query",
                "description": "Filters field \"target_commitish\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishHasSuffix": {
                "name": "release.targetCommitish.suffix",
                "in": "query",
                "description": "Filters field \"target_commitish\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishIn": {
                "name": "release.targetCommitish.in",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeReleaseTargetCommitishNEQ": {
                "name": "release.targetCommitish.neq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeReleaseTargetCommitishNotIn": {
                "name": "release.targetCommitish.notIn",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryArchivedEQ": {
                "name": "repository.archived.eq",
                "in": "query",
                "description": "Filters field \"archived\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryCreatedAtEQ": {
                "name": "repository.createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryCreatedAtGT": {
                "name": "repository.createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryCreatedAtLT": {
                "name": "repository.createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryCreatedAtNEQ": {
                "name": "repository.createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryDefaultBranchContains": {
                "name": "repository.defaultBranch.has",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchContainsFold": {
                "name": "repository.defaultBranch.ihas",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchEQ": {
                "name": "repository.defaultBranch.eq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchEqualFold": {
                "name": "repository.defaultBranch.ieq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchHasPrefix": {
                "name": "repository.defaultBranch.prefix",
                "in": "query",
                "description": "Filters field \"default_branch\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchHasSuffix": {
                "name": "repository.defaultBranch.suffix",
                "in": "query",
                "description": "Filters field \"default_branch\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchIn": {
                "name": "repository.defaultBranch.in",
                "in": "query",
                "description": "Filters field \"default_branch\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryDefaultBranchNEQ": {
                "name": "repository.defaultBranch.neq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDefaultBranchNotIn": {
                "name": "repository.defaultBranch.notIn",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryDescriptionContains": {
                "name": "repository.description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDescriptionContainsFold": {
                "name": "repository.description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryDescriptionIsNil": {
                "name": "repository.description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryForkEQ": {
                "name": "repository.fork.eq",
                "in": "query",
                "description": "Filters field \"fork\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryFullNameContains": {
                "name": "repository.fullName.has",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameContainsFold": {
                "name": "repository.fullName.ihas",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameEQ": {
                "name": "repository.fullName.eq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameEqualFold": {
                "name": "repository.fullName.ieq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameHasPrefix": {
                "name": "repository.fullName.prefix",
                "in": "query",
                "description": "Filters field \"full_name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameHasSuffix": {
                "name": "repository.fullName.suffix",
                "in": "query",
                "description": "Filters field \"full_name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameIn": {
                "name": "repository.fullName.in",
                "in": "query",
                "description": "Filters field \"full_name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryFullNameNEQ": {
                "name": "repository.fullName.neq",
                "in": "query",
                "description": "Filters field \"full_name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryFullNameNotIn": {
                "name": "repository.fullName.notIn",
                "in": "query",
                "description": "Filters field \"full_name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryHasIssuesEQ": {
                "name": "repository.hasIssues.eq",
                "in": "query",
                "description": "Filters field \"has_issues\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryIsTemplateEQ": {
                "name": "repository.isTemplate.eq",
                "in": "query",
                "description": "Filters field \"is_template\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryNameContains": {
                "name": "repository.name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameContainsFold": {
                "name": "repository.name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameEQ": {
                "name": "repository.name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameEqualFold": {
                "name": "repository.name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameHasPrefix": {
                "name": "repository.name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameHasSuffix": {
                "name": "repository.name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameIn": {
                "name": "repository.name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryNameNEQ": {
                "name": "repository.name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryNameNotIn": {
                "name": "repository.name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryOwnerLoginContains": {
                "name": "repository.ownerLogin.has",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginContainsFold": {
                "name": "repository.ownerLogin.ihas",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginEQ": {
                "name": "repository.ownerLogin.eq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginEqualFold": {
                "name": "repository.ownerLogin.ieq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginHasPrefix": {
                "name": "repository.ownerLogin.prefix",
                "in": "query",
                "description": "Filters field \"owner_login\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginHasSuffix": {
                "name": "repository.ownerLogin.suffix",
                "in": "query",
                "description": "Filters field \"owner_login\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginIn": {
                "name": "repository.ownerLogin.in",
                "in": "query",
                "description": "Filters field \"owner_login\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryOwnerLoginNEQ": {
                "name": "repository.ownerLogin.neq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "EdgeRepositoryOwnerLoginNotIn": {
                "name": "repository.ownerLogin.notIn",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "EdgeRepositoryPublicEQ": {
                "name": "repository.public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryPushedAtIn": {
                "name": "repository.pushedAt.in",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "EdgeRepositoryPushedAtNotIn": {
                "name": "repository.pushedAt.notIn",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "EdgeRepositoryRepoIDEQ": {
                "name": "repository.repoID.eq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeRepositoryRepoIDNEQ": {
                "name": "repository.repoID.neq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "EdgeRepositoryStarCountGT": {
                "name": "repository.starCount.gt",
                "in": "query",
                "description": "Filters field \"star_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeRepositoryStarCountLT": {
                "name": "repository.starCount.lt",
                "in": "query",
                "description": "Filters field \"star_count\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "EdgeRepositoryUpdatedAtEQ": {
                "name": "repository.updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryUpdatedAtGT": {
                "name": "repository.updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryUpdatedAtIsNil": {
                "name": "repository.updatedAt.null",
                "in": "query",
                "description": "Filters field \"updated_at\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "EdgeRepositoryUpdatedAtLT": {
                "name": "repository.updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "EdgeRepositoryUpdatedAtNEQ": {
                "name": "repository.updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "FilterOperation": {
                "name": "filter_op",
                "in": "query",
                "description": "Filter operation to use.",
                "schema": {
                    "$ref": "#/components/schemas/FilterOperation"
                }
            },
            "GithubAssetAssetIDEQ": {
                "name": "assetID.eq",
                "in": "query",
                "description": "Filters field \"asset_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetAssetIDNEQ": {
                "name": "assetID.neq",
                "in": "query",
                "description": "Filters field \"asset_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetCreatedAtEQ": {
                "name": "createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetCreatedAtNEQ": {
                "name": "createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetDownloadCountGT": {
                "name": "downloadCount.gt",
                "in": "query",
                "description": "Filters field \"download_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetDownloadCountLT": {
                "name": "downloadCount.lt",
                "in": "query",
                "description": "Filters field \"download_count\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetID": {
                "name": "githubassetID",
                "in": "path",
                "description": "The ID of the GithubAsset to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "GithubAssetLabelContains": {
                "name": "label.has",
                "in": "query",
                "description": "Filters field \"label\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelContainsFold": {
                "name": "label.ihas",
                "in": "query",
                "description": "Filters field \"label\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelEQ": {
                "name": "label.eq",
                "in": "query",
                "description": "Filters field \"label\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelEqualFold": {
                "name": "label.ieq",
                "in": "query",
                "description": "Filters field \"label\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelHasPrefix": {
                "name": "label.prefix",
                "in": "query",
                "description": "Filters field \"label\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelHasSuffix": {
                "name": "label.suffix",
                "in": "query",
                "description": "Filters field \"label\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelIn": {
                "name": "label.in",
                "in": "query",
                "description": "Filters field \"label\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubAssetLabelIsNil": {
                "name": "label.null",
                "in": "query",
                "description": "Filters field \"label\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubAssetLabelNEQ": {
                "name": "label.neq",
                "in": "query",
                "description": "Filters field \"label\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetLabelNotIn": {
                "name": "label.notIn",
                "in": "query",
                "description": "Filters field \"label\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubAssetNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubAssetNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubAssetNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubAssetSizeGT": {
                "name": "size.gt",
                "in": "query",
                "description": "Filters field \"size\" to be greater than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetSizeLT": {
                "name": "size.lt",
                "in": "query",
                "description": "Filters field \"size\" to be less than the provided value.",
                "schema": {
                    "type": "number",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubAssetUpdatedAtEQ": {
                "name": "updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetUpdatedAtIsNil": {
                "name": "updatedAt.null",
                "in": "query",
                "description": "Filters field \"updated_at\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubAssetUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubAssetUpdatedAtNEQ": {
                "name": "updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubEventActorIDEQ": {
                "name": "actorID.eq",
                "in": "query",
                "description": "Filters field \"actor_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubEventActorIDNEQ": {
                "name": "actorID.neq",
                "in": "query",
                "description": "Filters field \"actor_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubEventCreatedAtEQ": {
                "name": "createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubEventCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubEventCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubEventCreatedAtNEQ": {
                "name": "createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubEventEventIDEQ": {
                "name": "eventID.eq",
                "in": "query",
                "description": "Filters field \"event_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventIDEqualFold": {
                "name": "eventID.ieq",
                "in": "query",
                "description": "Filters field \"event_id\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventIDNEQ": {
                "name": "eventID.neq",
                "in": "query",
                "description": "Filters field \"event_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeContains": {
                "name": "eventType.has",
                "in": "query",
                "description": "Filters field \"event_type\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeContainsFold": {
                "name": "eventType.ihas",
                "in": "query",
                "description": "Filters field \"event_type\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeEQ": {
                "name": "eventType.eq",
                "in": "query",
                "description": "Filters field \"event_type\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeEqualFold": {
                "name": "eventType.ieq",
                "in": "query",
                "description": "Filters field \"event_type\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeHasPrefix": {
                "name": "eventType.prefix",
                "in": "query",
                "description": "Filters field \"event_type\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeHasSuffix": {
                "name": "eventType.suffix",
                "in": "query",
                "description": "Filters field \"event_type\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeIn": {
                "name": "eventType.in",
                "in": "query",
                "description": "Filters field \"event_type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubEventEventTypeNEQ": {
                "name": "eventType.neq",
                "in": "query",
                "description": "Filters field \"event_type\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubEventEventTypeNotIn": {
                "name": "eventType.notIn",
                "in": "query",
                "description": "Filters field \"event_type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubEventID": {
                "name": "githubeventID",
                "in": "path",
                "description": "The ID of the GithubEvent to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "GithubEventPublicEQ": {
                "name": "public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubEventRepoIDEQ": {
                "name": "repoID.eq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubEventRepoIDNEQ": {
                "name": "repoID.neq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubGistContentContains": {
                "name": "content.has",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistContentContainsFold": {
                "name": "content.ihas",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistCreatedAtEQ": {
                "name": "createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistCreatedAtNEQ": {
                "name": "createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistDescriptionContains": {
                "name": "description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistDescriptionContainsFold": {
                "name": "description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistDescriptionIsNil": {
                "name": "description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubGistGistIDEQ": {
                "name": "gistID.eq",
                "in": "query",
                "description": "Filters field \"gist_id\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistGistIDEqualFold": {
                "name": "gistID.ieq",
                "in": "query",
                "description": "Filters field \"gist_id\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistGistIDNEQ": {
                "name": "gistID.neq",
                "in": "query",
                "description": "Filters field \"gist_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistID": {
                "name": "githubgistID",
                "in": "path",
                "description": "The ID of the GithubGist to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "GithubGistLanguageContains": {
                "name": "language.has",
                "in": "query",
                "description": "Filters field \"language\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageContainsFold": {
                "name": "language.ihas",
                "in": "query",
                "description": "Filters field \"language\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageEQ": {
                "name": "language.eq",
                "in": "query",
                "description": "Filters field \"language\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageEqualFold": {
                "name": "language.ieq",
                "in": "query",
                "description": "Filters field \"language\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageHasPrefix": {
                "name": "language.prefix",
                "in": "query",
                "description": "Filters field \"language\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageHasSuffix": {
                "name": "language.suffix",
                "in": "query",
                "description": "Filters field \"language\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageIn": {
                "name": "language.in",
                "in": "query",
                "description": "Filters field \"language\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistLanguageIsNil": {
                "name": "language.null",
                "in": "query",
                "description": "Filters field \"language\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubGistLanguageNEQ": {
                "name": "language.neq",
                "in": "query",
                "description": "Filters field \"language\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistLanguageNotIn": {
                "name": "language.notIn",
                "in": "query",
                "description": "Filters field \"language\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistPublicEQ": {
                "name": "public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubGistSizeEQ": {
                "name": "size.eq",
                "in": "query",
                "description": "Filters field \"size\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubGistSizeNEQ": {
                "name": "size.neq",
                "in": "query",
                "description": "Filters field \"size\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubGistTypeContains": {
                "name": "type.has",
                "in": "query",
                "description": "Filters field \"type\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeContainsFold": {
                "name": "type.ihas",
                "in": "query",
                "description": "Filters field \"type\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeEQ": {
                "name": "type.eq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeEqualFold": {
                "name": "type.ieq",
                "in": "query",
                "description": "Filters field \"type\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeHasPrefix": {
                "name": "type.prefix",
                "in": "query",
                "description": "Filters field \"type\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeHasSuffix": {
                "name": "type.suffix",
                "in": "query",
                "description": "Filters field \"type\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeIn": {
                "name": "type.in",
                "in": "query",
                "description": "Filters field \"type\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistTypeNEQ": {
                "name": "type.neq",
                "in": "query",
                "description": "Filters field \"type\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubGistTypeNotIn": {
                "name": "type.notIn",
                "in": "query",
                "description": "Filters field \"type\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubGistUpdatedAtEQ": {
                "name": "updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubGistUpdatedAtNEQ": {
                "name": "updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseCreatedAtEQ": {
                "name": "createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseCreatedAtNEQ": {
                "name": "createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseDraftEQ": {
                "name": "draft.eq",
                "in": "query",
                "description": "Filters field \"draft\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubReleaseID": {
                "name": "githubreleaseID",
                "in": "path",
                "description": "The ID of the GithubRelease to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "GithubReleaseNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubReleaseNameIsNil": {
                "name": "name.null",
                "in": "query",
                "description": "Filters field \"name\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubReleaseNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubReleasePrereleaseEQ": {
                "name": "prerelease.eq",
                "in": "query",
                "description": "Filters field \"prerelease\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubReleasePublishedAtEQ": {
                "name": "publishedAt.eq",
                "in": "query",
                "description": "Filters field \"published_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleasePublishedAtGT": {
                "name": "publishedAt.gt",
                "in": "query",
                "description": "Filters field \"published_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleasePublishedAtLT": {
                "name": "publishedAt.lt",
                "in": "query",
                "description": "Filters field \"published_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleasePublishedAtNEQ": {
                "name": "publishedAt.neq",
                "in": "query",
                "description": "Filters field \"published_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubReleaseReleaseIDEQ": {
                "name": "releaseID.eq",
                "in": "query",
                "description": "Filters field \"release_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubReleaseReleaseIDNEQ": {
                "name": "releaseID.neq",
                "in": "query",
                "description": "Filters field \"release_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubReleaseTagNameContains": {
                "name": "tagName.has",
                "in": "query",
                "description": "Filters field \"tag_name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameContainsFold": {
                "name": "tagName.ihas",
                "in": "query",
                "description": "Filters field \"tag_name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameEQ": {
                "name": "tagName.eq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameEqualFold": {
                "name": "tagName.ieq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameHasPrefix": {
                "name": "tagName.prefix",
                "in": "query",
                "description": "Filters field \"tag_name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameHasSuffix": {
                "name": "tagName.suffix",
                "in": "query",
                "description": "Filters field \"tag_name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameIn": {
                "name": "tagName.in",
                "in": "query",
                "description": "Filters field \"tag_name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubReleaseTagNameNEQ": {
                "name": "tagName.neq",
                "in": "query",
                "description": "Filters field \"tag_name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTagNameNotIn": {
                "name": "tagName.notIn",
                "in": "query",
                "description": "Filters field \"tag_name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubReleaseTargetCommitishContains": {
                "name": "targetCommitish.has",
                "in": "query",
                "description": "Filters field \"target_commitish\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishContainsFold": {
                "name": "targetCommitish.ihas",
                "in": "query",
                "description": "Filters field \"target_commitish\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishEQ": {
                "name": "targetCommitish.eq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishEqualFold": {
                "name": "targetCommitish.ieq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishHasPrefix": {
                "name": "targetCommitish.prefix",
                "in": "query",
                "description": "Filters field \"target_commitish\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishHasSuffix": {
                "name": "targetCommitish.suffix",
                "in": "query",
                "description": "Filters field \"target_commitish\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishIn": {
                "name": "targetCommitish.in",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubReleaseTargetCommitishNEQ": {
                "name": "targetCommitish.neq",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubReleaseTargetCommitishNotIn": {
                "name": "targetCommitish.notIn",
                "in": "query",
                "description": "Filters field \"target_commitish\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryArchivedEQ": {
                "name": "archived.eq",
                "in": "query",
                "description": "Filters field \"archived\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryCreatedAtEQ": {
                "name": "createdAt.eq",
                "in": "query",
                "description": "Filters field \"created_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryCreatedAtGT": {
                "name": "createdAt.gt",
                "in": "query",
                "description": "Filters field \"created_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryCreatedAtLT": {
                "name": "createdAt.lt",
                "in": "query",
                "description": "Filters field \"created_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryCreatedAtNEQ": {
                "name": "createdAt.neq",
                "in": "query",
                "description": "Filters field \"created_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryDefaultBranchContains": {
                "name": "defaultBranch.has",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchContainsFold": {
                "name": "defaultBranch.ihas",
                "in": "query",
                "description": "Filters field \"default_branch\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchEQ": {
                "name": "defaultBranch.eq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchEqualFold": {
                "name": "defaultBranch.ieq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchHasPrefix": {
                "name": "defaultBranch.prefix",
                "in": "query",
                "description": "Filters field \"default_branch\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchHasSuffix": {
                "name": "defaultBranch.suffix",
                "in": "query",
                "description": "Filters field \"default_branch\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchIn": {
                "name": "defaultBranch.in",
                "in": "query",
                "description": "Filters field \"default_branch\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryDefaultBranchNEQ": {
                "name": "defaultBranch.neq",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDefaultBranchNotIn": {
                "name": "defaultBranch.notIn",
                "in": "query",
                "description": "Filters field \"default_branch\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryDescriptionContains": {
                "name": "description.has",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDescriptionContainsFold": {
                "name": "description.ihas",
                "in": "query",
                "description": "Filters field \"description\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryDescriptionIsNil": {
                "name": "description.null",
                "in": "query",
                "description": "Filters field \"description\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryForkEQ": {
                "name": "fork.eq",
                "in": "query",
                "description": "Filters field \"fork\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryFullNameContains": {
                "name": "fullName.has",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameContainsFold": {
                "name": "fullName.ihas",
                "in": "query",
                "description": "Filters field \"full_name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameEQ": {
                "name": "fullName.eq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameEqualFold": {
                "name": "fullName.ieq",
                "in": "query",
                "description": "Filters field \"full_name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameHasPrefix": {
                "name": "fullName.prefix",
                "in": "query",
                "description": "Filters field \"full_name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameHasSuffix": {
                "name": "fullName.suffix",
                "in": "query",
                "description": "Filters field \"full_name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameIn": {
                "name": "fullName.in",
                "in": "query",
                "description": "Filters field \"full_name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryFullNameNEQ": {
                "name": "fullName.neq",
                "in": "query",
                "description": "Filters field \"full_name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryFullNameNotIn": {
                "name": "fullName.notIn",
                "in": "query",
                "description": "Filters field \"full_name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryHasIssuesEQ": {
                "name": "hasIssues.eq",
                "in": "query",
                "description": "Filters field \"has_issues\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryID": {
                "name": "githubrepositoryID",
                "in": "path",
                "description": "The ID of the GithubRepository to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "GithubRepositoryIsTemplateEQ": {
                "name": "isTemplate.eq",
                "in": "query",
                "description": "Filters field \"is_template\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryOwnerLoginContains": {
                "name": "ownerLogin.has",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginContainsFold": {
                "name": "ownerLogin.ihas",
                "in": "query",
                "description": "Filters field \"owner_login\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginEQ": {
                "name": "ownerLogin.eq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginEqualFold": {
                "name": "ownerLogin.ieq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginHasPrefix": {
                "name": "ownerLogin.prefix",
                "in": "query",
                "description": "Filters field \"owner_login\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginHasSuffix": {
                "name": "ownerLogin.suffix",
                "in": "query",
                "description": "Filters field \"owner_login\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginIn": {
                "name": "ownerLogin.in",
                "in": "query",
                "description": "Filters field \"owner_login\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryOwnerLoginNEQ": {
                "name": "ownerLogin.neq",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "GithubRepositoryOwnerLoginNotIn": {
                "name": "ownerLogin.notIn",
                "in": "query",
                "description": "Filters field \"owner_login\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "GithubRepositoryPublicEQ": {
                "name": "public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryPushedAtIn": {
                "name": "pushedAt.in",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "GithubRepositoryPushedAtNotIn": {
                "name": "pushedAt.notIn",
                "in": "query",
                "description": "Filters field \"pushed_at\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "GithubRepositoryRepoIDEQ": {
                "name": "repoID.eq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubRepositoryRepoIDNEQ": {
                "name": "repoID.neq",
                "in": "query",
                "description": "Filters field \"repo_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808
                }
            },
            "GithubRepositoryStarCountGT": {
                "name": "starCount.gt",
                "in": "query",
                "description": "Filters field \"star_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "GithubRepositoryStarCountLT": {
                "name": "starCount.lt",
                "in": "query",
                "description": "Filters field \"star_count\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "GithubRepositoryUpdatedAtEQ": {
                "name": "updatedAt.eq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryUpdatedAtGT": {
                "name": "updatedAt.gt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryUpdatedAtIsNil": {
                "name": "updatedAt.null",
                "in": "query",
                "description": "Filters field \"updated_at\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "GithubRepositoryUpdatedAtLT": {
                "name": "updatedAt.lt",
                "in": "query",
                "description": "Filters field \"updated_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "GithubRepositoryUpdatedAtNEQ": {
                "name": "updatedAt.neq",
                "in": "query",
                "description": "Filters field \"updated_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelCreateTimeEQ": {
                "name": "createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelCreateTimeGT": {
                "name": "createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelCreateTimeLT": {
                "name": "createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelCreateTimeNEQ": {
                "name": "createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelID": {
                "name": "labelID",
                "in": "path",
                "description": "The ID of the Label to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "LabelNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "LabelNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "LabelNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "LabelUpdateTimeEQ": {
                "name": "updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelUpdateTimeGT": {
                "name": "updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelUpdateTimeLT": {
                "name": "updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "LabelUpdateTimeNEQ": {
                "name": "updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "The page number to retrieve.",
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                }
            },
            "PostContentContains": {
                "name": "content.has",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostContentContainsFold": {
                "name": "content.ihas",
                "in": "query",
                "description": "Filters field \"content\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PostContentHTMLContains": {
                "name": "contentHTML.has",
                "in": "query",
                "description": "Filters field \"content_html\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostContentHTMLContainsFold": {
                "name": "contentHTML.ihas",
                "in": "query",
                "description": "Filters field \"content_html\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PostCreateTimeEQ": {
                "name": "createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostCreateTimeGT": {
                "name": "createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostCreateTimeLT": {
                "name": "createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostCreateTimeNEQ": {
                "name": "createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostID": {
                "name": "postID",
                "in": "path",
                "description": "The ID of the Post to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "PostPublicEQ": {
                "name": "public.eq",
                "in": "query",
                "description": "Filters field \"public\" to be equal to the provided value.",
                "schema": {
                    "type": "boolean"
                }
            },
            "PostPublishedAtEQ": {
                "name": "publishedAt.eq",
                "in": "query",
                "description": "Filters field \"published_at\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostPublishedAtGT": {
                "name": "publishedAt.gt",
                "in": "query",
                "description": "Filters field \"published_at\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostPublishedAtLT": {
                "name": "publishedAt.lt",
                "in": "query",
                "description": "Filters field \"published_at\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostPublishedAtNEQ": {
                "name": "publishedAt.neq",
                "in": "query",
                "description": "Filters field \"published_at\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostSlugEQ": {
                "name": "slug.eq",
                "in": "query",
                "description": "Filters field \"slug\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostSlugEqualFold": {
                "name": "slug.ieq",
                "in": "query",
                "description": "Filters field \"slug\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PostSlugNEQ": {
                "name": "slug.neq",
                "in": "query",
                "description": "Filters field \"slug\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleContains": {
                "name": "title.has",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleContainsFold": {
                "name": "title.ihas",
                "in": "query",
                "description": "Filters field \"title\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleEQ": {
                "name": "title.eq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleEqualFold": {
                "name": "title.ieq",
                "in": "query",
                "description": "Filters field \"title\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleHasPrefix": {
                "name": "title.prefix",
                "in": "query",
                "description": "Filters field \"title\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleHasSuffix": {
                "name": "title.suffix",
                "in": "query",
                "description": "Filters field \"title\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleIn": {
                "name": "title.in",
                "in": "query",
                "description": "Filters field \"title\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PostTitleNEQ": {
                "name": "title.neq",
                "in": "query",
                "description": "Filters field \"title\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "PostTitleNotIn": {
                "name": "title.notIn",
                "in": "query",
                "description": "Filters field \"title\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "PostUpdateTimeEQ": {
                "name": "updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostUpdateTimeGT": {
                "name": "updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostUpdateTimeLT": {
                "name": "updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostUpdateTimeNEQ": {
                "name": "updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "PostViewCountEQ": {
                "name": "viewCount.eq",
                "in": "query",
                "description": "Filters field \"view_count\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PostViewCountGT": {
                "name": "viewCount.gt",
                "in": "query",
                "description": "Filters field \"view_count\" to be greater than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PostViewCountLT": {
                "name": "viewCount.lt",
                "in": "query",
                "description": "Filters field \"view_count\" to be less than the provided value.",
                "schema": {
                    "type": "number"
                }
            },
            "PostViewCountNEQ": {
                "name": "viewCount.neq",
                "in": "query",
                "description": "Filters field \"view_count\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "PrettyResponse": {
                "name": "pretty",
                "in": "query",
                "description": "If set to true, any JSON response will be indented.",
                "schema": {
                    "type": "boolean"
                }
            },
            "SVGBackground": {
                "name": "bg",
                "in": "query",
                "description": "Background type.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "geometric",
                        "topography"
                    ],
                    "default": "geometric"
                }
            },
            "SVGBackgroundColor": {
                "name": "bgcolor",
                "in": "query",
                "description": "Background color (hex, rgb, rgba, hsl).",
                "schema": {
                    "type": "string",
                    "default": "#000000"
                }
            },
            "SVGDescription": {
                "name": "description",
                "in": "query",
                "description": "Description of the project (not required if using owner/repo).",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "SVGFontScale": {
                "name": "font",
                "in": "query",
                "description": "Font scale.",
                "schema": {
                    "type": "number",
                    "maximum": 3,
                    "minimum": 0.5,
                    "default": 1
                }
            },
            "SVGHeight": {
                "name": "h",
                "in": "query",
                "description": "Height of the SVG (in px).",
                "schema": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 200,
                    "default": 200
                }
            },
            "SVGIcon": {
                "name": "icon",
                "in": "query",
                "description": "Iconidfy icon to use.",
                "schema": {
                    "type": "string",
                    "default": "mdi:github"
                }
            },
            "SVGIconColor": {
                "name": "icon.color",
                "in": "query",
                "description": "Color of the icon (hex, rgb, rgba, hsl).",
                "schema": {
                    "type": "string"
                }
            },
            "SVGIconFlip": {
                "name": "icon.flip",
                "in": "query",
                "description": "Flip the icon.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "horizontal",
                        "vertical"
                    ],
                    "example": "horizontal"
                }
            },
            "SVGIconHeight": {
                "name": "icon.height",
                "in": "query",
                "description": "Height of the icon (in px).",
                "schema": {
                    "type": "integer",
                    "maximum": 300,
                    "minimum": 0
                }
            },
            "SVGIconRotate": {
                "name": "icon.rotate",
                "in": "query",
                "description": "Rotate the icon (1=90deg, 2=180deg, 3=270deg).",
                "schema": {
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "maximum": 3,
                    "minimum": 0,
                    "example": 1
                }
            },
            "SVGIconWidth": {
                "name": "icon.width",
                "in": "query",
                "description": "Width of the icon (in px).",
                "schema": {
                    "type": "integer",
                    "maximum": 300,
                    "minimum": 0
                }
            },
            "SVGLayout": {
                "name": "layout",
                "in": "query",
                "description": "Layout of the SVG.",
                "schema": {
                    "type": "string",
                    "enum": [
                        "all",
                        "left",
                        "right"
                    ],
                    "default": "all"
                }
            },
            "SVGTitle": {
                "name": "title",
                "in": "query",
                "description": "Title of the project (not required if using owner/repo).",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "SVGWidth": {
                "name": "w",
                "in": "query",
                "description": "Width of the SVG (in px).",
                "schema": {
                    "type": "integer",
                    "maximum": 2000,
                    "minimum": 600,
                    "default": 961
                }
            },
            "UserCreateTimeEQ": {
                "name": "createTime.eq",
                "in": "query",
                "description": "Filters field \"create_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserCreateTimeGT": {
                "name": "createTime.gt",
                "in": "query",
                "description": "Filters field \"create_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserCreateTimeLT": {
                "name": "createTime.lt",
                "in": "query",
                "description": "Filters field \"create_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserCreateTimeNEQ": {
                "name": "createTime.neq",
                "in": "query",
                "description": "Filters field \"create_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserEmailContains": {
                "name": "email.has",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailContainsFold": {
                "name": "email.ihas",
                "in": "query",
                "description": "Filters field \"email\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEQ": {
                "name": "email.eq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailEqualFold": {
                "name": "email.ieq",
                "in": "query",
                "description": "Filters field \"email\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasPrefix": {
                "name": "email.prefix",
                "in": "query",
                "description": "Filters field \"email\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailHasSuffix": {
                "name": "email.suffix",
                "in": "query",
                "description": "Filters field \"email\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailIn": {
                "name": "email.in",
                "in": "query",
                "description": "Filters field \"email\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserEmailIsNil": {
                "name": "email.null",
                "in": "query",
                "description": "Filters field \"email\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserEmailNEQ": {
                "name": "email.neq",
                "in": "query",
                "description": "Filters field \"email\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserEmailNotIn": {
                "name": "email.notIn",
                "in": "query",
                "description": "Filters field \"email\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserID": {
                "name": "userID",
                "in": "path",
                "description": "The ID of the User to act upon.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "UserLocationContains": {
                "name": "location.has",
                "in": "query",
                "description": "Filters field \"location\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationContainsFold": {
                "name": "location.ihas",
                "in": "query",
                "description": "Filters field \"location\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationEQ": {
                "name": "location.eq",
                "in": "query",
                "description": "Filters field \"location\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationEqualFold": {
                "name": "location.ieq",
                "in": "query",
                "description": "Filters field \"location\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationHasPrefix": {
                "name": "location.prefix",
                "in": "query",
                "description": "Filters field \"location\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationHasSuffix": {
                "name": "location.suffix",
                "in": "query",
                "description": "Filters field \"location\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationIn": {
                "name": "location.in",
                "in": "query",
                "description": "Filters field \"location\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserLocationIsNil": {
                "name": "location.null",
                "in": "query",
                "description": "Filters field \"location\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserLocationNEQ": {
                "name": "location.neq",
                "in": "query",
                "description": "Filters field \"location\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLocationNotIn": {
                "name": "location.notIn",
                "in": "query",
                "description": "Filters field \"location\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserLoginContains": {
                "name": "login.has",
                "in": "query",
                "description": "Filters field \"login\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginContainsFold": {
                "name": "login.ihas",
                "in": "query",
                "description": "Filters field \"login\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginEQ": {
                "name": "login.eq",
                "in": "query",
                "description": "Filters field \"login\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginEqualFold": {
                "name": "login.ieq",
                "in": "query",
                "description": "Filters field \"login\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginHasPrefix": {
                "name": "login.prefix",
                "in": "query",
                "description": "Filters field \"login\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginHasSuffix": {
                "name": "login.suffix",
                "in": "query",
                "description": "Filters field \"login\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginIn": {
                "name": "login.in",
                "in": "query",
                "description": "Filters field \"login\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserLoginNEQ": {
                "name": "login.neq",
                "in": "query",
                "description": "Filters field \"login\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserLoginNotIn": {
                "name": "login.notIn",
                "in": "query",
                "description": "Filters field \"login\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserNameContains": {
                "name": "name.has",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameContainsFold": {
                "name": "name.ihas",
                "in": "query",
                "description": "Filters field \"name\" to contain the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEQ": {
                "name": "name.eq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameEqualFold": {
                "name": "name.ieq",
                "in": "query",
                "description": "Filters field \"name\" to be equal to the provided value, case-insensitive.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasPrefix": {
                "name": "name.prefix",
                "in": "query",
                "description": "Filters field \"name\" to start with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameHasSuffix": {
                "name": "name.suffix",
                "in": "query",
                "description": "Filters field \"name\" to end with the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameIn": {
                "name": "name.in",
                "in": "query",
                "description": "Filters field \"name\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserNameIsNil": {
                "name": "name.null",
                "in": "query",
                "description": "Filters field \"name\" to be null/nil.",
                "schema": {
                    "type": "boolean"
                }
            },
            "UserNameNEQ": {
                "name": "name.neq",
                "in": "query",
                "description": "Filters field \"name\" to be not equal to the provided value.",
                "schema": {
                    "type": "string"
                }
            },
            "UserNameNotIn": {
                "name": "name.notIn",
                "in": "query",
                "description": "Filters field \"name\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "UserUpdateTimeEQ": {
                "name": "updateTime.eq",
                "in": "query",
                "description": "Filters field \"update_time\" to be equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserUpdateTimeGT": {
                "name": "updateTime.gt",
                "in": "query",
                "description": "Filters field \"update_time\" to be greater than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserUpdateTimeLT": {
                "name": "updateTime.lt",
                "in": "query",
                "description": "Filters field \"update_time\" to be less than the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserUpdateTimeNEQ": {
                "name": "updateTime.neq",
                "in": "query",
                "description": "Filters field \"update_time\" to be not equal to the provided value.",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "UserUserIDEQ": {
                "name": "userID.eq",
                "in": "query",
                "description": "Filters field \"user_id\" to be equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserUserIDIn": {
                "name": "userID.in",
                "in": "query",
                "description": "Filters field \"user_id\" to be within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "UserUserIDNEQ": {
                "name": "userID.neq",
                "in": "query",
                "description": "Filters field \"user_id\" to be not equal to the provided value.",
                "schema": {
                    "type": "integer"
                }
            },
            "UserUserIDNotIn": {
                "name": "userID.notIn",
                "in": "query",
                "description": "Filters field \"user_id\" to be not within the provided values.",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "X-Request-Id": {
                "name": "X-Request-Id",
                "in": "header",
                "description": "A unique identifier for the request.",
                "schema": {
                    "type": "string"
                }
            }
        },
        "headers": {
            "X-Ratelimit-Limit": {
                "description": "The maximum number of requests that the consumer is permitted to make in a given period.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "X-Ratelimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "X-Ratelimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Meta",
            "description": "Includes various endpoints for meta information about the service, like the OpenAPI spec, version, health, etc."
        },
        {
            "name": "GithubAssets"
        },
        {
            "name": "GithubReleases"
        },
        {
            "name": "GithubEvents"
        },
        {
            "name": "GithubGists"
        },
        {
            "name": "GithubRepositories"
        },
        {
            "name": "Labels"
        },
        {
            "name": "Posts"
        },
        {
            "name": "Users"
        }
    ]
}
