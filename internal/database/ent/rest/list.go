// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package rest

import (
	"context"
	"fmt"
	"math"
	"slices"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/liam.sh/internal/database/ent"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubasset"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubevent"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubgist"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrelease"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrepository"
	"github.com/lrstanley/liam.sh/internal/database/ent/label"
	"github.com/lrstanley/liam.sh/internal/database/ent/post"
	"github.com/lrstanley/liam.sh/internal/database/ent/predicate"
	"github.com/lrstanley/liam.sh/internal/database/ent/user"
)

type PageConfig struct {
	MinItemsPerPage int `json:"min_items_per_page"`
	ItemsPerPage    int `json:"items_per_page"`
	MaxItemsPerPage int `json:"max_items_per_page"`
}

var (
	firstPage = 1
	// DefaultPageConfig defines the page configuration for LIST-related endpoints
	// for all entities by default. If the configuration is not overridden for a
	// specific entity, this will be used.
	DefaultPageConfig = &PageConfig{
		MinItemsPerPage: 1,
		ItemsPerPage:    10,
		MaxItemsPerPage: 1000,
	}
	// GithubAssetPageConfig defines the page configuration for LIST-related endpoints
	// for GithubAsset.
	GithubAssetPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// GithubEventPageConfig defines the page configuration for LIST-related endpoints
	// for GithubEvent.
	GithubEventPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// GithubGistPageConfig defines the page configuration for LIST-related endpoints
	// for GithubGist.
	GithubGistPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// GithubReleasePageConfig defines the page configuration for LIST-related endpoints
	// for GithubRelease.
	GithubReleasePageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// GithubRepositoryPageConfig defines the page configuration for LIST-related endpoints
	// for GithubRepository.
	GithubRepositoryPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// LabelPageConfig defines the page configuration for LIST-related endpoints
	// for Label.
	LabelPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// PostPageConfig defines the page configuration for LIST-related endpoints
	// for Post.
	PostPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
	// UserPageConfig defines the page configuration for LIST-related endpoints
	// for User.
	UserPageConfig = &PageConfig{
		MinItemsPerPage: DefaultPageConfig.MinItemsPerPage,
		ItemsPerPage:    DefaultPageConfig.ItemsPerPage,
		MaxItemsPerPage: DefaultPageConfig.MaxItemsPerPage,
	}
)

// PagableQuery is an interface for ent queries which support providing limit/offset.
type PagableQuery[P any, T any] interface {
	Limit(int) P
	Offset(int) P
	Count(ctx context.Context) (int, error)
	All(ctx context.Context) ([]*T, error)
}

// PagedResponse is the JSON response structure for paged queries.
type PagedResponse[T any] struct {
	Page       int  `json:"page"`         // Current page number.
	TotalCount int  `json:"total_count"`  // Total number of items.
	LastPage   int  `json:"last_page"`    // Last page number.
	IsLastPage bool `json:"is_last_page"` // Whether this is the last page.
	Content    []*T `json:"content"`      // Paged data.
}

// GetPage returns the current page number.
func (p *PagedResponse[T]) GetPage() int {
	return p.Page
}

// GetTotalCount returns the total number of items.
func (p *PagedResponse[T]) GetTotalCount() int {
	return p.TotalCount
}

// GetLastPage returns the last page number.
func (p *PagedResponse[T]) GetLastPage() int {
	return p.LastPage
}

// GetIsLastPage returns whether this is the last page.
func (p *PagedResponse[T]) GetIsLastPage() bool {
	return p.IsLastPage
}

type Paginated[P PagableQuery[P, T], T any] struct {
	Page         *int `json:"page"     form:"page,omitempty"`
	ItemsPerPage *int `json:"per_page" form:"per_page,omitempty"`
	ResultCount  int  `json:"-"        form:"-"` // ResultCount is populated by the query execution inside of ApplyPagination.
	LastPage     int  `json:"-"        form:"-"` // LastPage is populated by the query execution inside of ApplyPagination.

	hasApplied bool `json:"-" form:"-"`
}

// ApplyPagination applies offsets and limits, and also runs a count query on the
// provided query to calculate total results and what the last page number is.
func (p *Paginated[P, T]) ApplyPagination(ctx context.Context, query P, pageConfig *PageConfig) (P, error) {
	if pageConfig == nil {
		pageConfig = DefaultPageConfig
	}

	if p.Page == nil {
		p.Page = &firstPage
	}

	if p.ItemsPerPage == nil {
		p.ItemsPerPage = &pageConfig.ItemsPerPage
	}

	if *p.ItemsPerPage < pageConfig.MinItemsPerPage {
		return query, &ErrBadRequest{Err: fmt.Errorf("per_page %d is out of bounds, must be >= %d", *p.ItemsPerPage, pageConfig.MinItemsPerPage)}
	}

	if *p.ItemsPerPage > pageConfig.MaxItemsPerPage {
		return query, &ErrBadRequest{Err: fmt.Errorf("per_page %d is out of bounds, must be <= %d", *p.ItemsPerPage, pageConfig.MaxItemsPerPage)}
	}

	if *p.Page < 1 {
		return query, &ErrBadRequest{Err: fmt.Errorf("page %d is out of bounds, must be >= 1", *p.Page)}
	}

	var err error

	p.ResultCount, err = query.Count(ctx)
	if err != nil {
		return query, err
	}

	// TODO: how to calculate this without knowing the total count?
	p.LastPage = int(math.Ceil(float64(p.ResultCount) / float64(*p.ItemsPerPage)))

	if p.LastPage < 1 {
		p.LastPage = 1
	}

	if *p.Page > p.LastPage {
		return query, &ErrBadRequest{Err: fmt.Errorf("page %d is out of bounds, last page is %d", *p.Page, p.LastPage)}
	}

	p.hasApplied = true
	return query.Limit(*p.ItemsPerPage).Offset((*p.Page - 1) * *p.ItemsPerPage), nil
}

// ExecutePaginated executes the query and returns a paged response. If ApplyPagination
// was not called before, it will be called here.
func (p *Paginated[P, T]) ExecutePaginated(ctx context.Context, query P, pageConfig *PageConfig) (*PagedResponse[T], error) {
	if !p.hasApplied {
		var err error
		query, err = p.ApplyPagination(ctx, query, pageConfig)
		if err != nil {
			return nil, err
		}
	}

	data, err := query.All(ctx)
	if err != nil {
		return nil, err
	}

	return &PagedResponse[T]{
		Page:       *p.Page,
		TotalCount: p.ResultCount,
		LastPage:   p.LastPage,
		IsLastPage: *p.Page == p.LastPage,
		Content:    data,
	}, nil
}

// FilterOperation represents if all or any (one or more) filters should be applied.
type FilterOperation string

const (
	FilterOperationAnd FilterOperation = "and" // Represents the "and" predicate, applying against all filters combined.
	FilterOperationOr  FilterOperation = "or"  // Represents the "or" predicate, applying against any number of filters.
)

var (
	// FilterOperations defines the available filter methods.
	FilterOperations = []FilterOperation{FilterOperationAnd, FilterOperationOr}
)

type Filtered[P ~func(*sql.Selector)] struct {
	// FilterOperation controls how multiple predicates are applied together.
	FilterOperation *FilterOperation `json:"filter_op,omitempty" form:"filter_op,omitempty"`
}

// ApplyFilterOperation applies the requested filter operation (if provided) to the
// provided predicates. If no filter operation is provided, the predicates are
// returned with AND.
func (f *Filtered[P]) ApplyFilterOperation(predicates ...P) (P, error) {
	if f.FilterOperation == nil || *f.FilterOperation == FilterOperationAnd {
		return sql.AndPredicates(predicates...), nil
	}
	if !slices.Contains(FilterOperations, *f.FilterOperation) {
		return nil, &ErrBadRequest{Err: fmt.Errorf("invalid filter method: %s", *f.FilterOperation)}
	}
	return sql.OrPredicates(predicates...), nil
}

// ListGithubAssetParams defines parameters for listing GithubAssets via a GET request.
type ListGithubAssetParams struct {
	Sorted
	Paginated[*ent.GithubAssetQuery, ent.GithubAsset]
	Filtered[predicate.GithubAsset]

	// Filters field "asset_id" to be equal to the provided value.
	GithubAssetAssetIDEQ *int64 `form:"assetID.eq,omitempty" json:"github_asset_asset_ideq,omitempty"`
	// Filters field "asset_id" to be not equal to the provided value.
	GithubAssetAssetIDNEQ *int64 `form:"assetID.neq,omitempty" json:"github_asset_asset_idneq,omitempty"`
	// Filters field "name" to be equal to the provided value.
	GithubAssetNameEQ *string `form:"name.eq,omitempty" json:"github_asset_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	GithubAssetNameNEQ *string `form:"name.neq,omitempty" json:"github_asset_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	GithubAssetNameIn []string `form:"name.in,omitempty" json:"github_asset_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	GithubAssetNameNotIn []string `form:"name.notIn,omitempty" json:"github_asset_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	GithubAssetNameEqualFold *string `form:"name.ieq,omitempty" json:"github_asset_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	GithubAssetNameContains *string `form:"name.has,omitempty" json:"github_asset_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	GithubAssetNameContainsFold *string `form:"name.ihas,omitempty" json:"github_asset_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	GithubAssetNameHasPrefix *string `form:"name.prefix,omitempty" json:"github_asset_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	GithubAssetNameHasSuffix *string `form:"name.suffix,omitempty" json:"github_asset_name_has_suffix,omitempty"`
	// Filters field "label" to be equal to the provided value.
	GithubAssetLabelEQ *string `form:"label.eq,omitempty" json:"github_asset_label_eq,omitempty"`
	// Filters field "label" to be not equal to the provided value.
	GithubAssetLabelNEQ *string `form:"label.neq,omitempty" json:"github_asset_label_neq,omitempty"`
	// Filters field "label" to be null/nil.
	GithubAssetLabelIsNil *bool `form:"label.null,omitempty" json:"github_asset_label_is_nil,omitempty"`
	// Filters field "label" to be within the provided values.
	GithubAssetLabelIn []string `form:"label.in,omitempty" json:"github_asset_label_in,omitempty"`
	// Filters field "label" to be not within the provided values.
	GithubAssetLabelNotIn []string `form:"label.notIn,omitempty" json:"github_asset_label_not_in,omitempty"`
	// Filters field "label" to be equal to the provided value, case-insensitive.
	GithubAssetLabelEqualFold *string `form:"label.ieq,omitempty" json:"github_asset_label_equal_fold,omitempty"`
	// Filters field "label" to contain the provided value.
	GithubAssetLabelContains *string `form:"label.has,omitempty" json:"github_asset_label_contains,omitempty"`
	// Filters field "label" to contain the provided value, case-insensitive.
	GithubAssetLabelContainsFold *string `form:"label.ihas,omitempty" json:"github_asset_label_contains_fold,omitempty"`
	// Filters field "label" to start with the provided value.
	GithubAssetLabelHasPrefix *string `form:"label.prefix,omitempty" json:"github_asset_label_has_prefix,omitempty"`
	// Filters field "label" to end with the provided value.
	GithubAssetLabelHasSuffix *string `form:"label.suffix,omitempty" json:"github_asset_label_has_suffix,omitempty"`
	// Filters field "size" to be greater than the provided value.
	GithubAssetSizeGT *int64 `form:"size.gt,omitempty" json:"github_asset_size_gt,omitempty"`
	// Filters field "size" to be less than the provided value.
	GithubAssetSizeLT *int64 `form:"size.lt,omitempty" json:"github_asset_size_lt,omitempty"`
	// Filters field "download_count" to be greater than the provided value.
	GithubAssetDownloadCountGT *int64 `form:"downloadCount.gt,omitempty" json:"github_asset_download_count_gt,omitempty"`
	// Filters field "download_count" to be less than the provided value.
	GithubAssetDownloadCountLT *int64 `form:"downloadCount.lt,omitempty" json:"github_asset_download_count_lt,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	GithubAssetCreatedAtEQ *time.Time `form:"createdAt.eq,omitempty" json:"github_asset_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	GithubAssetCreatedAtNEQ *time.Time `form:"createdAt.neq,omitempty" json:"github_asset_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	GithubAssetCreatedAtGT *time.Time `form:"createdAt.gt,omitempty" json:"github_asset_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	GithubAssetCreatedAtLT *time.Time `form:"createdAt.lt,omitempty" json:"github_asset_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	GithubAssetUpdatedAtEQ *time.Time `form:"updatedAt.eq,omitempty" json:"github_asset_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	GithubAssetUpdatedAtNEQ *time.Time `form:"updatedAt.neq,omitempty" json:"github_asset_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	GithubAssetUpdatedAtGT *time.Time `form:"updatedAt.gt,omitempty" json:"github_asset_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	GithubAssetUpdatedAtLT *time.Time `form:"updatedAt.lt,omitempty" json:"github_asset_updated_at_lt,omitempty"`
	// Filters field "updated_at" to be null/nil.
	GithubAssetUpdatedAtIsNil *bool `form:"updatedAt.null,omitempty" json:"github_asset_updated_at_is_nil,omitempty"`
	// If true, only return entities that have a release edge.
	EdgeHasRelease *bool `form:"has.release,omitempty" json:"edge_has_release,omitempty"`
	// Filters field "release_id" to be equal to the provided value.
	EdgeReleaseReleaseIDEQ *int64 `form:"release.releaseID.eq,omitempty" json:"edge_release_release_ideq,omitempty"`
	// Filters field "release_id" to be not equal to the provided value.
	EdgeReleaseReleaseIDNEQ *int64 `form:"release.releaseID.neq,omitempty" json:"edge_release_release_idneq,omitempty"`
	// Filters field "tag_name" to be equal to the provided value.
	EdgeReleaseTagNameEQ *string `form:"release.tagName.eq,omitempty" json:"edge_release_tag_name_eq,omitempty"`
	// Filters field "tag_name" to be not equal to the provided value.
	EdgeReleaseTagNameNEQ *string `form:"release.tagName.neq,omitempty" json:"edge_release_tag_name_neq,omitempty"`
	// Filters field "tag_name" to be within the provided values.
	EdgeReleaseTagNameIn []string `form:"release.tagName.in,omitempty" json:"edge_release_tag_name_in,omitempty"`
	// Filters field "tag_name" to be not within the provided values.
	EdgeReleaseTagNameNotIn []string `form:"release.tagName.notIn,omitempty" json:"edge_release_tag_name_not_in,omitempty"`
	// Filters field "tag_name" to be equal to the provided value, case-insensitive.
	EdgeReleaseTagNameEqualFold *string `form:"release.tagName.ieq,omitempty" json:"edge_release_tag_name_equal_fold,omitempty"`
	// Filters field "tag_name" to contain the provided value.
	EdgeReleaseTagNameContains *string `form:"release.tagName.has,omitempty" json:"edge_release_tag_name_contains,omitempty"`
	// Filters field "tag_name" to contain the provided value, case-insensitive.
	EdgeReleaseTagNameContainsFold *string `form:"release.tagName.ihas,omitempty" json:"edge_release_tag_name_contains_fold,omitempty"`
	// Filters field "tag_name" to start with the provided value.
	EdgeReleaseTagNameHasPrefix *string `form:"release.tagName.prefix,omitempty" json:"edge_release_tag_name_has_prefix,omitempty"`
	// Filters field "tag_name" to end with the provided value.
	EdgeReleaseTagNameHasSuffix *string `form:"release.tagName.suffix,omitempty" json:"edge_release_tag_name_has_suffix,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value.
	EdgeReleaseTargetCommitishEQ *string `form:"release.targetCommitish.eq,omitempty" json:"edge_release_target_commitish_eq,omitempty"`
	// Filters field "target_commitish" to be not equal to the provided value.
	EdgeReleaseTargetCommitishNEQ *string `form:"release.targetCommitish.neq,omitempty" json:"edge_release_target_commitish_neq,omitempty"`
	// Filters field "target_commitish" to be within the provided values.
	EdgeReleaseTargetCommitishIn []string `form:"release.targetCommitish.in,omitempty" json:"edge_release_target_commitish_in,omitempty"`
	// Filters field "target_commitish" to be not within the provided values.
	EdgeReleaseTargetCommitishNotIn []string `form:"release.targetCommitish.notIn,omitempty" json:"edge_release_target_commitish_not_in,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value, case-insensitive.
	EdgeReleaseTargetCommitishEqualFold *string `form:"release.targetCommitish.ieq,omitempty" json:"edge_release_target_commitish_equal_fold,omitempty"`
	// Filters field "target_commitish" to contain the provided value.
	EdgeReleaseTargetCommitishContains *string `form:"release.targetCommitish.has,omitempty" json:"edge_release_target_commitish_contains,omitempty"`
	// Filters field "target_commitish" to contain the provided value, case-insensitive.
	EdgeReleaseTargetCommitishContainsFold *string `form:"release.targetCommitish.ihas,omitempty" json:"edge_release_target_commitish_contains_fold,omitempty"`
	// Filters field "target_commitish" to start with the provided value.
	EdgeReleaseTargetCommitishHasPrefix *string `form:"release.targetCommitish.prefix,omitempty" json:"edge_release_target_commitish_has_prefix,omitempty"`
	// Filters field "target_commitish" to end with the provided value.
	EdgeReleaseTargetCommitishHasSuffix *string `form:"release.targetCommitish.suffix,omitempty" json:"edge_release_target_commitish_has_suffix,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeReleaseNameEQ *string `form:"release.name.eq,omitempty" json:"edge_release_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeReleaseNameNEQ *string `form:"release.name.neq,omitempty" json:"edge_release_name_neq,omitempty"`
	// Filters field "name" to be null/nil.
	EdgeReleaseNameIsNil *bool `form:"release.name.null,omitempty" json:"edge_release_name_is_nil,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeReleaseNameIn []string `form:"release.name.in,omitempty" json:"edge_release_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeReleaseNameNotIn []string `form:"release.name.notIn,omitempty" json:"edge_release_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeReleaseNameEqualFold *string `form:"release.name.ieq,omitempty" json:"edge_release_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeReleaseNameContains *string `form:"release.name.has,omitempty" json:"edge_release_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeReleaseNameContainsFold *string `form:"release.name.ihas,omitempty" json:"edge_release_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeReleaseNameHasPrefix *string `form:"release.name.prefix,omitempty" json:"edge_release_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeReleaseNameHasSuffix *string `form:"release.name.suffix,omitempty" json:"edge_release_name_has_suffix,omitempty"`
	// Filters field "draft" to be equal to the provided value.
	EdgeReleaseDraftEQ *bool `form:"release.draft.eq,omitempty" json:"edge_release_draft_eq,omitempty"`
	// Filters field "prerelease" to be equal to the provided value.
	EdgeReleasePrereleaseEQ *bool `form:"release.prerelease.eq,omitempty" json:"edge_release_prerelease_eq,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	EdgeReleaseCreatedAtEQ *time.Time `form:"release.createdAt.eq,omitempty" json:"edge_release_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	EdgeReleaseCreatedAtNEQ *time.Time `form:"release.createdAt.neq,omitempty" json:"edge_release_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	EdgeReleaseCreatedAtGT *time.Time `form:"release.createdAt.gt,omitempty" json:"edge_release_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	EdgeReleaseCreatedAtLT *time.Time `form:"release.createdAt.lt,omitempty" json:"edge_release_created_at_lt,omitempty"`
	// Filters field "published_at" to be equal to the provided value.
	EdgeReleasePublishedAtEQ *time.Time `form:"release.publishedAt.eq,omitempty" json:"edge_release_published_at_eq,omitempty"`
	// Filters field "published_at" to be not equal to the provided value.
	EdgeReleasePublishedAtNEQ *time.Time `form:"release.publishedAt.neq,omitempty" json:"edge_release_published_at_neq,omitempty"`
	// Filters field "published_at" to be greater than the provided value.
	EdgeReleasePublishedAtGT *time.Time `form:"release.publishedAt.gt,omitempty" json:"edge_release_published_at_gt,omitempty"`
	// Filters field "published_at" to be less than the provided value.
	EdgeReleasePublishedAtLT *time.Time `form:"release.publishedAt.lt,omitempty" json:"edge_release_published_at_lt,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in GithubAsset.
func (l *ListGithubAssetParams) FilterPredicates() (predicate.GithubAsset, error) {
	var predicates []predicate.GithubAsset

	if l.GithubAssetAssetIDEQ != nil {
		predicates = append(predicates, githubasset.AssetIDEQ(*l.GithubAssetAssetIDEQ))
	}
	if l.GithubAssetAssetIDNEQ != nil {
		predicates = append(predicates, githubasset.AssetIDNEQ(*l.GithubAssetAssetIDNEQ))
	}
	if l.GithubAssetNameEQ != nil {
		predicates = append(predicates, githubasset.NameEQ(*l.GithubAssetNameEQ))
	}
	if l.GithubAssetNameNEQ != nil {
		predicates = append(predicates, githubasset.NameNEQ(*l.GithubAssetNameNEQ))
	}
	if l.GithubAssetNameIn != nil {
		predicates = append(predicates, githubasset.NameIn(l.GithubAssetNameIn...))
	}
	if l.GithubAssetNameNotIn != nil {
		predicates = append(predicates, githubasset.NameNotIn(l.GithubAssetNameNotIn...))
	}
	if l.GithubAssetNameEqualFold != nil {
		predicates = append(predicates, githubasset.NameEqualFold(*l.GithubAssetNameEqualFold))
	}
	if l.GithubAssetNameContains != nil {
		predicates = append(predicates, githubasset.NameContains(*l.GithubAssetNameContains))
	}
	if l.GithubAssetNameContainsFold != nil {
		predicates = append(predicates, githubasset.NameContainsFold(*l.GithubAssetNameContainsFold))
	}
	if l.GithubAssetNameHasPrefix != nil {
		predicates = append(predicates, githubasset.NameHasPrefix(*l.GithubAssetNameHasPrefix))
	}
	if l.GithubAssetNameHasSuffix != nil {
		predicates = append(predicates, githubasset.NameHasSuffix(*l.GithubAssetNameHasSuffix))
	}
	if l.GithubAssetLabelEQ != nil {
		predicates = append(predicates, githubasset.LabelEQ(*l.GithubAssetLabelEQ))
	}
	if l.GithubAssetLabelNEQ != nil {
		predicates = append(predicates, githubasset.LabelNEQ(*l.GithubAssetLabelNEQ))
	}
	if l.GithubAssetLabelIsNil != nil {
		if *l.GithubAssetLabelIsNil {
			predicates = append(predicates, githubasset.LabelIsNil())
		} else {
			predicates = append(predicates, githubasset.Not(githubasset.LabelIsNil()))
		}
	}
	if l.GithubAssetLabelIn != nil {
		predicates = append(predicates, githubasset.LabelIn(l.GithubAssetLabelIn...))
	}
	if l.GithubAssetLabelNotIn != nil {
		predicates = append(predicates, githubasset.LabelNotIn(l.GithubAssetLabelNotIn...))
	}
	if l.GithubAssetLabelEqualFold != nil {
		predicates = append(predicates, githubasset.LabelEqualFold(*l.GithubAssetLabelEqualFold))
	}
	if l.GithubAssetLabelContains != nil {
		predicates = append(predicates, githubasset.LabelContains(*l.GithubAssetLabelContains))
	}
	if l.GithubAssetLabelContainsFold != nil {
		predicates = append(predicates, githubasset.LabelContainsFold(*l.GithubAssetLabelContainsFold))
	}
	if l.GithubAssetLabelHasPrefix != nil {
		predicates = append(predicates, githubasset.LabelHasPrefix(*l.GithubAssetLabelHasPrefix))
	}
	if l.GithubAssetLabelHasSuffix != nil {
		predicates = append(predicates, githubasset.LabelHasSuffix(*l.GithubAssetLabelHasSuffix))
	}
	if l.GithubAssetSizeGT != nil {
		predicates = append(predicates, githubasset.SizeGT(*l.GithubAssetSizeGT))
	}
	if l.GithubAssetSizeLT != nil {
		predicates = append(predicates, githubasset.SizeLT(*l.GithubAssetSizeLT))
	}
	if l.GithubAssetDownloadCountGT != nil {
		predicates = append(predicates, githubasset.DownloadCountGT(*l.GithubAssetDownloadCountGT))
	}
	if l.GithubAssetDownloadCountLT != nil {
		predicates = append(predicates, githubasset.DownloadCountLT(*l.GithubAssetDownloadCountLT))
	}
	if l.GithubAssetCreatedAtEQ != nil {
		predicates = append(predicates, githubasset.CreatedAtEQ(*l.GithubAssetCreatedAtEQ))
	}
	if l.GithubAssetCreatedAtNEQ != nil {
		predicates = append(predicates, githubasset.CreatedAtNEQ(*l.GithubAssetCreatedAtNEQ))
	}
	if l.GithubAssetCreatedAtGT != nil {
		predicates = append(predicates, githubasset.CreatedAtGT(*l.GithubAssetCreatedAtGT))
	}
	if l.GithubAssetCreatedAtLT != nil {
		predicates = append(predicates, githubasset.CreatedAtLT(*l.GithubAssetCreatedAtLT))
	}
	if l.GithubAssetUpdatedAtEQ != nil {
		predicates = append(predicates, githubasset.UpdatedAtEQ(*l.GithubAssetUpdatedAtEQ))
	}
	if l.GithubAssetUpdatedAtNEQ != nil {
		predicates = append(predicates, githubasset.UpdatedAtNEQ(*l.GithubAssetUpdatedAtNEQ))
	}
	if l.GithubAssetUpdatedAtGT != nil {
		predicates = append(predicates, githubasset.UpdatedAtGT(*l.GithubAssetUpdatedAtGT))
	}
	if l.GithubAssetUpdatedAtLT != nil {
		predicates = append(predicates, githubasset.UpdatedAtLT(*l.GithubAssetUpdatedAtLT))
	}
	if l.GithubAssetUpdatedAtIsNil != nil {
		if *l.GithubAssetUpdatedAtIsNil {
			predicates = append(predicates, githubasset.UpdatedAtIsNil())
		} else {
			predicates = append(predicates, githubasset.Not(githubasset.UpdatedAtIsNil()))
		}
	}
	if l.EdgeHasRelease != nil {
		if *l.EdgeHasRelease {
			predicates = append(predicates, githubasset.HasRelease())
		} else {
			predicates = append(predicates, githubasset.Not(githubasset.HasRelease()))
		}
	}
	if l.EdgeReleaseReleaseIDEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.ReleaseIDEQ(*l.EdgeReleaseReleaseIDEQ)))
	}
	if l.EdgeReleaseReleaseIDNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.ReleaseIDNEQ(*l.EdgeReleaseReleaseIDNEQ)))
	}
	if l.EdgeReleaseTagNameEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameEQ(*l.EdgeReleaseTagNameEQ)))
	}
	if l.EdgeReleaseTagNameNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameNEQ(*l.EdgeReleaseTagNameNEQ)))
	}
	if l.EdgeReleaseTagNameIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameIn(l.EdgeReleaseTagNameIn...)))
	}
	if l.EdgeReleaseTagNameNotIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameNotIn(l.EdgeReleaseTagNameNotIn...)))
	}
	if l.EdgeReleaseTagNameEqualFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameEqualFold(*l.EdgeReleaseTagNameEqualFold)))
	}
	if l.EdgeReleaseTagNameContains != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameContains(*l.EdgeReleaseTagNameContains)))
	}
	if l.EdgeReleaseTagNameContainsFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameContainsFold(*l.EdgeReleaseTagNameContainsFold)))
	}
	if l.EdgeReleaseTagNameHasPrefix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameHasPrefix(*l.EdgeReleaseTagNameHasPrefix)))
	}
	if l.EdgeReleaseTagNameHasSuffix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TagNameHasSuffix(*l.EdgeReleaseTagNameHasSuffix)))
	}
	if l.EdgeReleaseTargetCommitishEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishEQ(*l.EdgeReleaseTargetCommitishEQ)))
	}
	if l.EdgeReleaseTargetCommitishNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishNEQ(*l.EdgeReleaseTargetCommitishNEQ)))
	}
	if l.EdgeReleaseTargetCommitishIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishIn(l.EdgeReleaseTargetCommitishIn...)))
	}
	if l.EdgeReleaseTargetCommitishNotIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishNotIn(l.EdgeReleaseTargetCommitishNotIn...)))
	}
	if l.EdgeReleaseTargetCommitishEqualFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishEqualFold(*l.EdgeReleaseTargetCommitishEqualFold)))
	}
	if l.EdgeReleaseTargetCommitishContains != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishContains(*l.EdgeReleaseTargetCommitishContains)))
	}
	if l.EdgeReleaseTargetCommitishContainsFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishContainsFold(*l.EdgeReleaseTargetCommitishContainsFold)))
	}
	if l.EdgeReleaseTargetCommitishHasPrefix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishHasPrefix(*l.EdgeReleaseTargetCommitishHasPrefix)))
	}
	if l.EdgeReleaseTargetCommitishHasSuffix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.TargetCommitishHasSuffix(*l.EdgeReleaseTargetCommitishHasSuffix)))
	}
	if l.EdgeReleaseNameEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameEQ(*l.EdgeReleaseNameEQ)))
	}
	if l.EdgeReleaseNameNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameNEQ(*l.EdgeReleaseNameNEQ)))
	}
	if l.EdgeReleaseNameIsNil != nil {
		if *l.EdgeReleaseNameIsNil {
			predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameIsNil()))
		} else {
			predicates = append(predicates, githubasset.Not(githubasset.HasReleaseWith(githubrelease.NameIsNil())))
		}
	}
	if l.EdgeReleaseNameIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameIn(l.EdgeReleaseNameIn...)))
	}
	if l.EdgeReleaseNameNotIn != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameNotIn(l.EdgeReleaseNameNotIn...)))
	}
	if l.EdgeReleaseNameEqualFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameEqualFold(*l.EdgeReleaseNameEqualFold)))
	}
	if l.EdgeReleaseNameContains != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameContains(*l.EdgeReleaseNameContains)))
	}
	if l.EdgeReleaseNameContainsFold != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameContainsFold(*l.EdgeReleaseNameContainsFold)))
	}
	if l.EdgeReleaseNameHasPrefix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameHasPrefix(*l.EdgeReleaseNameHasPrefix)))
	}
	if l.EdgeReleaseNameHasSuffix != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.NameHasSuffix(*l.EdgeReleaseNameHasSuffix)))
	}
	if l.EdgeReleaseDraftEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.DraftEQ(*l.EdgeReleaseDraftEQ)))
	}
	if l.EdgeReleasePrereleaseEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.PrereleaseEQ(*l.EdgeReleasePrereleaseEQ)))
	}
	if l.EdgeReleaseCreatedAtEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.CreatedAtEQ(*l.EdgeReleaseCreatedAtEQ)))
	}
	if l.EdgeReleaseCreatedAtNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.CreatedAtNEQ(*l.EdgeReleaseCreatedAtNEQ)))
	}
	if l.EdgeReleaseCreatedAtGT != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.CreatedAtGT(*l.EdgeReleaseCreatedAtGT)))
	}
	if l.EdgeReleaseCreatedAtLT != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.CreatedAtLT(*l.EdgeReleaseCreatedAtLT)))
	}
	if l.EdgeReleasePublishedAtEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.PublishedAtEQ(*l.EdgeReleasePublishedAtEQ)))
	}
	if l.EdgeReleasePublishedAtNEQ != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.PublishedAtNEQ(*l.EdgeReleasePublishedAtNEQ)))
	}
	if l.EdgeReleasePublishedAtGT != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.PublishedAtGT(*l.EdgeReleasePublishedAtGT)))
	}
	if l.EdgeReleasePublishedAtLT != nil {
		predicates = append(predicates, githubasset.HasReleaseWith(githubrelease.PublishedAtLT(*l.EdgeReleasePublishedAtLT)))
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListGithubAssetParams) ApplySorting(query *ent.GithubAssetQuery) error {
	if err := l.Sorted.Validate(GithubAssetSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingGithubAsset(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListGithubAssetParams) Exec(ctx context.Context, query *ent.GithubAssetQuery) (results *PagedResponse[ent.GithubAsset], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadGithubAsset(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, GithubAssetPageConfig)
}

// ListGithubEventParams defines parameters for listing GithubEvents via a GET request.
type ListGithubEventParams struct {
	Sorted
	Paginated[*ent.GithubEventQuery, ent.GithubEvent]
	Filtered[predicate.GithubEvent]

	// Filters field "event_id" to be equal to the provided value.
	GithubEventEventIDEQ *string `form:"eventID.eq,omitempty" json:"github_event_event_ideq,omitempty"`
	// Filters field "event_id" to be not equal to the provided value.
	GithubEventEventIDNEQ *string `form:"eventID.neq,omitempty" json:"github_event_event_idneq,omitempty"`
	// Filters field "event_id" to be equal to the provided value, case-insensitive.
	GithubEventEventIDEqualFold *string `form:"eventID.ieq,omitempty" json:"github_event_event_id_equal_fold,omitempty"`
	// Filters field "event_type" to be equal to the provided value.
	GithubEventEventTypeEQ *string `form:"eventType.eq,omitempty" json:"github_event_event_type_eq,omitempty"`
	// Filters field "event_type" to be not equal to the provided value.
	GithubEventEventTypeNEQ *string `form:"eventType.neq,omitempty" json:"github_event_event_type_neq,omitempty"`
	// Filters field "event_type" to be within the provided values.
	GithubEventEventTypeIn []string `form:"eventType.in,omitempty" json:"github_event_event_type_in,omitempty"`
	// Filters field "event_type" to be not within the provided values.
	GithubEventEventTypeNotIn []string `form:"eventType.notIn,omitempty" json:"github_event_event_type_not_in,omitempty"`
	// Filters field "event_type" to be equal to the provided value, case-insensitive.
	GithubEventEventTypeEqualFold *string `form:"eventType.ieq,omitempty" json:"github_event_event_type_equal_fold,omitempty"`
	// Filters field "event_type" to contain the provided value.
	GithubEventEventTypeContains *string `form:"eventType.has,omitempty" json:"github_event_event_type_contains,omitempty"`
	// Filters field "event_type" to contain the provided value, case-insensitive.
	GithubEventEventTypeContainsFold *string `form:"eventType.ihas,omitempty" json:"github_event_event_type_contains_fold,omitempty"`
	// Filters field "event_type" to start with the provided value.
	GithubEventEventTypeHasPrefix *string `form:"eventType.prefix,omitempty" json:"github_event_event_type_has_prefix,omitempty"`
	// Filters field "event_type" to end with the provided value.
	GithubEventEventTypeHasSuffix *string `form:"eventType.suffix,omitempty" json:"github_event_event_type_has_suffix,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	GithubEventCreatedAtEQ *time.Time `form:"createdAt.eq,omitempty" json:"github_event_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	GithubEventCreatedAtNEQ *time.Time `form:"createdAt.neq,omitempty" json:"github_event_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	GithubEventCreatedAtGT *time.Time `form:"createdAt.gt,omitempty" json:"github_event_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	GithubEventCreatedAtLT *time.Time `form:"createdAt.lt,omitempty" json:"github_event_created_at_lt,omitempty"`
	// Filters field "public" to be equal to the provided value.
	GithubEventPublicEQ *bool `form:"public.eq,omitempty" json:"github_event_public_eq,omitempty"`
	// Filters field "actor_id" to be equal to the provided value.
	GithubEventActorIDEQ *int64 `form:"actorID.eq,omitempty" json:"github_event_actor_ideq,omitempty"`
	// Filters field "actor_id" to be not equal to the provided value.
	GithubEventActorIDNEQ *int64 `form:"actorID.neq,omitempty" json:"github_event_actor_idneq,omitempty"`
	// Filters field "repo_id" to be equal to the provided value.
	GithubEventRepoIDEQ *int64 `form:"repoID.eq,omitempty" json:"github_event_repo_ideq,omitempty"`
	// Filters field "repo_id" to be not equal to the provided value.
	GithubEventRepoIDNEQ *int64 `form:"repoID.neq,omitempty" json:"github_event_repo_idneq,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in GithubEvent.
func (l *ListGithubEventParams) FilterPredicates() (predicate.GithubEvent, error) {
	var predicates []predicate.GithubEvent

	if l.GithubEventEventIDEQ != nil {
		predicates = append(predicates, githubevent.EventIDEQ(*l.GithubEventEventIDEQ))
	}
	if l.GithubEventEventIDNEQ != nil {
		predicates = append(predicates, githubevent.EventIDNEQ(*l.GithubEventEventIDNEQ))
	}
	if l.GithubEventEventIDEqualFold != nil {
		predicates = append(predicates, githubevent.EventIDEqualFold(*l.GithubEventEventIDEqualFold))
	}
	if l.GithubEventEventTypeEQ != nil {
		predicates = append(predicates, githubevent.EventTypeEQ(*l.GithubEventEventTypeEQ))
	}
	if l.GithubEventEventTypeNEQ != nil {
		predicates = append(predicates, githubevent.EventTypeNEQ(*l.GithubEventEventTypeNEQ))
	}
	if l.GithubEventEventTypeIn != nil {
		predicates = append(predicates, githubevent.EventTypeIn(l.GithubEventEventTypeIn...))
	}
	if l.GithubEventEventTypeNotIn != nil {
		predicates = append(predicates, githubevent.EventTypeNotIn(l.GithubEventEventTypeNotIn...))
	}
	if l.GithubEventEventTypeEqualFold != nil {
		predicates = append(predicates, githubevent.EventTypeEqualFold(*l.GithubEventEventTypeEqualFold))
	}
	if l.GithubEventEventTypeContains != nil {
		predicates = append(predicates, githubevent.EventTypeContains(*l.GithubEventEventTypeContains))
	}
	if l.GithubEventEventTypeContainsFold != nil {
		predicates = append(predicates, githubevent.EventTypeContainsFold(*l.GithubEventEventTypeContainsFold))
	}
	if l.GithubEventEventTypeHasPrefix != nil {
		predicates = append(predicates, githubevent.EventTypeHasPrefix(*l.GithubEventEventTypeHasPrefix))
	}
	if l.GithubEventEventTypeHasSuffix != nil {
		predicates = append(predicates, githubevent.EventTypeHasSuffix(*l.GithubEventEventTypeHasSuffix))
	}
	if l.GithubEventCreatedAtEQ != nil {
		predicates = append(predicates, githubevent.CreatedAtEQ(*l.GithubEventCreatedAtEQ))
	}
	if l.GithubEventCreatedAtNEQ != nil {
		predicates = append(predicates, githubevent.CreatedAtNEQ(*l.GithubEventCreatedAtNEQ))
	}
	if l.GithubEventCreatedAtGT != nil {
		predicates = append(predicates, githubevent.CreatedAtGT(*l.GithubEventCreatedAtGT))
	}
	if l.GithubEventCreatedAtLT != nil {
		predicates = append(predicates, githubevent.CreatedAtLT(*l.GithubEventCreatedAtLT))
	}
	if l.GithubEventPublicEQ != nil {
		predicates = append(predicates, githubevent.PublicEQ(*l.GithubEventPublicEQ))
	}
	if l.GithubEventActorIDEQ != nil {
		predicates = append(predicates, githubevent.ActorIDEQ(*l.GithubEventActorIDEQ))
	}
	if l.GithubEventActorIDNEQ != nil {
		predicates = append(predicates, githubevent.ActorIDNEQ(*l.GithubEventActorIDNEQ))
	}
	if l.GithubEventRepoIDEQ != nil {
		predicates = append(predicates, githubevent.RepoIDEQ(*l.GithubEventRepoIDEQ))
	}
	if l.GithubEventRepoIDNEQ != nil {
		predicates = append(predicates, githubevent.RepoIDNEQ(*l.GithubEventRepoIDNEQ))
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListGithubEventParams) ApplySorting(query *ent.GithubEventQuery) error {
	if err := l.Sorted.Validate(GithubEventSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingGithubEvent(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListGithubEventParams) Exec(ctx context.Context, query *ent.GithubEventQuery) (results *PagedResponse[ent.GithubEvent], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadGithubEvent(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, GithubEventPageConfig)
}

// ListGithubGistParams defines parameters for listing GithubGists via a GET request.
type ListGithubGistParams struct {
	Sorted
	Paginated[*ent.GithubGistQuery, ent.GithubGist]
	Filtered[predicate.GithubGist]

	// Filters field "gist_id" to be equal to the provided value.
	GithubGistGistIDEQ *string `form:"gistID.eq,omitempty" json:"github_gist_gist_ideq,omitempty"`
	// Filters field "gist_id" to be not equal to the provided value.
	GithubGistGistIDNEQ *string `form:"gistID.neq,omitempty" json:"github_gist_gist_idneq,omitempty"`
	// Filters field "gist_id" to be equal to the provided value, case-insensitive.
	GithubGistGistIDEqualFold *string `form:"gistID.ieq,omitempty" json:"github_gist_gist_id_equal_fold,omitempty"`
	// Filters field "public" to be equal to the provided value.
	GithubGistPublicEQ *bool `form:"public.eq,omitempty" json:"github_gist_public_eq,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	GithubGistCreatedAtEQ *time.Time `form:"createdAt.eq,omitempty" json:"github_gist_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	GithubGistCreatedAtNEQ *time.Time `form:"createdAt.neq,omitempty" json:"github_gist_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	GithubGistCreatedAtGT *time.Time `form:"createdAt.gt,omitempty" json:"github_gist_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	GithubGistCreatedAtLT *time.Time `form:"createdAt.lt,omitempty" json:"github_gist_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	GithubGistUpdatedAtEQ *time.Time `form:"updatedAt.eq,omitempty" json:"github_gist_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	GithubGistUpdatedAtNEQ *time.Time `form:"updatedAt.neq,omitempty" json:"github_gist_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	GithubGistUpdatedAtGT *time.Time `form:"updatedAt.gt,omitempty" json:"github_gist_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	GithubGistUpdatedAtLT *time.Time `form:"updatedAt.lt,omitempty" json:"github_gist_updated_at_lt,omitempty"`
	// Filters field "description" to be null/nil.
	GithubGistDescriptionIsNil *bool `form:"description.null,omitempty" json:"github_gist_description_is_nil,omitempty"`
	// Filters field "description" to contain the provided value.
	GithubGistDescriptionContains *string `form:"description.has,omitempty" json:"github_gist_description_contains,omitempty"`
	// Filters field "description" to contain the provided value, case-insensitive.
	GithubGistDescriptionContainsFold *string `form:"description.ihas,omitempty" json:"github_gist_description_contains_fold,omitempty"`
	// Filters field "name" to be equal to the provided value.
	GithubGistNameEQ *string `form:"name.eq,omitempty" json:"github_gist_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	GithubGistNameNEQ *string `form:"name.neq,omitempty" json:"github_gist_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	GithubGistNameIn []string `form:"name.in,omitempty" json:"github_gist_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	GithubGistNameNotIn []string `form:"name.notIn,omitempty" json:"github_gist_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	GithubGistNameEqualFold *string `form:"name.ieq,omitempty" json:"github_gist_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	GithubGistNameContains *string `form:"name.has,omitempty" json:"github_gist_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	GithubGistNameContainsFold *string `form:"name.ihas,omitempty" json:"github_gist_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	GithubGistNameHasPrefix *string `form:"name.prefix,omitempty" json:"github_gist_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	GithubGistNameHasSuffix *string `form:"name.suffix,omitempty" json:"github_gist_name_has_suffix,omitempty"`
	// Filters field "type" to be equal to the provided value.
	GithubGistTypeEQ *string `form:"type.eq,omitempty" json:"github_gist_type_eq,omitempty"`
	// Filters field "type" to be not equal to the provided value.
	GithubGistTypeNEQ *string `form:"type.neq,omitempty" json:"github_gist_type_neq,omitempty"`
	// Filters field "type" to be within the provided values.
	GithubGistTypeIn []string `form:"type.in,omitempty" json:"github_gist_type_in,omitempty"`
	// Filters field "type" to be not within the provided values.
	GithubGistTypeNotIn []string `form:"type.notIn,omitempty" json:"github_gist_type_not_in,omitempty"`
	// Filters field "type" to be equal to the provided value, case-insensitive.
	GithubGistTypeEqualFold *string `form:"type.ieq,omitempty" json:"github_gist_type_equal_fold,omitempty"`
	// Filters field "type" to contain the provided value.
	GithubGistTypeContains *string `form:"type.has,omitempty" json:"github_gist_type_contains,omitempty"`
	// Filters field "type" to contain the provided value, case-insensitive.
	GithubGistTypeContainsFold *string `form:"type.ihas,omitempty" json:"github_gist_type_contains_fold,omitempty"`
	// Filters field "type" to start with the provided value.
	GithubGistTypeHasPrefix *string `form:"type.prefix,omitempty" json:"github_gist_type_has_prefix,omitempty"`
	// Filters field "type" to end with the provided value.
	GithubGistTypeHasSuffix *string `form:"type.suffix,omitempty" json:"github_gist_type_has_suffix,omitempty"`
	// Filters field "language" to be equal to the provided value.
	GithubGistLanguageEQ *string `form:"language.eq,omitempty" json:"github_gist_language_eq,omitempty"`
	// Filters field "language" to be not equal to the provided value.
	GithubGistLanguageNEQ *string `form:"language.neq,omitempty" json:"github_gist_language_neq,omitempty"`
	// Filters field "language" to be null/nil.
	GithubGistLanguageIsNil *bool `form:"language.null,omitempty" json:"github_gist_language_is_nil,omitempty"`
	// Filters field "language" to be within the provided values.
	GithubGistLanguageIn []string `form:"language.in,omitempty" json:"github_gist_language_in,omitempty"`
	// Filters field "language" to be not within the provided values.
	GithubGistLanguageNotIn []string `form:"language.notIn,omitempty" json:"github_gist_language_not_in,omitempty"`
	// Filters field "language" to be equal to the provided value, case-insensitive.
	GithubGistLanguageEqualFold *string `form:"language.ieq,omitempty" json:"github_gist_language_equal_fold,omitempty"`
	// Filters field "language" to contain the provided value.
	GithubGistLanguageContains *string `form:"language.has,omitempty" json:"github_gist_language_contains,omitempty"`
	// Filters field "language" to contain the provided value, case-insensitive.
	GithubGistLanguageContainsFold *string `form:"language.ihas,omitempty" json:"github_gist_language_contains_fold,omitempty"`
	// Filters field "language" to start with the provided value.
	GithubGistLanguageHasPrefix *string `form:"language.prefix,omitempty" json:"github_gist_language_has_prefix,omitempty"`
	// Filters field "language" to end with the provided value.
	GithubGistLanguageHasSuffix *string `form:"language.suffix,omitempty" json:"github_gist_language_has_suffix,omitempty"`
	// Filters field "size" to be equal to the provided value.
	GithubGistSizeEQ *int64 `form:"size.eq,omitempty" json:"github_gist_size_eq,omitempty"`
	// Filters field "size" to be not equal to the provided value.
	GithubGistSizeNEQ *int64 `form:"size.neq,omitempty" json:"github_gist_size_neq,omitempty"`
	// Filters field "content" to contain the provided value.
	GithubGistContentContains *string `form:"content.has,omitempty" json:"github_gist_content_contains,omitempty"`
	// Filters field "content" to contain the provided value, case-insensitive.
	GithubGistContentContainsFold *string `form:"content.ihas,omitempty" json:"github_gist_content_contains_fold,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in GithubGist.
func (l *ListGithubGistParams) FilterPredicates() (predicate.GithubGist, error) {
	var predicates []predicate.GithubGist

	if l.GithubGistGistIDEQ != nil {
		predicates = append(predicates, githubgist.GistIDEQ(*l.GithubGistGistIDEQ))
	}
	if l.GithubGistGistIDNEQ != nil {
		predicates = append(predicates, githubgist.GistIDNEQ(*l.GithubGistGistIDNEQ))
	}
	if l.GithubGistGistIDEqualFold != nil {
		predicates = append(predicates, githubgist.GistIDEqualFold(*l.GithubGistGistIDEqualFold))
	}
	if l.GithubGistPublicEQ != nil {
		predicates = append(predicates, githubgist.PublicEQ(*l.GithubGistPublicEQ))
	}
	if l.GithubGistCreatedAtEQ != nil {
		predicates = append(predicates, githubgist.CreatedAtEQ(*l.GithubGistCreatedAtEQ))
	}
	if l.GithubGistCreatedAtNEQ != nil {
		predicates = append(predicates, githubgist.CreatedAtNEQ(*l.GithubGistCreatedAtNEQ))
	}
	if l.GithubGistCreatedAtGT != nil {
		predicates = append(predicates, githubgist.CreatedAtGT(*l.GithubGistCreatedAtGT))
	}
	if l.GithubGistCreatedAtLT != nil {
		predicates = append(predicates, githubgist.CreatedAtLT(*l.GithubGistCreatedAtLT))
	}
	if l.GithubGistUpdatedAtEQ != nil {
		predicates = append(predicates, githubgist.UpdatedAtEQ(*l.GithubGistUpdatedAtEQ))
	}
	if l.GithubGistUpdatedAtNEQ != nil {
		predicates = append(predicates, githubgist.UpdatedAtNEQ(*l.GithubGistUpdatedAtNEQ))
	}
	if l.GithubGistUpdatedAtGT != nil {
		predicates = append(predicates, githubgist.UpdatedAtGT(*l.GithubGistUpdatedAtGT))
	}
	if l.GithubGistUpdatedAtLT != nil {
		predicates = append(predicates, githubgist.UpdatedAtLT(*l.GithubGistUpdatedAtLT))
	}
	if l.GithubGistDescriptionIsNil != nil {
		if *l.GithubGistDescriptionIsNil {
			predicates = append(predicates, githubgist.DescriptionIsNil())
		} else {
			predicates = append(predicates, githubgist.Not(githubgist.DescriptionIsNil()))
		}
	}
	if l.GithubGistDescriptionContains != nil {
		predicates = append(predicates, githubgist.DescriptionContains(*l.GithubGistDescriptionContains))
	}
	if l.GithubGistDescriptionContainsFold != nil {
		predicates = append(predicates, githubgist.DescriptionContainsFold(*l.GithubGistDescriptionContainsFold))
	}
	if l.GithubGistNameEQ != nil {
		predicates = append(predicates, githubgist.NameEQ(*l.GithubGistNameEQ))
	}
	if l.GithubGistNameNEQ != nil {
		predicates = append(predicates, githubgist.NameNEQ(*l.GithubGistNameNEQ))
	}
	if l.GithubGistNameIn != nil {
		predicates = append(predicates, githubgist.NameIn(l.GithubGistNameIn...))
	}
	if l.GithubGistNameNotIn != nil {
		predicates = append(predicates, githubgist.NameNotIn(l.GithubGistNameNotIn...))
	}
	if l.GithubGistNameEqualFold != nil {
		predicates = append(predicates, githubgist.NameEqualFold(*l.GithubGistNameEqualFold))
	}
	if l.GithubGistNameContains != nil {
		predicates = append(predicates, githubgist.NameContains(*l.GithubGistNameContains))
	}
	if l.GithubGistNameContainsFold != nil {
		predicates = append(predicates, githubgist.NameContainsFold(*l.GithubGistNameContainsFold))
	}
	if l.GithubGistNameHasPrefix != nil {
		predicates = append(predicates, githubgist.NameHasPrefix(*l.GithubGistNameHasPrefix))
	}
	if l.GithubGistNameHasSuffix != nil {
		predicates = append(predicates, githubgist.NameHasSuffix(*l.GithubGistNameHasSuffix))
	}
	if l.GithubGistTypeEQ != nil {
		predicates = append(predicates, githubgist.TypeEQ(*l.GithubGistTypeEQ))
	}
	if l.GithubGistTypeNEQ != nil {
		predicates = append(predicates, githubgist.TypeNEQ(*l.GithubGistTypeNEQ))
	}
	if l.GithubGistTypeIn != nil {
		predicates = append(predicates, githubgist.TypeIn(l.GithubGistTypeIn...))
	}
	if l.GithubGistTypeNotIn != nil {
		predicates = append(predicates, githubgist.TypeNotIn(l.GithubGistTypeNotIn...))
	}
	if l.GithubGistTypeEqualFold != nil {
		predicates = append(predicates, githubgist.TypeEqualFold(*l.GithubGistTypeEqualFold))
	}
	if l.GithubGistTypeContains != nil {
		predicates = append(predicates, githubgist.TypeContains(*l.GithubGistTypeContains))
	}
	if l.GithubGistTypeContainsFold != nil {
		predicates = append(predicates, githubgist.TypeContainsFold(*l.GithubGistTypeContainsFold))
	}
	if l.GithubGistTypeHasPrefix != nil {
		predicates = append(predicates, githubgist.TypeHasPrefix(*l.GithubGistTypeHasPrefix))
	}
	if l.GithubGistTypeHasSuffix != nil {
		predicates = append(predicates, githubgist.TypeHasSuffix(*l.GithubGistTypeHasSuffix))
	}
	if l.GithubGistLanguageEQ != nil {
		predicates = append(predicates, githubgist.LanguageEQ(*l.GithubGistLanguageEQ))
	}
	if l.GithubGistLanguageNEQ != nil {
		predicates = append(predicates, githubgist.LanguageNEQ(*l.GithubGistLanguageNEQ))
	}
	if l.GithubGistLanguageIsNil != nil {
		if *l.GithubGistLanguageIsNil {
			predicates = append(predicates, githubgist.LanguageIsNil())
		} else {
			predicates = append(predicates, githubgist.Not(githubgist.LanguageIsNil()))
		}
	}
	if l.GithubGistLanguageIn != nil {
		predicates = append(predicates, githubgist.LanguageIn(l.GithubGistLanguageIn...))
	}
	if l.GithubGistLanguageNotIn != nil {
		predicates = append(predicates, githubgist.LanguageNotIn(l.GithubGistLanguageNotIn...))
	}
	if l.GithubGistLanguageEqualFold != nil {
		predicates = append(predicates, githubgist.LanguageEqualFold(*l.GithubGistLanguageEqualFold))
	}
	if l.GithubGistLanguageContains != nil {
		predicates = append(predicates, githubgist.LanguageContains(*l.GithubGistLanguageContains))
	}
	if l.GithubGistLanguageContainsFold != nil {
		predicates = append(predicates, githubgist.LanguageContainsFold(*l.GithubGistLanguageContainsFold))
	}
	if l.GithubGistLanguageHasPrefix != nil {
		predicates = append(predicates, githubgist.LanguageHasPrefix(*l.GithubGistLanguageHasPrefix))
	}
	if l.GithubGistLanguageHasSuffix != nil {
		predicates = append(predicates, githubgist.LanguageHasSuffix(*l.GithubGistLanguageHasSuffix))
	}
	if l.GithubGistSizeEQ != nil {
		predicates = append(predicates, githubgist.SizeEQ(*l.GithubGistSizeEQ))
	}
	if l.GithubGistSizeNEQ != nil {
		predicates = append(predicates, githubgist.SizeNEQ(*l.GithubGistSizeNEQ))
	}
	if l.GithubGistContentContains != nil {
		predicates = append(predicates, githubgist.ContentContains(*l.GithubGistContentContains))
	}
	if l.GithubGistContentContainsFold != nil {
		predicates = append(predicates, githubgist.ContentContainsFold(*l.GithubGistContentContainsFold))
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListGithubGistParams) ApplySorting(query *ent.GithubGistQuery) error {
	if err := l.Sorted.Validate(GithubGistSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingGithubGist(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListGithubGistParams) Exec(ctx context.Context, query *ent.GithubGistQuery) (results *PagedResponse[ent.GithubGist], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadGithubGist(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, GithubGistPageConfig)
}

// ListGithubReleaseParams defines parameters for listing GithubReleases via a GET request.
type ListGithubReleaseParams struct {
	Sorted
	Paginated[*ent.GithubReleaseQuery, ent.GithubRelease]
	Filtered[predicate.GithubRelease]

	// Filters field "release_id" to be equal to the provided value.
	GithubReleaseReleaseIDEQ *int64 `form:"releaseID.eq,omitempty" json:"github_release_release_ideq,omitempty"`
	// Filters field "release_id" to be not equal to the provided value.
	GithubReleaseReleaseIDNEQ *int64 `form:"releaseID.neq,omitempty" json:"github_release_release_idneq,omitempty"`
	// Filters field "tag_name" to be equal to the provided value.
	GithubReleaseTagNameEQ *string `form:"tagName.eq,omitempty" json:"github_release_tag_name_eq,omitempty"`
	// Filters field "tag_name" to be not equal to the provided value.
	GithubReleaseTagNameNEQ *string `form:"tagName.neq,omitempty" json:"github_release_tag_name_neq,omitempty"`
	// Filters field "tag_name" to be within the provided values.
	GithubReleaseTagNameIn []string `form:"tagName.in,omitempty" json:"github_release_tag_name_in,omitempty"`
	// Filters field "tag_name" to be not within the provided values.
	GithubReleaseTagNameNotIn []string `form:"tagName.notIn,omitempty" json:"github_release_tag_name_not_in,omitempty"`
	// Filters field "tag_name" to be equal to the provided value, case-insensitive.
	GithubReleaseTagNameEqualFold *string `form:"tagName.ieq,omitempty" json:"github_release_tag_name_equal_fold,omitempty"`
	// Filters field "tag_name" to contain the provided value.
	GithubReleaseTagNameContains *string `form:"tagName.has,omitempty" json:"github_release_tag_name_contains,omitempty"`
	// Filters field "tag_name" to contain the provided value, case-insensitive.
	GithubReleaseTagNameContainsFold *string `form:"tagName.ihas,omitempty" json:"github_release_tag_name_contains_fold,omitempty"`
	// Filters field "tag_name" to start with the provided value.
	GithubReleaseTagNameHasPrefix *string `form:"tagName.prefix,omitempty" json:"github_release_tag_name_has_prefix,omitempty"`
	// Filters field "tag_name" to end with the provided value.
	GithubReleaseTagNameHasSuffix *string `form:"tagName.suffix,omitempty" json:"github_release_tag_name_has_suffix,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value.
	GithubReleaseTargetCommitishEQ *string `form:"targetCommitish.eq,omitempty" json:"github_release_target_commitish_eq,omitempty"`
	// Filters field "target_commitish" to be not equal to the provided value.
	GithubReleaseTargetCommitishNEQ *string `form:"targetCommitish.neq,omitempty" json:"github_release_target_commitish_neq,omitempty"`
	// Filters field "target_commitish" to be within the provided values.
	GithubReleaseTargetCommitishIn []string `form:"targetCommitish.in,omitempty" json:"github_release_target_commitish_in,omitempty"`
	// Filters field "target_commitish" to be not within the provided values.
	GithubReleaseTargetCommitishNotIn []string `form:"targetCommitish.notIn,omitempty" json:"github_release_target_commitish_not_in,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value, case-insensitive.
	GithubReleaseTargetCommitishEqualFold *string `form:"targetCommitish.ieq,omitempty" json:"github_release_target_commitish_equal_fold,omitempty"`
	// Filters field "target_commitish" to contain the provided value.
	GithubReleaseTargetCommitishContains *string `form:"targetCommitish.has,omitempty" json:"github_release_target_commitish_contains,omitempty"`
	// Filters field "target_commitish" to contain the provided value, case-insensitive.
	GithubReleaseTargetCommitishContainsFold *string `form:"targetCommitish.ihas,omitempty" json:"github_release_target_commitish_contains_fold,omitempty"`
	// Filters field "target_commitish" to start with the provided value.
	GithubReleaseTargetCommitishHasPrefix *string `form:"targetCommitish.prefix,omitempty" json:"github_release_target_commitish_has_prefix,omitempty"`
	// Filters field "target_commitish" to end with the provided value.
	GithubReleaseTargetCommitishHasSuffix *string `form:"targetCommitish.suffix,omitempty" json:"github_release_target_commitish_has_suffix,omitempty"`
	// Filters field "name" to be equal to the provided value.
	GithubReleaseNameEQ *string `form:"name.eq,omitempty" json:"github_release_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	GithubReleaseNameNEQ *string `form:"name.neq,omitempty" json:"github_release_name_neq,omitempty"`
	// Filters field "name" to be null/nil.
	GithubReleaseNameIsNil *bool `form:"name.null,omitempty" json:"github_release_name_is_nil,omitempty"`
	// Filters field "name" to be within the provided values.
	GithubReleaseNameIn []string `form:"name.in,omitempty" json:"github_release_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	GithubReleaseNameNotIn []string `form:"name.notIn,omitempty" json:"github_release_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	GithubReleaseNameEqualFold *string `form:"name.ieq,omitempty" json:"github_release_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	GithubReleaseNameContains *string `form:"name.has,omitempty" json:"github_release_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	GithubReleaseNameContainsFold *string `form:"name.ihas,omitempty" json:"github_release_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	GithubReleaseNameHasPrefix *string `form:"name.prefix,omitempty" json:"github_release_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	GithubReleaseNameHasSuffix *string `form:"name.suffix,omitempty" json:"github_release_name_has_suffix,omitempty"`
	// Filters field "draft" to be equal to the provided value.
	GithubReleaseDraftEQ *bool `form:"draft.eq,omitempty" json:"github_release_draft_eq,omitempty"`
	// Filters field "prerelease" to be equal to the provided value.
	GithubReleasePrereleaseEQ *bool `form:"prerelease.eq,omitempty" json:"github_release_prerelease_eq,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	GithubReleaseCreatedAtEQ *time.Time `form:"createdAt.eq,omitempty" json:"github_release_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	GithubReleaseCreatedAtNEQ *time.Time `form:"createdAt.neq,omitempty" json:"github_release_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	GithubReleaseCreatedAtGT *time.Time `form:"createdAt.gt,omitempty" json:"github_release_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	GithubReleaseCreatedAtLT *time.Time `form:"createdAt.lt,omitempty" json:"github_release_created_at_lt,omitempty"`
	// Filters field "published_at" to be equal to the provided value.
	GithubReleasePublishedAtEQ *time.Time `form:"publishedAt.eq,omitempty" json:"github_release_published_at_eq,omitempty"`
	// Filters field "published_at" to be not equal to the provided value.
	GithubReleasePublishedAtNEQ *time.Time `form:"publishedAt.neq,omitempty" json:"github_release_published_at_neq,omitempty"`
	// Filters field "published_at" to be greater than the provided value.
	GithubReleasePublishedAtGT *time.Time `form:"publishedAt.gt,omitempty" json:"github_release_published_at_gt,omitempty"`
	// Filters field "published_at" to be less than the provided value.
	GithubReleasePublishedAtLT *time.Time `form:"publishedAt.lt,omitempty" json:"github_release_published_at_lt,omitempty"`
	// If true, only return entities that have a repository edge.
	EdgeHasRepository *bool `form:"has.repository,omitempty" json:"edge_has_repository,omitempty"`
	// Filters field "repo_id" to be equal to the provided value.
	EdgeRepositoryRepoIDEQ *int64 `form:"repository.repoID.eq,omitempty" json:"edge_repository_repo_ideq,omitempty"`
	// Filters field "repo_id" to be not equal to the provided value.
	EdgeRepositoryRepoIDNEQ *int64 `form:"repository.repoID.neq,omitempty" json:"edge_repository_repo_idneq,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeRepositoryNameEQ *string `form:"repository.name.eq,omitempty" json:"edge_repository_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeRepositoryNameNEQ *string `form:"repository.name.neq,omitempty" json:"edge_repository_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeRepositoryNameIn []string `form:"repository.name.in,omitempty" json:"edge_repository_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeRepositoryNameNotIn []string `form:"repository.name.notIn,omitempty" json:"edge_repository_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeRepositoryNameEqualFold *string `form:"repository.name.ieq,omitempty" json:"edge_repository_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeRepositoryNameContains *string `form:"repository.name.has,omitempty" json:"edge_repository_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeRepositoryNameContainsFold *string `form:"repository.name.ihas,omitempty" json:"edge_repository_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeRepositoryNameHasPrefix *string `form:"repository.name.prefix,omitempty" json:"edge_repository_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeRepositoryNameHasSuffix *string `form:"repository.name.suffix,omitempty" json:"edge_repository_name_has_suffix,omitempty"`
	// Filters field "full_name" to be equal to the provided value.
	EdgeRepositoryFullNameEQ *string `form:"repository.fullName.eq,omitempty" json:"edge_repository_full_name_eq,omitempty"`
	// Filters field "full_name" to be not equal to the provided value.
	EdgeRepositoryFullNameNEQ *string `form:"repository.fullName.neq,omitempty" json:"edge_repository_full_name_neq,omitempty"`
	// Filters field "full_name" to be within the provided values.
	EdgeRepositoryFullNameIn []string `form:"repository.fullName.in,omitempty" json:"edge_repository_full_name_in,omitempty"`
	// Filters field "full_name" to be not within the provided values.
	EdgeRepositoryFullNameNotIn []string `form:"repository.fullName.notIn,omitempty" json:"edge_repository_full_name_not_in,omitempty"`
	// Filters field "full_name" to be equal to the provided value, case-insensitive.
	EdgeRepositoryFullNameEqualFold *string `form:"repository.fullName.ieq,omitempty" json:"edge_repository_full_name_equal_fold,omitempty"`
	// Filters field "full_name" to contain the provided value.
	EdgeRepositoryFullNameContains *string `form:"repository.fullName.has,omitempty" json:"edge_repository_full_name_contains,omitempty"`
	// Filters field "full_name" to contain the provided value, case-insensitive.
	EdgeRepositoryFullNameContainsFold *string `form:"repository.fullName.ihas,omitempty" json:"edge_repository_full_name_contains_fold,omitempty"`
	// Filters field "full_name" to start with the provided value.
	EdgeRepositoryFullNameHasPrefix *string `form:"repository.fullName.prefix,omitempty" json:"edge_repository_full_name_has_prefix,omitempty"`
	// Filters field "full_name" to end with the provided value.
	EdgeRepositoryFullNameHasSuffix *string `form:"repository.fullName.suffix,omitempty" json:"edge_repository_full_name_has_suffix,omitempty"`
	// Filters field "owner_login" to be equal to the provided value.
	EdgeRepositoryOwnerLoginEQ *string `form:"repository.ownerLogin.eq,omitempty" json:"edge_repository_owner_login_eq,omitempty"`
	// Filters field "owner_login" to be not equal to the provided value.
	EdgeRepositoryOwnerLoginNEQ *string `form:"repository.ownerLogin.neq,omitempty" json:"edge_repository_owner_login_neq,omitempty"`
	// Filters field "owner_login" to be within the provided values.
	EdgeRepositoryOwnerLoginIn []string `form:"repository.ownerLogin.in,omitempty" json:"edge_repository_owner_login_in,omitempty"`
	// Filters field "owner_login" to be not within the provided values.
	EdgeRepositoryOwnerLoginNotIn []string `form:"repository.ownerLogin.notIn,omitempty" json:"edge_repository_owner_login_not_in,omitempty"`
	// Filters field "owner_login" to be equal to the provided value, case-insensitive.
	EdgeRepositoryOwnerLoginEqualFold *string `form:"repository.ownerLogin.ieq,omitempty" json:"edge_repository_owner_login_equal_fold,omitempty"`
	// Filters field "owner_login" to contain the provided value.
	EdgeRepositoryOwnerLoginContains *string `form:"repository.ownerLogin.has,omitempty" json:"edge_repository_owner_login_contains,omitempty"`
	// Filters field "owner_login" to contain the provided value, case-insensitive.
	EdgeRepositoryOwnerLoginContainsFold *string `form:"repository.ownerLogin.ihas,omitempty" json:"edge_repository_owner_login_contains_fold,omitempty"`
	// Filters field "owner_login" to start with the provided value.
	EdgeRepositoryOwnerLoginHasPrefix *string `form:"repository.ownerLogin.prefix,omitempty" json:"edge_repository_owner_login_has_prefix,omitempty"`
	// Filters field "owner_login" to end with the provided value.
	EdgeRepositoryOwnerLoginHasSuffix *string `form:"repository.ownerLogin.suffix,omitempty" json:"edge_repository_owner_login_has_suffix,omitempty"`
	// Filters field "public" to be equal to the provided value.
	EdgeRepositoryPublicEQ *bool `form:"repository.public.eq,omitempty" json:"edge_repository_public_eq,omitempty"`
	// Filters field "description" to be null/nil.
	EdgeRepositoryDescriptionIsNil *bool `form:"repository.description.null,omitempty" json:"edge_repository_description_is_nil,omitempty"`
	// Filters field "description" to contain the provided value.
	EdgeRepositoryDescriptionContains *string `form:"repository.description.has,omitempty" json:"edge_repository_description_contains,omitempty"`
	// Filters field "description" to contain the provided value, case-insensitive.
	EdgeRepositoryDescriptionContainsFold *string `form:"repository.description.ihas,omitempty" json:"edge_repository_description_contains_fold,omitempty"`
	// Filters field "fork" to be equal to the provided value.
	EdgeRepositoryForkEQ *bool `form:"repository.fork.eq,omitempty" json:"edge_repository_fork_eq,omitempty"`
	// Filters field "star_count" to be greater than the provided value.
	EdgeRepositoryStarCountGT *int `form:"repository.starCount.gt,omitempty" json:"edge_repository_star_count_gt,omitempty"`
	// Filters field "star_count" to be less than the provided value.
	EdgeRepositoryStarCountLT *int `form:"repository.starCount.lt,omitempty" json:"edge_repository_star_count_lt,omitempty"`
	// Filters field "default_branch" to be equal to the provided value.
	EdgeRepositoryDefaultBranchEQ *string `form:"repository.defaultBranch.eq,omitempty" json:"edge_repository_default_branch_eq,omitempty"`
	// Filters field "default_branch" to be not equal to the provided value.
	EdgeRepositoryDefaultBranchNEQ *string `form:"repository.defaultBranch.neq,omitempty" json:"edge_repository_default_branch_neq,omitempty"`
	// Filters field "default_branch" to be within the provided values.
	EdgeRepositoryDefaultBranchIn []string `form:"repository.defaultBranch.in,omitempty" json:"edge_repository_default_branch_in,omitempty"`
	// Filters field "default_branch" to be not within the provided values.
	EdgeRepositoryDefaultBranchNotIn []string `form:"repository.defaultBranch.notIn,omitempty" json:"edge_repository_default_branch_not_in,omitempty"`
	// Filters field "default_branch" to be equal to the provided value, case-insensitive.
	EdgeRepositoryDefaultBranchEqualFold *string `form:"repository.defaultBranch.ieq,omitempty" json:"edge_repository_default_branch_equal_fold,omitempty"`
	// Filters field "default_branch" to contain the provided value.
	EdgeRepositoryDefaultBranchContains *string `form:"repository.defaultBranch.has,omitempty" json:"edge_repository_default_branch_contains,omitempty"`
	// Filters field "default_branch" to contain the provided value, case-insensitive.
	EdgeRepositoryDefaultBranchContainsFold *string `form:"repository.defaultBranch.ihas,omitempty" json:"edge_repository_default_branch_contains_fold,omitempty"`
	// Filters field "default_branch" to start with the provided value.
	EdgeRepositoryDefaultBranchHasPrefix *string `form:"repository.defaultBranch.prefix,omitempty" json:"edge_repository_default_branch_has_prefix,omitempty"`
	// Filters field "default_branch" to end with the provided value.
	EdgeRepositoryDefaultBranchHasSuffix *string `form:"repository.defaultBranch.suffix,omitempty" json:"edge_repository_default_branch_has_suffix,omitempty"`
	// Filters field "is_template" to be equal to the provided value.
	EdgeRepositoryIsTemplateEQ *bool `form:"repository.isTemplate.eq,omitempty" json:"edge_repository_is_template_eq,omitempty"`
	// Filters field "has_issues" to be equal to the provided value.
	EdgeRepositoryHasIssuesEQ *bool `form:"repository.hasIssues.eq,omitempty" json:"edge_repository_has_issues_eq,omitempty"`
	// Filters field "archived" to be equal to the provided value.
	EdgeRepositoryArchivedEQ *bool `form:"repository.archived.eq,omitempty" json:"edge_repository_archived_eq,omitempty"`
	// Filters field "pushed_at" to be within the provided values.
	EdgeRepositoryPushedAtIn []time.Time `form:"repository.pushedAt.in,omitempty" json:"edge_repository_pushed_at_in,omitempty"`
	// Filters field "pushed_at" to be not within the provided values.
	EdgeRepositoryPushedAtNotIn []time.Time `form:"repository.pushedAt.notIn,omitempty" json:"edge_repository_pushed_at_not_in,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	EdgeRepositoryCreatedAtEQ *time.Time `form:"repository.createdAt.eq,omitempty" json:"edge_repository_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	EdgeRepositoryCreatedAtNEQ *time.Time `form:"repository.createdAt.neq,omitempty" json:"edge_repository_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	EdgeRepositoryCreatedAtGT *time.Time `form:"repository.createdAt.gt,omitempty" json:"edge_repository_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	EdgeRepositoryCreatedAtLT *time.Time `form:"repository.createdAt.lt,omitempty" json:"edge_repository_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	EdgeRepositoryUpdatedAtEQ *time.Time `form:"repository.updatedAt.eq,omitempty" json:"edge_repository_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	EdgeRepositoryUpdatedAtNEQ *time.Time `form:"repository.updatedAt.neq,omitempty" json:"edge_repository_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	EdgeRepositoryUpdatedAtGT *time.Time `form:"repository.updatedAt.gt,omitempty" json:"edge_repository_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	EdgeRepositoryUpdatedAtLT *time.Time `form:"repository.updatedAt.lt,omitempty" json:"edge_repository_updated_at_lt,omitempty"`
	// Filters field "updated_at" to be null/nil.
	EdgeRepositoryUpdatedAtIsNil *bool `form:"repository.updatedAt.null,omitempty" json:"edge_repository_updated_at_is_nil,omitempty"`
	// If true, only return entities that have a asset edge.
	EdgeHasAsset *bool `form:"has.asset,omitempty" json:"edge_has_asset,omitempty"`
	// Filters field "asset_id" to be equal to the provided value.
	EdgeAssetAssetIDEQ *int64 `form:"asset.assetID.eq,omitempty" json:"edge_asset_asset_ideq,omitempty"`
	// Filters field "asset_id" to be not equal to the provided value.
	EdgeAssetAssetIDNEQ *int64 `form:"asset.assetID.neq,omitempty" json:"edge_asset_asset_idneq,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeAssetNameEQ *string `form:"asset.name.eq,omitempty" json:"edge_asset_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeAssetNameNEQ *string `form:"asset.name.neq,omitempty" json:"edge_asset_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeAssetNameIn []string `form:"asset.name.in,omitempty" json:"edge_asset_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeAssetNameNotIn []string `form:"asset.name.notIn,omitempty" json:"edge_asset_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeAssetNameEqualFold *string `form:"asset.name.ieq,omitempty" json:"edge_asset_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeAssetNameContains *string `form:"asset.name.has,omitempty" json:"edge_asset_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeAssetNameContainsFold *string `form:"asset.name.ihas,omitempty" json:"edge_asset_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeAssetNameHasPrefix *string `form:"asset.name.prefix,omitempty" json:"edge_asset_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeAssetNameHasSuffix *string `form:"asset.name.suffix,omitempty" json:"edge_asset_name_has_suffix,omitempty"`
	// Filters field "label" to be equal to the provided value.
	EdgeAssetLabelEQ *string `form:"asset.label.eq,omitempty" json:"edge_asset_label_eq,omitempty"`
	// Filters field "label" to be not equal to the provided value.
	EdgeAssetLabelNEQ *string `form:"asset.label.neq,omitempty" json:"edge_asset_label_neq,omitempty"`
	// Filters field "label" to be null/nil.
	EdgeAssetLabelIsNil *bool `form:"asset.label.null,omitempty" json:"edge_asset_label_is_nil,omitempty"`
	// Filters field "label" to be within the provided values.
	EdgeAssetLabelIn []string `form:"asset.label.in,omitempty" json:"edge_asset_label_in,omitempty"`
	// Filters field "label" to be not within the provided values.
	EdgeAssetLabelNotIn []string `form:"asset.label.notIn,omitempty" json:"edge_asset_label_not_in,omitempty"`
	// Filters field "label" to be equal to the provided value, case-insensitive.
	EdgeAssetLabelEqualFold *string `form:"asset.label.ieq,omitempty" json:"edge_asset_label_equal_fold,omitempty"`
	// Filters field "label" to contain the provided value.
	EdgeAssetLabelContains *string `form:"asset.label.has,omitempty" json:"edge_asset_label_contains,omitempty"`
	// Filters field "label" to contain the provided value, case-insensitive.
	EdgeAssetLabelContainsFold *string `form:"asset.label.ihas,omitempty" json:"edge_asset_label_contains_fold,omitempty"`
	// Filters field "label" to start with the provided value.
	EdgeAssetLabelHasPrefix *string `form:"asset.label.prefix,omitempty" json:"edge_asset_label_has_prefix,omitempty"`
	// Filters field "label" to end with the provided value.
	EdgeAssetLabelHasSuffix *string `form:"asset.label.suffix,omitempty" json:"edge_asset_label_has_suffix,omitempty"`
	// Filters field "size" to be greater than the provided value.
	EdgeAssetSizeGT *int64 `form:"asset.size.gt,omitempty" json:"edge_asset_size_gt,omitempty"`
	// Filters field "size" to be less than the provided value.
	EdgeAssetSizeLT *int64 `form:"asset.size.lt,omitempty" json:"edge_asset_size_lt,omitempty"`
	// Filters field "download_count" to be greater than the provided value.
	EdgeAssetDownloadCountGT *int64 `form:"asset.downloadCount.gt,omitempty" json:"edge_asset_download_count_gt,omitempty"`
	// Filters field "download_count" to be less than the provided value.
	EdgeAssetDownloadCountLT *int64 `form:"asset.downloadCount.lt,omitempty" json:"edge_asset_download_count_lt,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	EdgeAssetCreatedAtEQ *time.Time `form:"asset.createdAt.eq,omitempty" json:"edge_asset_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	EdgeAssetCreatedAtNEQ *time.Time `form:"asset.createdAt.neq,omitempty" json:"edge_asset_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	EdgeAssetCreatedAtGT *time.Time `form:"asset.createdAt.gt,omitempty" json:"edge_asset_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	EdgeAssetCreatedAtLT *time.Time `form:"asset.createdAt.lt,omitempty" json:"edge_asset_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	EdgeAssetUpdatedAtEQ *time.Time `form:"asset.updatedAt.eq,omitempty" json:"edge_asset_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	EdgeAssetUpdatedAtNEQ *time.Time `form:"asset.updatedAt.neq,omitempty" json:"edge_asset_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	EdgeAssetUpdatedAtGT *time.Time `form:"asset.updatedAt.gt,omitempty" json:"edge_asset_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	EdgeAssetUpdatedAtLT *time.Time `form:"asset.updatedAt.lt,omitempty" json:"edge_asset_updated_at_lt,omitempty"`
	// Filters field "updated_at" to be null/nil.
	EdgeAssetUpdatedAtIsNil *bool `form:"asset.updatedAt.null,omitempty" json:"edge_asset_updated_at_is_nil,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in GithubRelease.
func (l *ListGithubReleaseParams) FilterPredicates() (predicate.GithubRelease, error) {
	var predicates []predicate.GithubRelease

	if l.GithubReleaseReleaseIDEQ != nil {
		predicates = append(predicates, githubrelease.ReleaseIDEQ(*l.GithubReleaseReleaseIDEQ))
	}
	if l.GithubReleaseReleaseIDNEQ != nil {
		predicates = append(predicates, githubrelease.ReleaseIDNEQ(*l.GithubReleaseReleaseIDNEQ))
	}
	if l.GithubReleaseTagNameEQ != nil {
		predicates = append(predicates, githubrelease.TagNameEQ(*l.GithubReleaseTagNameEQ))
	}
	if l.GithubReleaseTagNameNEQ != nil {
		predicates = append(predicates, githubrelease.TagNameNEQ(*l.GithubReleaseTagNameNEQ))
	}
	if l.GithubReleaseTagNameIn != nil {
		predicates = append(predicates, githubrelease.TagNameIn(l.GithubReleaseTagNameIn...))
	}
	if l.GithubReleaseTagNameNotIn != nil {
		predicates = append(predicates, githubrelease.TagNameNotIn(l.GithubReleaseTagNameNotIn...))
	}
	if l.GithubReleaseTagNameEqualFold != nil {
		predicates = append(predicates, githubrelease.TagNameEqualFold(*l.GithubReleaseTagNameEqualFold))
	}
	if l.GithubReleaseTagNameContains != nil {
		predicates = append(predicates, githubrelease.TagNameContains(*l.GithubReleaseTagNameContains))
	}
	if l.GithubReleaseTagNameContainsFold != nil {
		predicates = append(predicates, githubrelease.TagNameContainsFold(*l.GithubReleaseTagNameContainsFold))
	}
	if l.GithubReleaseTagNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.TagNameHasPrefix(*l.GithubReleaseTagNameHasPrefix))
	}
	if l.GithubReleaseTagNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.TagNameHasSuffix(*l.GithubReleaseTagNameHasSuffix))
	}
	if l.GithubReleaseTargetCommitishEQ != nil {
		predicates = append(predicates, githubrelease.TargetCommitishEQ(*l.GithubReleaseTargetCommitishEQ))
	}
	if l.GithubReleaseTargetCommitishNEQ != nil {
		predicates = append(predicates, githubrelease.TargetCommitishNEQ(*l.GithubReleaseTargetCommitishNEQ))
	}
	if l.GithubReleaseTargetCommitishIn != nil {
		predicates = append(predicates, githubrelease.TargetCommitishIn(l.GithubReleaseTargetCommitishIn...))
	}
	if l.GithubReleaseTargetCommitishNotIn != nil {
		predicates = append(predicates, githubrelease.TargetCommitishNotIn(l.GithubReleaseTargetCommitishNotIn...))
	}
	if l.GithubReleaseTargetCommitishEqualFold != nil {
		predicates = append(predicates, githubrelease.TargetCommitishEqualFold(*l.GithubReleaseTargetCommitishEqualFold))
	}
	if l.GithubReleaseTargetCommitishContains != nil {
		predicates = append(predicates, githubrelease.TargetCommitishContains(*l.GithubReleaseTargetCommitishContains))
	}
	if l.GithubReleaseTargetCommitishContainsFold != nil {
		predicates = append(predicates, githubrelease.TargetCommitishContainsFold(*l.GithubReleaseTargetCommitishContainsFold))
	}
	if l.GithubReleaseTargetCommitishHasPrefix != nil {
		predicates = append(predicates, githubrelease.TargetCommitishHasPrefix(*l.GithubReleaseTargetCommitishHasPrefix))
	}
	if l.GithubReleaseTargetCommitishHasSuffix != nil {
		predicates = append(predicates, githubrelease.TargetCommitishHasSuffix(*l.GithubReleaseTargetCommitishHasSuffix))
	}
	if l.GithubReleaseNameEQ != nil {
		predicates = append(predicates, githubrelease.NameEQ(*l.GithubReleaseNameEQ))
	}
	if l.GithubReleaseNameNEQ != nil {
		predicates = append(predicates, githubrelease.NameNEQ(*l.GithubReleaseNameNEQ))
	}
	if l.GithubReleaseNameIsNil != nil {
		if *l.GithubReleaseNameIsNil {
			predicates = append(predicates, githubrelease.NameIsNil())
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.NameIsNil()))
		}
	}
	if l.GithubReleaseNameIn != nil {
		predicates = append(predicates, githubrelease.NameIn(l.GithubReleaseNameIn...))
	}
	if l.GithubReleaseNameNotIn != nil {
		predicates = append(predicates, githubrelease.NameNotIn(l.GithubReleaseNameNotIn...))
	}
	if l.GithubReleaseNameEqualFold != nil {
		predicates = append(predicates, githubrelease.NameEqualFold(*l.GithubReleaseNameEqualFold))
	}
	if l.GithubReleaseNameContains != nil {
		predicates = append(predicates, githubrelease.NameContains(*l.GithubReleaseNameContains))
	}
	if l.GithubReleaseNameContainsFold != nil {
		predicates = append(predicates, githubrelease.NameContainsFold(*l.GithubReleaseNameContainsFold))
	}
	if l.GithubReleaseNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.NameHasPrefix(*l.GithubReleaseNameHasPrefix))
	}
	if l.GithubReleaseNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.NameHasSuffix(*l.GithubReleaseNameHasSuffix))
	}
	if l.GithubReleaseDraftEQ != nil {
		predicates = append(predicates, githubrelease.DraftEQ(*l.GithubReleaseDraftEQ))
	}
	if l.GithubReleasePrereleaseEQ != nil {
		predicates = append(predicates, githubrelease.PrereleaseEQ(*l.GithubReleasePrereleaseEQ))
	}
	if l.GithubReleaseCreatedAtEQ != nil {
		predicates = append(predicates, githubrelease.CreatedAtEQ(*l.GithubReleaseCreatedAtEQ))
	}
	if l.GithubReleaseCreatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.CreatedAtNEQ(*l.GithubReleaseCreatedAtNEQ))
	}
	if l.GithubReleaseCreatedAtGT != nil {
		predicates = append(predicates, githubrelease.CreatedAtGT(*l.GithubReleaseCreatedAtGT))
	}
	if l.GithubReleaseCreatedAtLT != nil {
		predicates = append(predicates, githubrelease.CreatedAtLT(*l.GithubReleaseCreatedAtLT))
	}
	if l.GithubReleasePublishedAtEQ != nil {
		predicates = append(predicates, githubrelease.PublishedAtEQ(*l.GithubReleasePublishedAtEQ))
	}
	if l.GithubReleasePublishedAtNEQ != nil {
		predicates = append(predicates, githubrelease.PublishedAtNEQ(*l.GithubReleasePublishedAtNEQ))
	}
	if l.GithubReleasePublishedAtGT != nil {
		predicates = append(predicates, githubrelease.PublishedAtGT(*l.GithubReleasePublishedAtGT))
	}
	if l.GithubReleasePublishedAtLT != nil {
		predicates = append(predicates, githubrelease.PublishedAtLT(*l.GithubReleasePublishedAtLT))
	}
	if l.EdgeHasRepository != nil {
		if *l.EdgeHasRepository {
			predicates = append(predicates, githubrelease.HasRepository())
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasRepository()))
		}
	}
	if l.EdgeRepositoryRepoIDEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.RepoIDEQ(*l.EdgeRepositoryRepoIDEQ)))
	}
	if l.EdgeRepositoryRepoIDNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.RepoIDNEQ(*l.EdgeRepositoryRepoIDNEQ)))
	}
	if l.EdgeRepositoryNameEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameEQ(*l.EdgeRepositoryNameEQ)))
	}
	if l.EdgeRepositoryNameNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameNEQ(*l.EdgeRepositoryNameNEQ)))
	}
	if l.EdgeRepositoryNameIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameIn(l.EdgeRepositoryNameIn...)))
	}
	if l.EdgeRepositoryNameNotIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameNotIn(l.EdgeRepositoryNameNotIn...)))
	}
	if l.EdgeRepositoryNameEqualFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameEqualFold(*l.EdgeRepositoryNameEqualFold)))
	}
	if l.EdgeRepositoryNameContains != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameContains(*l.EdgeRepositoryNameContains)))
	}
	if l.EdgeRepositoryNameContainsFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameContainsFold(*l.EdgeRepositoryNameContainsFold)))
	}
	if l.EdgeRepositoryNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameHasPrefix(*l.EdgeRepositoryNameHasPrefix)))
	}
	if l.EdgeRepositoryNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.NameHasSuffix(*l.EdgeRepositoryNameHasSuffix)))
	}
	if l.EdgeRepositoryFullNameEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameEQ(*l.EdgeRepositoryFullNameEQ)))
	}
	if l.EdgeRepositoryFullNameNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameNEQ(*l.EdgeRepositoryFullNameNEQ)))
	}
	if l.EdgeRepositoryFullNameIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameIn(l.EdgeRepositoryFullNameIn...)))
	}
	if l.EdgeRepositoryFullNameNotIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameNotIn(l.EdgeRepositoryFullNameNotIn...)))
	}
	if l.EdgeRepositoryFullNameEqualFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameEqualFold(*l.EdgeRepositoryFullNameEqualFold)))
	}
	if l.EdgeRepositoryFullNameContains != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameContains(*l.EdgeRepositoryFullNameContains)))
	}
	if l.EdgeRepositoryFullNameContainsFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameContainsFold(*l.EdgeRepositoryFullNameContainsFold)))
	}
	if l.EdgeRepositoryFullNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameHasPrefix(*l.EdgeRepositoryFullNameHasPrefix)))
	}
	if l.EdgeRepositoryFullNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.FullNameHasSuffix(*l.EdgeRepositoryFullNameHasSuffix)))
	}
	if l.EdgeRepositoryOwnerLoginEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginEQ(*l.EdgeRepositoryOwnerLoginEQ)))
	}
	if l.EdgeRepositoryOwnerLoginNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginNEQ(*l.EdgeRepositoryOwnerLoginNEQ)))
	}
	if l.EdgeRepositoryOwnerLoginIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginIn(l.EdgeRepositoryOwnerLoginIn...)))
	}
	if l.EdgeRepositoryOwnerLoginNotIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginNotIn(l.EdgeRepositoryOwnerLoginNotIn...)))
	}
	if l.EdgeRepositoryOwnerLoginEqualFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginEqualFold(*l.EdgeRepositoryOwnerLoginEqualFold)))
	}
	if l.EdgeRepositoryOwnerLoginContains != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginContains(*l.EdgeRepositoryOwnerLoginContains)))
	}
	if l.EdgeRepositoryOwnerLoginContainsFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginContainsFold(*l.EdgeRepositoryOwnerLoginContainsFold)))
	}
	if l.EdgeRepositoryOwnerLoginHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginHasPrefix(*l.EdgeRepositoryOwnerLoginHasPrefix)))
	}
	if l.EdgeRepositoryOwnerLoginHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.OwnerLoginHasSuffix(*l.EdgeRepositoryOwnerLoginHasSuffix)))
	}
	if l.EdgeRepositoryPublicEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.PublicEQ(*l.EdgeRepositoryPublicEQ)))
	}
	if l.EdgeRepositoryDescriptionIsNil != nil {
		if *l.EdgeRepositoryDescriptionIsNil {
			predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DescriptionIsNil()))
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasRepositoryWith(githubrepository.DescriptionIsNil())))
		}
	}
	if l.EdgeRepositoryDescriptionContains != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DescriptionContains(*l.EdgeRepositoryDescriptionContains)))
	}
	if l.EdgeRepositoryDescriptionContainsFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DescriptionContainsFold(*l.EdgeRepositoryDescriptionContainsFold)))
	}
	if l.EdgeRepositoryForkEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.ForkEQ(*l.EdgeRepositoryForkEQ)))
	}
	if l.EdgeRepositoryStarCountGT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.StarCountGT(*l.EdgeRepositoryStarCountGT)))
	}
	if l.EdgeRepositoryStarCountLT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.StarCountLT(*l.EdgeRepositoryStarCountLT)))
	}
	if l.EdgeRepositoryDefaultBranchEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchEQ(*l.EdgeRepositoryDefaultBranchEQ)))
	}
	if l.EdgeRepositoryDefaultBranchNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchNEQ(*l.EdgeRepositoryDefaultBranchNEQ)))
	}
	if l.EdgeRepositoryDefaultBranchIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchIn(l.EdgeRepositoryDefaultBranchIn...)))
	}
	if l.EdgeRepositoryDefaultBranchNotIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchNotIn(l.EdgeRepositoryDefaultBranchNotIn...)))
	}
	if l.EdgeRepositoryDefaultBranchEqualFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchEqualFold(*l.EdgeRepositoryDefaultBranchEqualFold)))
	}
	if l.EdgeRepositoryDefaultBranchContains != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchContains(*l.EdgeRepositoryDefaultBranchContains)))
	}
	if l.EdgeRepositoryDefaultBranchContainsFold != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchContainsFold(*l.EdgeRepositoryDefaultBranchContainsFold)))
	}
	if l.EdgeRepositoryDefaultBranchHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchHasPrefix(*l.EdgeRepositoryDefaultBranchHasPrefix)))
	}
	if l.EdgeRepositoryDefaultBranchHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.DefaultBranchHasSuffix(*l.EdgeRepositoryDefaultBranchHasSuffix)))
	}
	if l.EdgeRepositoryIsTemplateEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.IsTemplateEQ(*l.EdgeRepositoryIsTemplateEQ)))
	}
	if l.EdgeRepositoryHasIssuesEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.HasIssuesEQ(*l.EdgeRepositoryHasIssuesEQ)))
	}
	if l.EdgeRepositoryArchivedEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.ArchivedEQ(*l.EdgeRepositoryArchivedEQ)))
	}
	if l.EdgeRepositoryPushedAtIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.PushedAtIn(l.EdgeRepositoryPushedAtIn...)))
	}
	if l.EdgeRepositoryPushedAtNotIn != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.PushedAtNotIn(l.EdgeRepositoryPushedAtNotIn...)))
	}
	if l.EdgeRepositoryCreatedAtEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.CreatedAtEQ(*l.EdgeRepositoryCreatedAtEQ)))
	}
	if l.EdgeRepositoryCreatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.CreatedAtNEQ(*l.EdgeRepositoryCreatedAtNEQ)))
	}
	if l.EdgeRepositoryCreatedAtGT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.CreatedAtGT(*l.EdgeRepositoryCreatedAtGT)))
	}
	if l.EdgeRepositoryCreatedAtLT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.CreatedAtLT(*l.EdgeRepositoryCreatedAtLT)))
	}
	if l.EdgeRepositoryUpdatedAtEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.UpdatedAtEQ(*l.EdgeRepositoryUpdatedAtEQ)))
	}
	if l.EdgeRepositoryUpdatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.UpdatedAtNEQ(*l.EdgeRepositoryUpdatedAtNEQ)))
	}
	if l.EdgeRepositoryUpdatedAtGT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.UpdatedAtGT(*l.EdgeRepositoryUpdatedAtGT)))
	}
	if l.EdgeRepositoryUpdatedAtLT != nil {
		predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.UpdatedAtLT(*l.EdgeRepositoryUpdatedAtLT)))
	}
	if l.EdgeRepositoryUpdatedAtIsNil != nil {
		if *l.EdgeRepositoryUpdatedAtIsNil {
			predicates = append(predicates, githubrelease.HasRepositoryWith(githubrepository.UpdatedAtIsNil()))
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasRepositoryWith(githubrepository.UpdatedAtIsNil())))
		}
	}
	if l.EdgeHasAsset != nil {
		if *l.EdgeHasAsset {
			predicates = append(predicates, githubrelease.HasAssets())
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasAssets()))
		}
	}
	if l.EdgeAssetAssetIDEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.AssetIDEQ(*l.EdgeAssetAssetIDEQ)))
	}
	if l.EdgeAssetAssetIDNEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.AssetIDNEQ(*l.EdgeAssetAssetIDNEQ)))
	}
	if l.EdgeAssetNameEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameEQ(*l.EdgeAssetNameEQ)))
	}
	if l.EdgeAssetNameNEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameNEQ(*l.EdgeAssetNameNEQ)))
	}
	if l.EdgeAssetNameIn != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameIn(l.EdgeAssetNameIn...)))
	}
	if l.EdgeAssetNameNotIn != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameNotIn(l.EdgeAssetNameNotIn...)))
	}
	if l.EdgeAssetNameEqualFold != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameEqualFold(*l.EdgeAssetNameEqualFold)))
	}
	if l.EdgeAssetNameContains != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameContains(*l.EdgeAssetNameContains)))
	}
	if l.EdgeAssetNameContainsFold != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameContainsFold(*l.EdgeAssetNameContainsFold)))
	}
	if l.EdgeAssetNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameHasPrefix(*l.EdgeAssetNameHasPrefix)))
	}
	if l.EdgeAssetNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.NameHasSuffix(*l.EdgeAssetNameHasSuffix)))
	}
	if l.EdgeAssetLabelEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelEQ(*l.EdgeAssetLabelEQ)))
	}
	if l.EdgeAssetLabelNEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelNEQ(*l.EdgeAssetLabelNEQ)))
	}
	if l.EdgeAssetLabelIsNil != nil {
		if *l.EdgeAssetLabelIsNil {
			predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelIsNil()))
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasAssetsWith(githubasset.LabelIsNil())))
		}
	}
	if l.EdgeAssetLabelIn != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelIn(l.EdgeAssetLabelIn...)))
	}
	if l.EdgeAssetLabelNotIn != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelNotIn(l.EdgeAssetLabelNotIn...)))
	}
	if l.EdgeAssetLabelEqualFold != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelEqualFold(*l.EdgeAssetLabelEqualFold)))
	}
	if l.EdgeAssetLabelContains != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelContains(*l.EdgeAssetLabelContains)))
	}
	if l.EdgeAssetLabelContainsFold != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelContainsFold(*l.EdgeAssetLabelContainsFold)))
	}
	if l.EdgeAssetLabelHasPrefix != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelHasPrefix(*l.EdgeAssetLabelHasPrefix)))
	}
	if l.EdgeAssetLabelHasSuffix != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.LabelHasSuffix(*l.EdgeAssetLabelHasSuffix)))
	}
	if l.EdgeAssetSizeGT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.SizeGT(*l.EdgeAssetSizeGT)))
	}
	if l.EdgeAssetSizeLT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.SizeLT(*l.EdgeAssetSizeLT)))
	}
	if l.EdgeAssetDownloadCountGT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.DownloadCountGT(*l.EdgeAssetDownloadCountGT)))
	}
	if l.EdgeAssetDownloadCountLT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.DownloadCountLT(*l.EdgeAssetDownloadCountLT)))
	}
	if l.EdgeAssetCreatedAtEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.CreatedAtEQ(*l.EdgeAssetCreatedAtEQ)))
	}
	if l.EdgeAssetCreatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.CreatedAtNEQ(*l.EdgeAssetCreatedAtNEQ)))
	}
	if l.EdgeAssetCreatedAtGT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.CreatedAtGT(*l.EdgeAssetCreatedAtGT)))
	}
	if l.EdgeAssetCreatedAtLT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.CreatedAtLT(*l.EdgeAssetCreatedAtLT)))
	}
	if l.EdgeAssetUpdatedAtEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.UpdatedAtEQ(*l.EdgeAssetUpdatedAtEQ)))
	}
	if l.EdgeAssetUpdatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.UpdatedAtNEQ(*l.EdgeAssetUpdatedAtNEQ)))
	}
	if l.EdgeAssetUpdatedAtGT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.UpdatedAtGT(*l.EdgeAssetUpdatedAtGT)))
	}
	if l.EdgeAssetUpdatedAtLT != nil {
		predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.UpdatedAtLT(*l.EdgeAssetUpdatedAtLT)))
	}
	if l.EdgeAssetUpdatedAtIsNil != nil {
		if *l.EdgeAssetUpdatedAtIsNil {
			predicates = append(predicates, githubrelease.HasAssetsWith(githubasset.UpdatedAtIsNil()))
		} else {
			predicates = append(predicates, githubrelease.Not(githubrelease.HasAssetsWith(githubasset.UpdatedAtIsNil())))
		}
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListGithubReleaseParams) ApplySorting(query *ent.GithubReleaseQuery) error {
	if err := l.Sorted.Validate(GithubReleaseSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingGithubRelease(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListGithubReleaseParams) Exec(ctx context.Context, query *ent.GithubReleaseQuery) (results *PagedResponse[ent.GithubRelease], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadGithubRelease(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, GithubReleasePageConfig)
}

// ListGithubRepositoryParams defines parameters for listing GithubRepositories via a GET request.
type ListGithubRepositoryParams struct {
	Sorted
	Paginated[*ent.GithubRepositoryQuery, ent.GithubRepository]
	Filtered[predicate.GithubRepository]

	// Filters field "repo_id" to be equal to the provided value.
	GithubRepositoryRepoIDEQ *int64 `form:"repoID.eq,omitempty" json:"github_repository_repo_ideq,omitempty"`
	// Filters field "repo_id" to be not equal to the provided value.
	GithubRepositoryRepoIDNEQ *int64 `form:"repoID.neq,omitempty" json:"github_repository_repo_idneq,omitempty"`
	// Filters field "name" to be equal to the provided value.
	GithubRepositoryNameEQ *string `form:"name.eq,omitempty" json:"github_repository_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	GithubRepositoryNameNEQ *string `form:"name.neq,omitempty" json:"github_repository_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	GithubRepositoryNameIn []string `form:"name.in,omitempty" json:"github_repository_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	GithubRepositoryNameNotIn []string `form:"name.notIn,omitempty" json:"github_repository_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	GithubRepositoryNameEqualFold *string `form:"name.ieq,omitempty" json:"github_repository_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	GithubRepositoryNameContains *string `form:"name.has,omitempty" json:"github_repository_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	GithubRepositoryNameContainsFold *string `form:"name.ihas,omitempty" json:"github_repository_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	GithubRepositoryNameHasPrefix *string `form:"name.prefix,omitempty" json:"github_repository_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	GithubRepositoryNameHasSuffix *string `form:"name.suffix,omitempty" json:"github_repository_name_has_suffix,omitempty"`
	// Filters field "full_name" to be equal to the provided value.
	GithubRepositoryFullNameEQ *string `form:"fullName.eq,omitempty" json:"github_repository_full_name_eq,omitempty"`
	// Filters field "full_name" to be not equal to the provided value.
	GithubRepositoryFullNameNEQ *string `form:"fullName.neq,omitempty" json:"github_repository_full_name_neq,omitempty"`
	// Filters field "full_name" to be within the provided values.
	GithubRepositoryFullNameIn []string `form:"fullName.in,omitempty" json:"github_repository_full_name_in,omitempty"`
	// Filters field "full_name" to be not within the provided values.
	GithubRepositoryFullNameNotIn []string `form:"fullName.notIn,omitempty" json:"github_repository_full_name_not_in,omitempty"`
	// Filters field "full_name" to be equal to the provided value, case-insensitive.
	GithubRepositoryFullNameEqualFold *string `form:"fullName.ieq,omitempty" json:"github_repository_full_name_equal_fold,omitempty"`
	// Filters field "full_name" to contain the provided value.
	GithubRepositoryFullNameContains *string `form:"fullName.has,omitempty" json:"github_repository_full_name_contains,omitempty"`
	// Filters field "full_name" to contain the provided value, case-insensitive.
	GithubRepositoryFullNameContainsFold *string `form:"fullName.ihas,omitempty" json:"github_repository_full_name_contains_fold,omitempty"`
	// Filters field "full_name" to start with the provided value.
	GithubRepositoryFullNameHasPrefix *string `form:"fullName.prefix,omitempty" json:"github_repository_full_name_has_prefix,omitempty"`
	// Filters field "full_name" to end with the provided value.
	GithubRepositoryFullNameHasSuffix *string `form:"fullName.suffix,omitempty" json:"github_repository_full_name_has_suffix,omitempty"`
	// Filters field "owner_login" to be equal to the provided value.
	GithubRepositoryOwnerLoginEQ *string `form:"ownerLogin.eq,omitempty" json:"github_repository_owner_login_eq,omitempty"`
	// Filters field "owner_login" to be not equal to the provided value.
	GithubRepositoryOwnerLoginNEQ *string `form:"ownerLogin.neq,omitempty" json:"github_repository_owner_login_neq,omitempty"`
	// Filters field "owner_login" to be within the provided values.
	GithubRepositoryOwnerLoginIn []string `form:"ownerLogin.in,omitempty" json:"github_repository_owner_login_in,omitempty"`
	// Filters field "owner_login" to be not within the provided values.
	GithubRepositoryOwnerLoginNotIn []string `form:"ownerLogin.notIn,omitempty" json:"github_repository_owner_login_not_in,omitempty"`
	// Filters field "owner_login" to be equal to the provided value, case-insensitive.
	GithubRepositoryOwnerLoginEqualFold *string `form:"ownerLogin.ieq,omitempty" json:"github_repository_owner_login_equal_fold,omitempty"`
	// Filters field "owner_login" to contain the provided value.
	GithubRepositoryOwnerLoginContains *string `form:"ownerLogin.has,omitempty" json:"github_repository_owner_login_contains,omitempty"`
	// Filters field "owner_login" to contain the provided value, case-insensitive.
	GithubRepositoryOwnerLoginContainsFold *string `form:"ownerLogin.ihas,omitempty" json:"github_repository_owner_login_contains_fold,omitempty"`
	// Filters field "owner_login" to start with the provided value.
	GithubRepositoryOwnerLoginHasPrefix *string `form:"ownerLogin.prefix,omitempty" json:"github_repository_owner_login_has_prefix,omitempty"`
	// Filters field "owner_login" to end with the provided value.
	GithubRepositoryOwnerLoginHasSuffix *string `form:"ownerLogin.suffix,omitempty" json:"github_repository_owner_login_has_suffix,omitempty"`
	// Filters field "public" to be equal to the provided value.
	GithubRepositoryPublicEQ *bool `form:"public.eq,omitempty" json:"github_repository_public_eq,omitempty"`
	// Filters field "description" to be null/nil.
	GithubRepositoryDescriptionIsNil *bool `form:"description.null,omitempty" json:"github_repository_description_is_nil,omitempty"`
	// Filters field "description" to contain the provided value.
	GithubRepositoryDescriptionContains *string `form:"description.has,omitempty" json:"github_repository_description_contains,omitempty"`
	// Filters field "description" to contain the provided value, case-insensitive.
	GithubRepositoryDescriptionContainsFold *string `form:"description.ihas,omitempty" json:"github_repository_description_contains_fold,omitempty"`
	// Filters field "fork" to be equal to the provided value.
	GithubRepositoryForkEQ *bool `form:"fork.eq,omitempty" json:"github_repository_fork_eq,omitempty"`
	// Filters field "star_count" to be greater than the provided value.
	GithubRepositoryStarCountGT *int `form:"starCount.gt,omitempty" json:"github_repository_star_count_gt,omitempty"`
	// Filters field "star_count" to be less than the provided value.
	GithubRepositoryStarCountLT *int `form:"starCount.lt,omitempty" json:"github_repository_star_count_lt,omitempty"`
	// Filters field "default_branch" to be equal to the provided value.
	GithubRepositoryDefaultBranchEQ *string `form:"defaultBranch.eq,omitempty" json:"github_repository_default_branch_eq,omitempty"`
	// Filters field "default_branch" to be not equal to the provided value.
	GithubRepositoryDefaultBranchNEQ *string `form:"defaultBranch.neq,omitempty" json:"github_repository_default_branch_neq,omitempty"`
	// Filters field "default_branch" to be within the provided values.
	GithubRepositoryDefaultBranchIn []string `form:"defaultBranch.in,omitempty" json:"github_repository_default_branch_in,omitempty"`
	// Filters field "default_branch" to be not within the provided values.
	GithubRepositoryDefaultBranchNotIn []string `form:"defaultBranch.notIn,omitempty" json:"github_repository_default_branch_not_in,omitempty"`
	// Filters field "default_branch" to be equal to the provided value, case-insensitive.
	GithubRepositoryDefaultBranchEqualFold *string `form:"defaultBranch.ieq,omitempty" json:"github_repository_default_branch_equal_fold,omitempty"`
	// Filters field "default_branch" to contain the provided value.
	GithubRepositoryDefaultBranchContains *string `form:"defaultBranch.has,omitempty" json:"github_repository_default_branch_contains,omitempty"`
	// Filters field "default_branch" to contain the provided value, case-insensitive.
	GithubRepositoryDefaultBranchContainsFold *string `form:"defaultBranch.ihas,omitempty" json:"github_repository_default_branch_contains_fold,omitempty"`
	// Filters field "default_branch" to start with the provided value.
	GithubRepositoryDefaultBranchHasPrefix *string `form:"defaultBranch.prefix,omitempty" json:"github_repository_default_branch_has_prefix,omitempty"`
	// Filters field "default_branch" to end with the provided value.
	GithubRepositoryDefaultBranchHasSuffix *string `form:"defaultBranch.suffix,omitempty" json:"github_repository_default_branch_has_suffix,omitempty"`
	// Filters field "is_template" to be equal to the provided value.
	GithubRepositoryIsTemplateEQ *bool `form:"isTemplate.eq,omitempty" json:"github_repository_is_template_eq,omitempty"`
	// Filters field "has_issues" to be equal to the provided value.
	GithubRepositoryHasIssuesEQ *bool `form:"hasIssues.eq,omitempty" json:"github_repository_has_issues_eq,omitempty"`
	// Filters field "archived" to be equal to the provided value.
	GithubRepositoryArchivedEQ *bool `form:"archived.eq,omitempty" json:"github_repository_archived_eq,omitempty"`
	// Filters field "pushed_at" to be within the provided values.
	GithubRepositoryPushedAtIn []time.Time `form:"pushedAt.in,omitempty" json:"github_repository_pushed_at_in,omitempty"`
	// Filters field "pushed_at" to be not within the provided values.
	GithubRepositoryPushedAtNotIn []time.Time `form:"pushedAt.notIn,omitempty" json:"github_repository_pushed_at_not_in,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	GithubRepositoryCreatedAtEQ *time.Time `form:"createdAt.eq,omitempty" json:"github_repository_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	GithubRepositoryCreatedAtNEQ *time.Time `form:"createdAt.neq,omitempty" json:"github_repository_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	GithubRepositoryCreatedAtGT *time.Time `form:"createdAt.gt,omitempty" json:"github_repository_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	GithubRepositoryCreatedAtLT *time.Time `form:"createdAt.lt,omitempty" json:"github_repository_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	GithubRepositoryUpdatedAtEQ *time.Time `form:"updatedAt.eq,omitempty" json:"github_repository_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	GithubRepositoryUpdatedAtNEQ *time.Time `form:"updatedAt.neq,omitempty" json:"github_repository_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	GithubRepositoryUpdatedAtGT *time.Time `form:"updatedAt.gt,omitempty" json:"github_repository_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	GithubRepositoryUpdatedAtLT *time.Time `form:"updatedAt.lt,omitempty" json:"github_repository_updated_at_lt,omitempty"`
	// Filters field "updated_at" to be null/nil.
	GithubRepositoryUpdatedAtIsNil *bool `form:"updatedAt.null,omitempty" json:"github_repository_updated_at_is_nil,omitempty"`
	// If true, only return entities that have a label edge.
	EdgeHasLabel *bool `form:"has.label,omitempty" json:"edge_has_label,omitempty"`
	// Filters field "create_time" to be equal to the provided value.
	EdgeLabelCreateTimeEQ *time.Time `form:"label.createTime.eq,omitempty" json:"edge_label_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	EdgeLabelCreateTimeNEQ *time.Time `form:"label.createTime.neq,omitempty" json:"edge_label_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	EdgeLabelCreateTimeGT *time.Time `form:"label.createTime.gt,omitempty" json:"edge_label_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	EdgeLabelCreateTimeLT *time.Time `form:"label.createTime.lt,omitempty" json:"edge_label_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	EdgeLabelUpdateTimeEQ *time.Time `form:"label.updateTime.eq,omitempty" json:"edge_label_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	EdgeLabelUpdateTimeNEQ *time.Time `form:"label.updateTime.neq,omitempty" json:"edge_label_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	EdgeLabelUpdateTimeGT *time.Time `form:"label.updateTime.gt,omitempty" json:"edge_label_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	EdgeLabelUpdateTimeLT *time.Time `form:"label.updateTime.lt,omitempty" json:"edge_label_update_time_lt,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeLabelNameEQ *string `form:"label.name.eq,omitempty" json:"edge_label_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeLabelNameNEQ *string `form:"label.name.neq,omitempty" json:"edge_label_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeLabelNameIn []string `form:"label.name.in,omitempty" json:"edge_label_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeLabelNameNotIn []string `form:"label.name.notIn,omitempty" json:"edge_label_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeLabelNameEqualFold *string `form:"label.name.ieq,omitempty" json:"edge_label_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeLabelNameContains *string `form:"label.name.has,omitempty" json:"edge_label_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeLabelNameContainsFold *string `form:"label.name.ihas,omitempty" json:"edge_label_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeLabelNameHasPrefix *string `form:"label.name.prefix,omitempty" json:"edge_label_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeLabelNameHasSuffix *string `form:"label.name.suffix,omitempty" json:"edge_label_name_has_suffix,omitempty"`
	// If true, only return entities that have a release edge.
	EdgeHasRelease *bool `form:"has.release,omitempty" json:"edge_has_release,omitempty"`
	// Filters field "release_id" to be equal to the provided value.
	EdgeReleaseReleaseIDEQ *int64 `form:"release.releaseID.eq,omitempty" json:"edge_release_release_ideq,omitempty"`
	// Filters field "release_id" to be not equal to the provided value.
	EdgeReleaseReleaseIDNEQ *int64 `form:"release.releaseID.neq,omitempty" json:"edge_release_release_idneq,omitempty"`
	// Filters field "tag_name" to be equal to the provided value.
	EdgeReleaseTagNameEQ *string `form:"release.tagName.eq,omitempty" json:"edge_release_tag_name_eq,omitempty"`
	// Filters field "tag_name" to be not equal to the provided value.
	EdgeReleaseTagNameNEQ *string `form:"release.tagName.neq,omitempty" json:"edge_release_tag_name_neq,omitempty"`
	// Filters field "tag_name" to be within the provided values.
	EdgeReleaseTagNameIn []string `form:"release.tagName.in,omitempty" json:"edge_release_tag_name_in,omitempty"`
	// Filters field "tag_name" to be not within the provided values.
	EdgeReleaseTagNameNotIn []string `form:"release.tagName.notIn,omitempty" json:"edge_release_tag_name_not_in,omitempty"`
	// Filters field "tag_name" to be equal to the provided value, case-insensitive.
	EdgeReleaseTagNameEqualFold *string `form:"release.tagName.ieq,omitempty" json:"edge_release_tag_name_equal_fold,omitempty"`
	// Filters field "tag_name" to contain the provided value.
	EdgeReleaseTagNameContains *string `form:"release.tagName.has,omitempty" json:"edge_release_tag_name_contains,omitempty"`
	// Filters field "tag_name" to contain the provided value, case-insensitive.
	EdgeReleaseTagNameContainsFold *string `form:"release.tagName.ihas,omitempty" json:"edge_release_tag_name_contains_fold,omitempty"`
	// Filters field "tag_name" to start with the provided value.
	EdgeReleaseTagNameHasPrefix *string `form:"release.tagName.prefix,omitempty" json:"edge_release_tag_name_has_prefix,omitempty"`
	// Filters field "tag_name" to end with the provided value.
	EdgeReleaseTagNameHasSuffix *string `form:"release.tagName.suffix,omitempty" json:"edge_release_tag_name_has_suffix,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value.
	EdgeReleaseTargetCommitishEQ *string `form:"release.targetCommitish.eq,omitempty" json:"edge_release_target_commitish_eq,omitempty"`
	// Filters field "target_commitish" to be not equal to the provided value.
	EdgeReleaseTargetCommitishNEQ *string `form:"release.targetCommitish.neq,omitempty" json:"edge_release_target_commitish_neq,omitempty"`
	// Filters field "target_commitish" to be within the provided values.
	EdgeReleaseTargetCommitishIn []string `form:"release.targetCommitish.in,omitempty" json:"edge_release_target_commitish_in,omitempty"`
	// Filters field "target_commitish" to be not within the provided values.
	EdgeReleaseTargetCommitishNotIn []string `form:"release.targetCommitish.notIn,omitempty" json:"edge_release_target_commitish_not_in,omitempty"`
	// Filters field "target_commitish" to be equal to the provided value, case-insensitive.
	EdgeReleaseTargetCommitishEqualFold *string `form:"release.targetCommitish.ieq,omitempty" json:"edge_release_target_commitish_equal_fold,omitempty"`
	// Filters field "target_commitish" to contain the provided value.
	EdgeReleaseTargetCommitishContains *string `form:"release.targetCommitish.has,omitempty" json:"edge_release_target_commitish_contains,omitempty"`
	// Filters field "target_commitish" to contain the provided value, case-insensitive.
	EdgeReleaseTargetCommitishContainsFold *string `form:"release.targetCommitish.ihas,omitempty" json:"edge_release_target_commitish_contains_fold,omitempty"`
	// Filters field "target_commitish" to start with the provided value.
	EdgeReleaseTargetCommitishHasPrefix *string `form:"release.targetCommitish.prefix,omitempty" json:"edge_release_target_commitish_has_prefix,omitempty"`
	// Filters field "target_commitish" to end with the provided value.
	EdgeReleaseTargetCommitishHasSuffix *string `form:"release.targetCommitish.suffix,omitempty" json:"edge_release_target_commitish_has_suffix,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeReleaseNameEQ *string `form:"release.name.eq,omitempty" json:"edge_release_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeReleaseNameNEQ *string `form:"release.name.neq,omitempty" json:"edge_release_name_neq,omitempty"`
	// Filters field "name" to be null/nil.
	EdgeReleaseNameIsNil *bool `form:"release.name.null,omitempty" json:"edge_release_name_is_nil,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeReleaseNameIn []string `form:"release.name.in,omitempty" json:"edge_release_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeReleaseNameNotIn []string `form:"release.name.notIn,omitempty" json:"edge_release_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeReleaseNameEqualFold *string `form:"release.name.ieq,omitempty" json:"edge_release_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeReleaseNameContains *string `form:"release.name.has,omitempty" json:"edge_release_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeReleaseNameContainsFold *string `form:"release.name.ihas,omitempty" json:"edge_release_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeReleaseNameHasPrefix *string `form:"release.name.prefix,omitempty" json:"edge_release_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeReleaseNameHasSuffix *string `form:"release.name.suffix,omitempty" json:"edge_release_name_has_suffix,omitempty"`
	// Filters field "draft" to be equal to the provided value.
	EdgeReleaseDraftEQ *bool `form:"release.draft.eq,omitempty" json:"edge_release_draft_eq,omitempty"`
	// Filters field "prerelease" to be equal to the provided value.
	EdgeReleasePrereleaseEQ *bool `form:"release.prerelease.eq,omitempty" json:"edge_release_prerelease_eq,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	EdgeReleaseCreatedAtEQ *time.Time `form:"release.createdAt.eq,omitempty" json:"edge_release_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	EdgeReleaseCreatedAtNEQ *time.Time `form:"release.createdAt.neq,omitempty" json:"edge_release_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	EdgeReleaseCreatedAtGT *time.Time `form:"release.createdAt.gt,omitempty" json:"edge_release_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	EdgeReleaseCreatedAtLT *time.Time `form:"release.createdAt.lt,omitempty" json:"edge_release_created_at_lt,omitempty"`
	// Filters field "published_at" to be equal to the provided value.
	EdgeReleasePublishedAtEQ *time.Time `form:"release.publishedAt.eq,omitempty" json:"edge_release_published_at_eq,omitempty"`
	// Filters field "published_at" to be not equal to the provided value.
	EdgeReleasePublishedAtNEQ *time.Time `form:"release.publishedAt.neq,omitempty" json:"edge_release_published_at_neq,omitempty"`
	// Filters field "published_at" to be greater than the provided value.
	EdgeReleasePublishedAtGT *time.Time `form:"release.publishedAt.gt,omitempty" json:"edge_release_published_at_gt,omitempty"`
	// Filters field "published_at" to be less than the provided value.
	EdgeReleasePublishedAtLT *time.Time `form:"release.publishedAt.lt,omitempty" json:"edge_release_published_at_lt,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in GithubRepository.
func (l *ListGithubRepositoryParams) FilterPredicates() (predicate.GithubRepository, error) {
	var predicates []predicate.GithubRepository

	if l.GithubRepositoryRepoIDEQ != nil {
		predicates = append(predicates, githubrepository.RepoIDEQ(*l.GithubRepositoryRepoIDEQ))
	}
	if l.GithubRepositoryRepoIDNEQ != nil {
		predicates = append(predicates, githubrepository.RepoIDNEQ(*l.GithubRepositoryRepoIDNEQ))
	}
	if l.GithubRepositoryNameEQ != nil {
		predicates = append(predicates, githubrepository.NameEQ(*l.GithubRepositoryNameEQ))
	}
	if l.GithubRepositoryNameNEQ != nil {
		predicates = append(predicates, githubrepository.NameNEQ(*l.GithubRepositoryNameNEQ))
	}
	if l.GithubRepositoryNameIn != nil {
		predicates = append(predicates, githubrepository.NameIn(l.GithubRepositoryNameIn...))
	}
	if l.GithubRepositoryNameNotIn != nil {
		predicates = append(predicates, githubrepository.NameNotIn(l.GithubRepositoryNameNotIn...))
	}
	if l.GithubRepositoryNameEqualFold != nil {
		predicates = append(predicates, githubrepository.NameEqualFold(*l.GithubRepositoryNameEqualFold))
	}
	if l.GithubRepositoryNameContains != nil {
		predicates = append(predicates, githubrepository.NameContains(*l.GithubRepositoryNameContains))
	}
	if l.GithubRepositoryNameContainsFold != nil {
		predicates = append(predicates, githubrepository.NameContainsFold(*l.GithubRepositoryNameContainsFold))
	}
	if l.GithubRepositoryNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.NameHasPrefix(*l.GithubRepositoryNameHasPrefix))
	}
	if l.GithubRepositoryNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.NameHasSuffix(*l.GithubRepositoryNameHasSuffix))
	}
	if l.GithubRepositoryFullNameEQ != nil {
		predicates = append(predicates, githubrepository.FullNameEQ(*l.GithubRepositoryFullNameEQ))
	}
	if l.GithubRepositoryFullNameNEQ != nil {
		predicates = append(predicates, githubrepository.FullNameNEQ(*l.GithubRepositoryFullNameNEQ))
	}
	if l.GithubRepositoryFullNameIn != nil {
		predicates = append(predicates, githubrepository.FullNameIn(l.GithubRepositoryFullNameIn...))
	}
	if l.GithubRepositoryFullNameNotIn != nil {
		predicates = append(predicates, githubrepository.FullNameNotIn(l.GithubRepositoryFullNameNotIn...))
	}
	if l.GithubRepositoryFullNameEqualFold != nil {
		predicates = append(predicates, githubrepository.FullNameEqualFold(*l.GithubRepositoryFullNameEqualFold))
	}
	if l.GithubRepositoryFullNameContains != nil {
		predicates = append(predicates, githubrepository.FullNameContains(*l.GithubRepositoryFullNameContains))
	}
	if l.GithubRepositoryFullNameContainsFold != nil {
		predicates = append(predicates, githubrepository.FullNameContainsFold(*l.GithubRepositoryFullNameContainsFold))
	}
	if l.GithubRepositoryFullNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.FullNameHasPrefix(*l.GithubRepositoryFullNameHasPrefix))
	}
	if l.GithubRepositoryFullNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.FullNameHasSuffix(*l.GithubRepositoryFullNameHasSuffix))
	}
	if l.GithubRepositoryOwnerLoginEQ != nil {
		predicates = append(predicates, githubrepository.OwnerLoginEQ(*l.GithubRepositoryOwnerLoginEQ))
	}
	if l.GithubRepositoryOwnerLoginNEQ != nil {
		predicates = append(predicates, githubrepository.OwnerLoginNEQ(*l.GithubRepositoryOwnerLoginNEQ))
	}
	if l.GithubRepositoryOwnerLoginIn != nil {
		predicates = append(predicates, githubrepository.OwnerLoginIn(l.GithubRepositoryOwnerLoginIn...))
	}
	if l.GithubRepositoryOwnerLoginNotIn != nil {
		predicates = append(predicates, githubrepository.OwnerLoginNotIn(l.GithubRepositoryOwnerLoginNotIn...))
	}
	if l.GithubRepositoryOwnerLoginEqualFold != nil {
		predicates = append(predicates, githubrepository.OwnerLoginEqualFold(*l.GithubRepositoryOwnerLoginEqualFold))
	}
	if l.GithubRepositoryOwnerLoginContains != nil {
		predicates = append(predicates, githubrepository.OwnerLoginContains(*l.GithubRepositoryOwnerLoginContains))
	}
	if l.GithubRepositoryOwnerLoginContainsFold != nil {
		predicates = append(predicates, githubrepository.OwnerLoginContainsFold(*l.GithubRepositoryOwnerLoginContainsFold))
	}
	if l.GithubRepositoryOwnerLoginHasPrefix != nil {
		predicates = append(predicates, githubrepository.OwnerLoginHasPrefix(*l.GithubRepositoryOwnerLoginHasPrefix))
	}
	if l.GithubRepositoryOwnerLoginHasSuffix != nil {
		predicates = append(predicates, githubrepository.OwnerLoginHasSuffix(*l.GithubRepositoryOwnerLoginHasSuffix))
	}
	if l.GithubRepositoryPublicEQ != nil {
		predicates = append(predicates, githubrepository.PublicEQ(*l.GithubRepositoryPublicEQ))
	}
	if l.GithubRepositoryDescriptionIsNil != nil {
		if *l.GithubRepositoryDescriptionIsNil {
			predicates = append(predicates, githubrepository.DescriptionIsNil())
		} else {
			predicates = append(predicates, githubrepository.Not(githubrepository.DescriptionIsNil()))
		}
	}
	if l.GithubRepositoryDescriptionContains != nil {
		predicates = append(predicates, githubrepository.DescriptionContains(*l.GithubRepositoryDescriptionContains))
	}
	if l.GithubRepositoryDescriptionContainsFold != nil {
		predicates = append(predicates, githubrepository.DescriptionContainsFold(*l.GithubRepositoryDescriptionContainsFold))
	}
	if l.GithubRepositoryForkEQ != nil {
		predicates = append(predicates, githubrepository.ForkEQ(*l.GithubRepositoryForkEQ))
	}
	if l.GithubRepositoryStarCountGT != nil {
		predicates = append(predicates, githubrepository.StarCountGT(*l.GithubRepositoryStarCountGT))
	}
	if l.GithubRepositoryStarCountLT != nil {
		predicates = append(predicates, githubrepository.StarCountLT(*l.GithubRepositoryStarCountLT))
	}
	if l.GithubRepositoryDefaultBranchEQ != nil {
		predicates = append(predicates, githubrepository.DefaultBranchEQ(*l.GithubRepositoryDefaultBranchEQ))
	}
	if l.GithubRepositoryDefaultBranchNEQ != nil {
		predicates = append(predicates, githubrepository.DefaultBranchNEQ(*l.GithubRepositoryDefaultBranchNEQ))
	}
	if l.GithubRepositoryDefaultBranchIn != nil {
		predicates = append(predicates, githubrepository.DefaultBranchIn(l.GithubRepositoryDefaultBranchIn...))
	}
	if l.GithubRepositoryDefaultBranchNotIn != nil {
		predicates = append(predicates, githubrepository.DefaultBranchNotIn(l.GithubRepositoryDefaultBranchNotIn...))
	}
	if l.GithubRepositoryDefaultBranchEqualFold != nil {
		predicates = append(predicates, githubrepository.DefaultBranchEqualFold(*l.GithubRepositoryDefaultBranchEqualFold))
	}
	if l.GithubRepositoryDefaultBranchContains != nil {
		predicates = append(predicates, githubrepository.DefaultBranchContains(*l.GithubRepositoryDefaultBranchContains))
	}
	if l.GithubRepositoryDefaultBranchContainsFold != nil {
		predicates = append(predicates, githubrepository.DefaultBranchContainsFold(*l.GithubRepositoryDefaultBranchContainsFold))
	}
	if l.GithubRepositoryDefaultBranchHasPrefix != nil {
		predicates = append(predicates, githubrepository.DefaultBranchHasPrefix(*l.GithubRepositoryDefaultBranchHasPrefix))
	}
	if l.GithubRepositoryDefaultBranchHasSuffix != nil {
		predicates = append(predicates, githubrepository.DefaultBranchHasSuffix(*l.GithubRepositoryDefaultBranchHasSuffix))
	}
	if l.GithubRepositoryIsTemplateEQ != nil {
		predicates = append(predicates, githubrepository.IsTemplateEQ(*l.GithubRepositoryIsTemplateEQ))
	}
	if l.GithubRepositoryHasIssuesEQ != nil {
		predicates = append(predicates, githubrepository.HasIssuesEQ(*l.GithubRepositoryHasIssuesEQ))
	}
	if l.GithubRepositoryArchivedEQ != nil {
		predicates = append(predicates, githubrepository.ArchivedEQ(*l.GithubRepositoryArchivedEQ))
	}
	if l.GithubRepositoryPushedAtIn != nil {
		predicates = append(predicates, githubrepository.PushedAtIn(l.GithubRepositoryPushedAtIn...))
	}
	if l.GithubRepositoryPushedAtNotIn != nil {
		predicates = append(predicates, githubrepository.PushedAtNotIn(l.GithubRepositoryPushedAtNotIn...))
	}
	if l.GithubRepositoryCreatedAtEQ != nil {
		predicates = append(predicates, githubrepository.CreatedAtEQ(*l.GithubRepositoryCreatedAtEQ))
	}
	if l.GithubRepositoryCreatedAtNEQ != nil {
		predicates = append(predicates, githubrepository.CreatedAtNEQ(*l.GithubRepositoryCreatedAtNEQ))
	}
	if l.GithubRepositoryCreatedAtGT != nil {
		predicates = append(predicates, githubrepository.CreatedAtGT(*l.GithubRepositoryCreatedAtGT))
	}
	if l.GithubRepositoryCreatedAtLT != nil {
		predicates = append(predicates, githubrepository.CreatedAtLT(*l.GithubRepositoryCreatedAtLT))
	}
	if l.GithubRepositoryUpdatedAtEQ != nil {
		predicates = append(predicates, githubrepository.UpdatedAtEQ(*l.GithubRepositoryUpdatedAtEQ))
	}
	if l.GithubRepositoryUpdatedAtNEQ != nil {
		predicates = append(predicates, githubrepository.UpdatedAtNEQ(*l.GithubRepositoryUpdatedAtNEQ))
	}
	if l.GithubRepositoryUpdatedAtGT != nil {
		predicates = append(predicates, githubrepository.UpdatedAtGT(*l.GithubRepositoryUpdatedAtGT))
	}
	if l.GithubRepositoryUpdatedAtLT != nil {
		predicates = append(predicates, githubrepository.UpdatedAtLT(*l.GithubRepositoryUpdatedAtLT))
	}
	if l.GithubRepositoryUpdatedAtIsNil != nil {
		if *l.GithubRepositoryUpdatedAtIsNil {
			predicates = append(predicates, githubrepository.UpdatedAtIsNil())
		} else {
			predicates = append(predicates, githubrepository.Not(githubrepository.UpdatedAtIsNil()))
		}
	}
	if l.EdgeHasLabel != nil {
		if *l.EdgeHasLabel {
			predicates = append(predicates, githubrepository.HasLabels())
		} else {
			predicates = append(predicates, githubrepository.Not(githubrepository.HasLabels()))
		}
	}
	if l.EdgeLabelCreateTimeEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.CreateTimeEQ(*l.EdgeLabelCreateTimeEQ)))
	}
	if l.EdgeLabelCreateTimeNEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.CreateTimeNEQ(*l.EdgeLabelCreateTimeNEQ)))
	}
	if l.EdgeLabelCreateTimeGT != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.CreateTimeGT(*l.EdgeLabelCreateTimeGT)))
	}
	if l.EdgeLabelCreateTimeLT != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.CreateTimeLT(*l.EdgeLabelCreateTimeLT)))
	}
	if l.EdgeLabelUpdateTimeEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.UpdateTimeEQ(*l.EdgeLabelUpdateTimeEQ)))
	}
	if l.EdgeLabelUpdateTimeNEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.UpdateTimeNEQ(*l.EdgeLabelUpdateTimeNEQ)))
	}
	if l.EdgeLabelUpdateTimeGT != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.UpdateTimeGT(*l.EdgeLabelUpdateTimeGT)))
	}
	if l.EdgeLabelUpdateTimeLT != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.UpdateTimeLT(*l.EdgeLabelUpdateTimeLT)))
	}
	if l.EdgeLabelNameEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameEQ(*l.EdgeLabelNameEQ)))
	}
	if l.EdgeLabelNameNEQ != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameNEQ(*l.EdgeLabelNameNEQ)))
	}
	if l.EdgeLabelNameIn != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameIn(l.EdgeLabelNameIn...)))
	}
	if l.EdgeLabelNameNotIn != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameNotIn(l.EdgeLabelNameNotIn...)))
	}
	if l.EdgeLabelNameEqualFold != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameEqualFold(*l.EdgeLabelNameEqualFold)))
	}
	if l.EdgeLabelNameContains != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameContains(*l.EdgeLabelNameContains)))
	}
	if l.EdgeLabelNameContainsFold != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameContainsFold(*l.EdgeLabelNameContainsFold)))
	}
	if l.EdgeLabelNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameHasPrefix(*l.EdgeLabelNameHasPrefix)))
	}
	if l.EdgeLabelNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.HasLabelsWith(label.NameHasSuffix(*l.EdgeLabelNameHasSuffix)))
	}
	if l.EdgeHasRelease != nil {
		if *l.EdgeHasRelease {
			predicates = append(predicates, githubrepository.HasReleases())
		} else {
			predicates = append(predicates, githubrepository.Not(githubrepository.HasReleases()))
		}
	}
	if l.EdgeReleaseReleaseIDEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.ReleaseIDEQ(*l.EdgeReleaseReleaseIDEQ)))
	}
	if l.EdgeReleaseReleaseIDNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.ReleaseIDNEQ(*l.EdgeReleaseReleaseIDNEQ)))
	}
	if l.EdgeReleaseTagNameEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameEQ(*l.EdgeReleaseTagNameEQ)))
	}
	if l.EdgeReleaseTagNameNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameNEQ(*l.EdgeReleaseTagNameNEQ)))
	}
	if l.EdgeReleaseTagNameIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameIn(l.EdgeReleaseTagNameIn...)))
	}
	if l.EdgeReleaseTagNameNotIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameNotIn(l.EdgeReleaseTagNameNotIn...)))
	}
	if l.EdgeReleaseTagNameEqualFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameEqualFold(*l.EdgeReleaseTagNameEqualFold)))
	}
	if l.EdgeReleaseTagNameContains != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameContains(*l.EdgeReleaseTagNameContains)))
	}
	if l.EdgeReleaseTagNameContainsFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameContainsFold(*l.EdgeReleaseTagNameContainsFold)))
	}
	if l.EdgeReleaseTagNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameHasPrefix(*l.EdgeReleaseTagNameHasPrefix)))
	}
	if l.EdgeReleaseTagNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TagNameHasSuffix(*l.EdgeReleaseTagNameHasSuffix)))
	}
	if l.EdgeReleaseTargetCommitishEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishEQ(*l.EdgeReleaseTargetCommitishEQ)))
	}
	if l.EdgeReleaseTargetCommitishNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishNEQ(*l.EdgeReleaseTargetCommitishNEQ)))
	}
	if l.EdgeReleaseTargetCommitishIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishIn(l.EdgeReleaseTargetCommitishIn...)))
	}
	if l.EdgeReleaseTargetCommitishNotIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishNotIn(l.EdgeReleaseTargetCommitishNotIn...)))
	}
	if l.EdgeReleaseTargetCommitishEqualFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishEqualFold(*l.EdgeReleaseTargetCommitishEqualFold)))
	}
	if l.EdgeReleaseTargetCommitishContains != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishContains(*l.EdgeReleaseTargetCommitishContains)))
	}
	if l.EdgeReleaseTargetCommitishContainsFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishContainsFold(*l.EdgeReleaseTargetCommitishContainsFold)))
	}
	if l.EdgeReleaseTargetCommitishHasPrefix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishHasPrefix(*l.EdgeReleaseTargetCommitishHasPrefix)))
	}
	if l.EdgeReleaseTargetCommitishHasSuffix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.TargetCommitishHasSuffix(*l.EdgeReleaseTargetCommitishHasSuffix)))
	}
	if l.EdgeReleaseNameEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameEQ(*l.EdgeReleaseNameEQ)))
	}
	if l.EdgeReleaseNameNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameNEQ(*l.EdgeReleaseNameNEQ)))
	}
	if l.EdgeReleaseNameIsNil != nil {
		if *l.EdgeReleaseNameIsNil {
			predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameIsNil()))
		} else {
			predicates = append(predicates, githubrepository.Not(githubrepository.HasReleasesWith(githubrelease.NameIsNil())))
		}
	}
	if l.EdgeReleaseNameIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameIn(l.EdgeReleaseNameIn...)))
	}
	if l.EdgeReleaseNameNotIn != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameNotIn(l.EdgeReleaseNameNotIn...)))
	}
	if l.EdgeReleaseNameEqualFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameEqualFold(*l.EdgeReleaseNameEqualFold)))
	}
	if l.EdgeReleaseNameContains != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameContains(*l.EdgeReleaseNameContains)))
	}
	if l.EdgeReleaseNameContainsFold != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameContainsFold(*l.EdgeReleaseNameContainsFold)))
	}
	if l.EdgeReleaseNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameHasPrefix(*l.EdgeReleaseNameHasPrefix)))
	}
	if l.EdgeReleaseNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.NameHasSuffix(*l.EdgeReleaseNameHasSuffix)))
	}
	if l.EdgeReleaseDraftEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.DraftEQ(*l.EdgeReleaseDraftEQ)))
	}
	if l.EdgeReleasePrereleaseEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.PrereleaseEQ(*l.EdgeReleasePrereleaseEQ)))
	}
	if l.EdgeReleaseCreatedAtEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.CreatedAtEQ(*l.EdgeReleaseCreatedAtEQ)))
	}
	if l.EdgeReleaseCreatedAtNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.CreatedAtNEQ(*l.EdgeReleaseCreatedAtNEQ)))
	}
	if l.EdgeReleaseCreatedAtGT != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.CreatedAtGT(*l.EdgeReleaseCreatedAtGT)))
	}
	if l.EdgeReleaseCreatedAtLT != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.CreatedAtLT(*l.EdgeReleaseCreatedAtLT)))
	}
	if l.EdgeReleasePublishedAtEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.PublishedAtEQ(*l.EdgeReleasePublishedAtEQ)))
	}
	if l.EdgeReleasePublishedAtNEQ != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.PublishedAtNEQ(*l.EdgeReleasePublishedAtNEQ)))
	}
	if l.EdgeReleasePublishedAtGT != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.PublishedAtGT(*l.EdgeReleasePublishedAtGT)))
	}
	if l.EdgeReleasePublishedAtLT != nil {
		predicates = append(predicates, githubrepository.HasReleasesWith(githubrelease.PublishedAtLT(*l.EdgeReleasePublishedAtLT)))
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListGithubRepositoryParams) ApplySorting(query *ent.GithubRepositoryQuery) error {
	if err := l.Sorted.Validate(GithubRepositorySortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingGithubRepository(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListGithubRepositoryParams) Exec(ctx context.Context, query *ent.GithubRepositoryQuery) (results *PagedResponse[ent.GithubRepository], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadGithubRepository(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, GithubRepositoryPageConfig)
}

// ListLabelParams defines parameters for listing Labels via a GET request.
type ListLabelParams struct {
	Sorted
	Paginated[*ent.LabelQuery, ent.Label]
	Filtered[predicate.Label]

	// Filters field "create_time" to be equal to the provided value.
	LabelCreateTimeEQ *time.Time `form:"createTime.eq,omitempty" json:"label_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	LabelCreateTimeNEQ *time.Time `form:"createTime.neq,omitempty" json:"label_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	LabelCreateTimeGT *time.Time `form:"createTime.gt,omitempty" json:"label_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	LabelCreateTimeLT *time.Time `form:"createTime.lt,omitempty" json:"label_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	LabelUpdateTimeEQ *time.Time `form:"updateTime.eq,omitempty" json:"label_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	LabelUpdateTimeNEQ *time.Time `form:"updateTime.neq,omitempty" json:"label_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	LabelUpdateTimeGT *time.Time `form:"updateTime.gt,omitempty" json:"label_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	LabelUpdateTimeLT *time.Time `form:"updateTime.lt,omitempty" json:"label_update_time_lt,omitempty"`
	// Filters field "name" to be equal to the provided value.
	LabelNameEQ *string `form:"name.eq,omitempty" json:"label_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	LabelNameNEQ *string `form:"name.neq,omitempty" json:"label_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	LabelNameIn []string `form:"name.in,omitempty" json:"label_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	LabelNameNotIn []string `form:"name.notIn,omitempty" json:"label_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	LabelNameEqualFold *string `form:"name.ieq,omitempty" json:"label_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	LabelNameContains *string `form:"name.has,omitempty" json:"label_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	LabelNameContainsFold *string `form:"name.ihas,omitempty" json:"label_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	LabelNameHasPrefix *string `form:"name.prefix,omitempty" json:"label_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	LabelNameHasSuffix *string `form:"name.suffix,omitempty" json:"label_name_has_suffix,omitempty"`
	// If true, only return entities that have a post edge.
	EdgeHasPost *bool `form:"has.post,omitempty" json:"edge_has_post,omitempty"`
	// Filters field "create_time" to be equal to the provided value.
	EdgePostCreateTimeEQ *time.Time `form:"post.createTime.eq,omitempty" json:"edge_post_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	EdgePostCreateTimeNEQ *time.Time `form:"post.createTime.neq,omitempty" json:"edge_post_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	EdgePostCreateTimeGT *time.Time `form:"post.createTime.gt,omitempty" json:"edge_post_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	EdgePostCreateTimeLT *time.Time `form:"post.createTime.lt,omitempty" json:"edge_post_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	EdgePostUpdateTimeEQ *time.Time `form:"post.updateTime.eq,omitempty" json:"edge_post_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	EdgePostUpdateTimeNEQ *time.Time `form:"post.updateTime.neq,omitempty" json:"edge_post_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	EdgePostUpdateTimeGT *time.Time `form:"post.updateTime.gt,omitempty" json:"edge_post_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	EdgePostUpdateTimeLT *time.Time `form:"post.updateTime.lt,omitempty" json:"edge_post_update_time_lt,omitempty"`
	// Filters field "slug" to be equal to the provided value.
	EdgePostSlugEQ *string `form:"post.slug.eq,omitempty" json:"edge_post_slug_eq,omitempty"`
	// Filters field "slug" to be not equal to the provided value.
	EdgePostSlugNEQ *string `form:"post.slug.neq,omitempty" json:"edge_post_slug_neq,omitempty"`
	// Filters field "slug" to be equal to the provided value, case-insensitive.
	EdgePostSlugEqualFold *string `form:"post.slug.ieq,omitempty" json:"edge_post_slug_equal_fold,omitempty"`
	// Filters field "slug" to contain the provided value.
	EdgePostSlugContains *string `form:"post.slug.has,omitempty" json:"edge_post_slug_contains,omitempty"`
	// Filters field "slug" to contain the provided value, case-insensitive.
	EdgePostSlugContainsFold *string `form:"post.slug.ihas,omitempty" json:"edge_post_slug_contains_fold,omitempty"`
	// Filters field "slug" to start with the provided value.
	EdgePostSlugHasPrefix *string `form:"post.slug.prefix,omitempty" json:"edge_post_slug_has_prefix,omitempty"`
	// Filters field "slug" to end with the provided value.
	EdgePostSlugHasSuffix *string `form:"post.slug.suffix,omitempty" json:"edge_post_slug_has_suffix,omitempty"`
	// Filters field "title" to be equal to the provided value.
	EdgePostTitleEQ *string `form:"post.title.eq,omitempty" json:"edge_post_title_eq,omitempty"`
	// Filters field "title" to be not equal to the provided value.
	EdgePostTitleNEQ *string `form:"post.title.neq,omitempty" json:"edge_post_title_neq,omitempty"`
	// Filters field "title" to be within the provided values.
	EdgePostTitleIn []string `form:"post.title.in,omitempty" json:"edge_post_title_in,omitempty"`
	// Filters field "title" to be not within the provided values.
	EdgePostTitleNotIn []string `form:"post.title.notIn,omitempty" json:"edge_post_title_not_in,omitempty"`
	// Filters field "title" to be equal to the provided value, case-insensitive.
	EdgePostTitleEqualFold *string `form:"post.title.ieq,omitempty" json:"edge_post_title_equal_fold,omitempty"`
	// Filters field "title" to contain the provided value.
	EdgePostTitleContains *string `form:"post.title.has,omitempty" json:"edge_post_title_contains,omitempty"`
	// Filters field "title" to contain the provided value, case-insensitive.
	EdgePostTitleContainsFold *string `form:"post.title.ihas,omitempty" json:"edge_post_title_contains_fold,omitempty"`
	// Filters field "title" to start with the provided value.
	EdgePostTitleHasPrefix *string `form:"post.title.prefix,omitempty" json:"edge_post_title_has_prefix,omitempty"`
	// Filters field "title" to end with the provided value.
	EdgePostTitleHasSuffix *string `form:"post.title.suffix,omitempty" json:"edge_post_title_has_suffix,omitempty"`
	// Filters field "content" to contain the provided value.
	EdgePostContentContains *string `form:"post.content.has,omitempty" json:"edge_post_content_contains,omitempty"`
	// Filters field "content" to contain the provided value, case-insensitive.
	EdgePostContentContainsFold *string `form:"post.content.ihas,omitempty" json:"edge_post_content_contains_fold,omitempty"`
	// Filters field "content_html" to contain the provided value.
	EdgePostContentHTMLContains *string `form:"post.contentHTML.has,omitempty" json:"edge_post_content_html_contains,omitempty"`
	// Filters field "content_html" to contain the provided value, case-insensitive.
	EdgePostContentHTMLContainsFold *string `form:"post.contentHTML.ihas,omitempty" json:"edge_post_content_html_contains_fold,omitempty"`
	// Filters field "published_at" to be equal to the provided value.
	EdgePostPublishedAtEQ *time.Time `form:"post.publishedAt.eq,omitempty" json:"edge_post_published_at_eq,omitempty"`
	// Filters field "published_at" to be not equal to the provided value.
	EdgePostPublishedAtNEQ *time.Time `form:"post.publishedAt.neq,omitempty" json:"edge_post_published_at_neq,omitempty"`
	// Filters field "published_at" to be greater than the provided value.
	EdgePostPublishedAtGT *time.Time `form:"post.publishedAt.gt,omitempty" json:"edge_post_published_at_gt,omitempty"`
	// Filters field "published_at" to be less than the provided value.
	EdgePostPublishedAtLT *time.Time `form:"post.publishedAt.lt,omitempty" json:"edge_post_published_at_lt,omitempty"`
	// Filters field "view_count" to be equal to the provided value.
	EdgePostViewCountEQ *int `form:"post.viewCount.eq,omitempty" json:"edge_post_view_count_eq,omitempty"`
	// Filters field "view_count" to be not equal to the provided value.
	EdgePostViewCountNEQ *int `form:"post.viewCount.neq,omitempty" json:"edge_post_view_count_neq,omitempty"`
	// Filters field "view_count" to be greater than the provided value.
	EdgePostViewCountGT *int `form:"post.viewCount.gt,omitempty" json:"edge_post_view_count_gt,omitempty"`
	// Filters field "view_count" to be less than the provided value.
	EdgePostViewCountLT *int `form:"post.viewCount.lt,omitempty" json:"edge_post_view_count_lt,omitempty"`
	// Filters field "public" to be equal to the provided value.
	EdgePostPublicEQ *bool `form:"post.public.eq,omitempty" json:"edge_post_public_eq,omitempty"`
	// If true, only return entities that have a github_repository edge.
	EdgeHasGithubRepository *bool `form:"has.githubRepository,omitempty" json:"edge_has_github_repository,omitempty"`
	// Filters field "repo_id" to be equal to the provided value.
	EdgeGithubRepositoryRepoIDEQ *int64 `form:"githubRepository.repoID.eq,omitempty" json:"edge_github_repository_repo_ideq,omitempty"`
	// Filters field "repo_id" to be not equal to the provided value.
	EdgeGithubRepositoryRepoIDNEQ *int64 `form:"githubRepository.repoID.neq,omitempty" json:"edge_github_repository_repo_idneq,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeGithubRepositoryNameEQ *string `form:"githubRepository.name.eq,omitempty" json:"edge_github_repository_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeGithubRepositoryNameNEQ *string `form:"githubRepository.name.neq,omitempty" json:"edge_github_repository_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeGithubRepositoryNameIn []string `form:"githubRepository.name.in,omitempty" json:"edge_github_repository_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeGithubRepositoryNameNotIn []string `form:"githubRepository.name.notIn,omitempty" json:"edge_github_repository_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeGithubRepositoryNameEqualFold *string `form:"githubRepository.name.ieq,omitempty" json:"edge_github_repository_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeGithubRepositoryNameContains *string `form:"githubRepository.name.has,omitempty" json:"edge_github_repository_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeGithubRepositoryNameContainsFold *string `form:"githubRepository.name.ihas,omitempty" json:"edge_github_repository_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeGithubRepositoryNameHasPrefix *string `form:"githubRepository.name.prefix,omitempty" json:"edge_github_repository_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeGithubRepositoryNameHasSuffix *string `form:"githubRepository.name.suffix,omitempty" json:"edge_github_repository_name_has_suffix,omitempty"`
	// Filters field "full_name" to be equal to the provided value.
	EdgeGithubRepositoryFullNameEQ *string `form:"githubRepository.fullName.eq,omitempty" json:"edge_github_repository_full_name_eq,omitempty"`
	// Filters field "full_name" to be not equal to the provided value.
	EdgeGithubRepositoryFullNameNEQ *string `form:"githubRepository.fullName.neq,omitempty" json:"edge_github_repository_full_name_neq,omitempty"`
	// Filters field "full_name" to be within the provided values.
	EdgeGithubRepositoryFullNameIn []string `form:"githubRepository.fullName.in,omitempty" json:"edge_github_repository_full_name_in,omitempty"`
	// Filters field "full_name" to be not within the provided values.
	EdgeGithubRepositoryFullNameNotIn []string `form:"githubRepository.fullName.notIn,omitempty" json:"edge_github_repository_full_name_not_in,omitempty"`
	// Filters field "full_name" to be equal to the provided value, case-insensitive.
	EdgeGithubRepositoryFullNameEqualFold *string `form:"githubRepository.fullName.ieq,omitempty" json:"edge_github_repository_full_name_equal_fold,omitempty"`
	// Filters field "full_name" to contain the provided value.
	EdgeGithubRepositoryFullNameContains *string `form:"githubRepository.fullName.has,omitempty" json:"edge_github_repository_full_name_contains,omitempty"`
	// Filters field "full_name" to contain the provided value, case-insensitive.
	EdgeGithubRepositoryFullNameContainsFold *string `form:"githubRepository.fullName.ihas,omitempty" json:"edge_github_repository_full_name_contains_fold,omitempty"`
	// Filters field "full_name" to start with the provided value.
	EdgeGithubRepositoryFullNameHasPrefix *string `form:"githubRepository.fullName.prefix,omitempty" json:"edge_github_repository_full_name_has_prefix,omitempty"`
	// Filters field "full_name" to end with the provided value.
	EdgeGithubRepositoryFullNameHasSuffix *string `form:"githubRepository.fullName.suffix,omitempty" json:"edge_github_repository_full_name_has_suffix,omitempty"`
	// Filters field "owner_login" to be equal to the provided value.
	EdgeGithubRepositoryOwnerLoginEQ *string `form:"githubRepository.ownerLogin.eq,omitempty" json:"edge_github_repository_owner_login_eq,omitempty"`
	// Filters field "owner_login" to be not equal to the provided value.
	EdgeGithubRepositoryOwnerLoginNEQ *string `form:"githubRepository.ownerLogin.neq,omitempty" json:"edge_github_repository_owner_login_neq,omitempty"`
	// Filters field "owner_login" to be within the provided values.
	EdgeGithubRepositoryOwnerLoginIn []string `form:"githubRepository.ownerLogin.in,omitempty" json:"edge_github_repository_owner_login_in,omitempty"`
	// Filters field "owner_login" to be not within the provided values.
	EdgeGithubRepositoryOwnerLoginNotIn []string `form:"githubRepository.ownerLogin.notIn,omitempty" json:"edge_github_repository_owner_login_not_in,omitempty"`
	// Filters field "owner_login" to be equal to the provided value, case-insensitive.
	EdgeGithubRepositoryOwnerLoginEqualFold *string `form:"githubRepository.ownerLogin.ieq,omitempty" json:"edge_github_repository_owner_login_equal_fold,omitempty"`
	// Filters field "owner_login" to contain the provided value.
	EdgeGithubRepositoryOwnerLoginContains *string `form:"githubRepository.ownerLogin.has,omitempty" json:"edge_github_repository_owner_login_contains,omitempty"`
	// Filters field "owner_login" to contain the provided value, case-insensitive.
	EdgeGithubRepositoryOwnerLoginContainsFold *string `form:"githubRepository.ownerLogin.ihas,omitempty" json:"edge_github_repository_owner_login_contains_fold,omitempty"`
	// Filters field "owner_login" to start with the provided value.
	EdgeGithubRepositoryOwnerLoginHasPrefix *string `form:"githubRepository.ownerLogin.prefix,omitempty" json:"edge_github_repository_owner_login_has_prefix,omitempty"`
	// Filters field "owner_login" to end with the provided value.
	EdgeGithubRepositoryOwnerLoginHasSuffix *string `form:"githubRepository.ownerLogin.suffix,omitempty" json:"edge_github_repository_owner_login_has_suffix,omitempty"`
	// Filters field "public" to be equal to the provided value.
	EdgeGithubRepositoryPublicEQ *bool `form:"githubRepository.public.eq,omitempty" json:"edge_github_repository_public_eq,omitempty"`
	// Filters field "description" to be null/nil.
	EdgeGithubRepositoryDescriptionIsNil *bool `form:"githubRepository.description.null,omitempty" json:"edge_github_repository_description_is_nil,omitempty"`
	// Filters field "description" to contain the provided value.
	EdgeGithubRepositoryDescriptionContains *string `form:"githubRepository.description.has,omitempty" json:"edge_github_repository_description_contains,omitempty"`
	// Filters field "description" to contain the provided value, case-insensitive.
	EdgeGithubRepositoryDescriptionContainsFold *string `form:"githubRepository.description.ihas,omitempty" json:"edge_github_repository_description_contains_fold,omitempty"`
	// Filters field "fork" to be equal to the provided value.
	EdgeGithubRepositoryForkEQ *bool `form:"githubRepository.fork.eq,omitempty" json:"edge_github_repository_fork_eq,omitempty"`
	// Filters field "star_count" to be greater than the provided value.
	EdgeGithubRepositoryStarCountGT *int `form:"githubRepository.starCount.gt,omitempty" json:"edge_github_repository_star_count_gt,omitempty"`
	// Filters field "star_count" to be less than the provided value.
	EdgeGithubRepositoryStarCountLT *int `form:"githubRepository.starCount.lt,omitempty" json:"edge_github_repository_star_count_lt,omitempty"`
	// Filters field "default_branch" to be equal to the provided value.
	EdgeGithubRepositoryDefaultBranchEQ *string `form:"githubRepository.defaultBranch.eq,omitempty" json:"edge_github_repository_default_branch_eq,omitempty"`
	// Filters field "default_branch" to be not equal to the provided value.
	EdgeGithubRepositoryDefaultBranchNEQ *string `form:"githubRepository.defaultBranch.neq,omitempty" json:"edge_github_repository_default_branch_neq,omitempty"`
	// Filters field "default_branch" to be within the provided values.
	EdgeGithubRepositoryDefaultBranchIn []string `form:"githubRepository.defaultBranch.in,omitempty" json:"edge_github_repository_default_branch_in,omitempty"`
	// Filters field "default_branch" to be not within the provided values.
	EdgeGithubRepositoryDefaultBranchNotIn []string `form:"githubRepository.defaultBranch.notIn,omitempty" json:"edge_github_repository_default_branch_not_in,omitempty"`
	// Filters field "default_branch" to be equal to the provided value, case-insensitive.
	EdgeGithubRepositoryDefaultBranchEqualFold *string `form:"githubRepository.defaultBranch.ieq,omitempty" json:"edge_github_repository_default_branch_equal_fold,omitempty"`
	// Filters field "default_branch" to contain the provided value.
	EdgeGithubRepositoryDefaultBranchContains *string `form:"githubRepository.defaultBranch.has,omitempty" json:"edge_github_repository_default_branch_contains,omitempty"`
	// Filters field "default_branch" to contain the provided value, case-insensitive.
	EdgeGithubRepositoryDefaultBranchContainsFold *string `form:"githubRepository.defaultBranch.ihas,omitempty" json:"edge_github_repository_default_branch_contains_fold,omitempty"`
	// Filters field "default_branch" to start with the provided value.
	EdgeGithubRepositoryDefaultBranchHasPrefix *string `form:"githubRepository.defaultBranch.prefix,omitempty" json:"edge_github_repository_default_branch_has_prefix,omitempty"`
	// Filters field "default_branch" to end with the provided value.
	EdgeGithubRepositoryDefaultBranchHasSuffix *string `form:"githubRepository.defaultBranch.suffix,omitempty" json:"edge_github_repository_default_branch_has_suffix,omitempty"`
	// Filters field "is_template" to be equal to the provided value.
	EdgeGithubRepositoryIsTemplateEQ *bool `form:"githubRepository.isTemplate.eq,omitempty" json:"edge_github_repository_is_template_eq,omitempty"`
	// Filters field "has_issues" to be equal to the provided value.
	EdgeGithubRepositoryHasIssuesEQ *bool `form:"githubRepository.hasIssues.eq,omitempty" json:"edge_github_repository_has_issues_eq,omitempty"`
	// Filters field "archived" to be equal to the provided value.
	EdgeGithubRepositoryArchivedEQ *bool `form:"githubRepository.archived.eq,omitempty" json:"edge_github_repository_archived_eq,omitempty"`
	// Filters field "pushed_at" to be within the provided values.
	EdgeGithubRepositoryPushedAtIn []time.Time `form:"githubRepository.pushedAt.in,omitempty" json:"edge_github_repository_pushed_at_in,omitempty"`
	// Filters field "pushed_at" to be not within the provided values.
	EdgeGithubRepositoryPushedAtNotIn []time.Time `form:"githubRepository.pushedAt.notIn,omitempty" json:"edge_github_repository_pushed_at_not_in,omitempty"`
	// Filters field "created_at" to be equal to the provided value.
	EdgeGithubRepositoryCreatedAtEQ *time.Time `form:"githubRepository.createdAt.eq,omitempty" json:"edge_github_repository_created_at_eq,omitempty"`
	// Filters field "created_at" to be not equal to the provided value.
	EdgeGithubRepositoryCreatedAtNEQ *time.Time `form:"githubRepository.createdAt.neq,omitempty" json:"edge_github_repository_created_at_neq,omitempty"`
	// Filters field "created_at" to be greater than the provided value.
	EdgeGithubRepositoryCreatedAtGT *time.Time `form:"githubRepository.createdAt.gt,omitempty" json:"edge_github_repository_created_at_gt,omitempty"`
	// Filters field "created_at" to be less than the provided value.
	EdgeGithubRepositoryCreatedAtLT *time.Time `form:"githubRepository.createdAt.lt,omitempty" json:"edge_github_repository_created_at_lt,omitempty"`
	// Filters field "updated_at" to be equal to the provided value.
	EdgeGithubRepositoryUpdatedAtEQ *time.Time `form:"githubRepository.updatedAt.eq,omitempty" json:"edge_github_repository_updated_at_eq,omitempty"`
	// Filters field "updated_at" to be not equal to the provided value.
	EdgeGithubRepositoryUpdatedAtNEQ *time.Time `form:"githubRepository.updatedAt.neq,omitempty" json:"edge_github_repository_updated_at_neq,omitempty"`
	// Filters field "updated_at" to be greater than the provided value.
	EdgeGithubRepositoryUpdatedAtGT *time.Time `form:"githubRepository.updatedAt.gt,omitempty" json:"edge_github_repository_updated_at_gt,omitempty"`
	// Filters field "updated_at" to be less than the provided value.
	EdgeGithubRepositoryUpdatedAtLT *time.Time `form:"githubRepository.updatedAt.lt,omitempty" json:"edge_github_repository_updated_at_lt,omitempty"`
	// Filters field "updated_at" to be null/nil.
	EdgeGithubRepositoryUpdatedAtIsNil *bool `form:"githubRepository.updatedAt.null,omitempty" json:"edge_github_repository_updated_at_is_nil,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in Label.
func (l *ListLabelParams) FilterPredicates() (predicate.Label, error) {
	var predicates []predicate.Label

	if l.LabelCreateTimeEQ != nil {
		predicates = append(predicates, label.CreateTimeEQ(*l.LabelCreateTimeEQ))
	}
	if l.LabelCreateTimeNEQ != nil {
		predicates = append(predicates, label.CreateTimeNEQ(*l.LabelCreateTimeNEQ))
	}
	if l.LabelCreateTimeGT != nil {
		predicates = append(predicates, label.CreateTimeGT(*l.LabelCreateTimeGT))
	}
	if l.LabelCreateTimeLT != nil {
		predicates = append(predicates, label.CreateTimeLT(*l.LabelCreateTimeLT))
	}
	if l.LabelUpdateTimeEQ != nil {
		predicates = append(predicates, label.UpdateTimeEQ(*l.LabelUpdateTimeEQ))
	}
	if l.LabelUpdateTimeNEQ != nil {
		predicates = append(predicates, label.UpdateTimeNEQ(*l.LabelUpdateTimeNEQ))
	}
	if l.LabelUpdateTimeGT != nil {
		predicates = append(predicates, label.UpdateTimeGT(*l.LabelUpdateTimeGT))
	}
	if l.LabelUpdateTimeLT != nil {
		predicates = append(predicates, label.UpdateTimeLT(*l.LabelUpdateTimeLT))
	}
	if l.LabelNameEQ != nil {
		predicates = append(predicates, label.NameEQ(*l.LabelNameEQ))
	}
	if l.LabelNameNEQ != nil {
		predicates = append(predicates, label.NameNEQ(*l.LabelNameNEQ))
	}
	if l.LabelNameIn != nil {
		predicates = append(predicates, label.NameIn(l.LabelNameIn...))
	}
	if l.LabelNameNotIn != nil {
		predicates = append(predicates, label.NameNotIn(l.LabelNameNotIn...))
	}
	if l.LabelNameEqualFold != nil {
		predicates = append(predicates, label.NameEqualFold(*l.LabelNameEqualFold))
	}
	if l.LabelNameContains != nil {
		predicates = append(predicates, label.NameContains(*l.LabelNameContains))
	}
	if l.LabelNameContainsFold != nil {
		predicates = append(predicates, label.NameContainsFold(*l.LabelNameContainsFold))
	}
	if l.LabelNameHasPrefix != nil {
		predicates = append(predicates, label.NameHasPrefix(*l.LabelNameHasPrefix))
	}
	if l.LabelNameHasSuffix != nil {
		predicates = append(predicates, label.NameHasSuffix(*l.LabelNameHasSuffix))
	}
	if l.EdgeHasPost != nil {
		if *l.EdgeHasPost {
			predicates = append(predicates, label.HasPosts())
		} else {
			predicates = append(predicates, label.Not(label.HasPosts()))
		}
	}
	if l.EdgePostCreateTimeEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.CreateTimeEQ(*l.EdgePostCreateTimeEQ)))
	}
	if l.EdgePostCreateTimeNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.CreateTimeNEQ(*l.EdgePostCreateTimeNEQ)))
	}
	if l.EdgePostCreateTimeGT != nil {
		predicates = append(predicates, label.HasPostsWith(post.CreateTimeGT(*l.EdgePostCreateTimeGT)))
	}
	if l.EdgePostCreateTimeLT != nil {
		predicates = append(predicates, label.HasPostsWith(post.CreateTimeLT(*l.EdgePostCreateTimeLT)))
	}
	if l.EdgePostUpdateTimeEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.UpdateTimeEQ(*l.EdgePostUpdateTimeEQ)))
	}
	if l.EdgePostUpdateTimeNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.UpdateTimeNEQ(*l.EdgePostUpdateTimeNEQ)))
	}
	if l.EdgePostUpdateTimeGT != nil {
		predicates = append(predicates, label.HasPostsWith(post.UpdateTimeGT(*l.EdgePostUpdateTimeGT)))
	}
	if l.EdgePostUpdateTimeLT != nil {
		predicates = append(predicates, label.HasPostsWith(post.UpdateTimeLT(*l.EdgePostUpdateTimeLT)))
	}
	if l.EdgePostSlugEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugEQ(*l.EdgePostSlugEQ)))
	}
	if l.EdgePostSlugNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugNEQ(*l.EdgePostSlugNEQ)))
	}
	if l.EdgePostSlugEqualFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugEqualFold(*l.EdgePostSlugEqualFold)))
	}
	if l.EdgePostSlugContains != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugContains(*l.EdgePostSlugContains)))
	}
	if l.EdgePostSlugContainsFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugContainsFold(*l.EdgePostSlugContainsFold)))
	}
	if l.EdgePostSlugHasPrefix != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugHasPrefix(*l.EdgePostSlugHasPrefix)))
	}
	if l.EdgePostSlugHasSuffix != nil {
		predicates = append(predicates, label.HasPostsWith(post.SlugHasSuffix(*l.EdgePostSlugHasSuffix)))
	}
	if l.EdgePostTitleEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleEQ(*l.EdgePostTitleEQ)))
	}
	if l.EdgePostTitleNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleNEQ(*l.EdgePostTitleNEQ)))
	}
	if l.EdgePostTitleIn != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleIn(l.EdgePostTitleIn...)))
	}
	if l.EdgePostTitleNotIn != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleNotIn(l.EdgePostTitleNotIn...)))
	}
	if l.EdgePostTitleEqualFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleEqualFold(*l.EdgePostTitleEqualFold)))
	}
	if l.EdgePostTitleContains != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleContains(*l.EdgePostTitleContains)))
	}
	if l.EdgePostTitleContainsFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleContainsFold(*l.EdgePostTitleContainsFold)))
	}
	if l.EdgePostTitleHasPrefix != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleHasPrefix(*l.EdgePostTitleHasPrefix)))
	}
	if l.EdgePostTitleHasSuffix != nil {
		predicates = append(predicates, label.HasPostsWith(post.TitleHasSuffix(*l.EdgePostTitleHasSuffix)))
	}
	if l.EdgePostContentContains != nil {
		predicates = append(predicates, label.HasPostsWith(post.ContentContains(*l.EdgePostContentContains)))
	}
	if l.EdgePostContentContainsFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.ContentContainsFold(*l.EdgePostContentContainsFold)))
	}
	if l.EdgePostContentHTMLContains != nil {
		predicates = append(predicates, label.HasPostsWith(post.ContentHTMLContains(*l.EdgePostContentHTMLContains)))
	}
	if l.EdgePostContentHTMLContainsFold != nil {
		predicates = append(predicates, label.HasPostsWith(post.ContentHTMLContainsFold(*l.EdgePostContentHTMLContainsFold)))
	}
	if l.EdgePostPublishedAtEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.PublishedAtEQ(*l.EdgePostPublishedAtEQ)))
	}
	if l.EdgePostPublishedAtNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.PublishedAtNEQ(*l.EdgePostPublishedAtNEQ)))
	}
	if l.EdgePostPublishedAtGT != nil {
		predicates = append(predicates, label.HasPostsWith(post.PublishedAtGT(*l.EdgePostPublishedAtGT)))
	}
	if l.EdgePostPublishedAtLT != nil {
		predicates = append(predicates, label.HasPostsWith(post.PublishedAtLT(*l.EdgePostPublishedAtLT)))
	}
	if l.EdgePostViewCountEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.ViewCountEQ(*l.EdgePostViewCountEQ)))
	}
	if l.EdgePostViewCountNEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.ViewCountNEQ(*l.EdgePostViewCountNEQ)))
	}
	if l.EdgePostViewCountGT != nil {
		predicates = append(predicates, label.HasPostsWith(post.ViewCountGT(*l.EdgePostViewCountGT)))
	}
	if l.EdgePostViewCountLT != nil {
		predicates = append(predicates, label.HasPostsWith(post.ViewCountLT(*l.EdgePostViewCountLT)))
	}
	if l.EdgePostPublicEQ != nil {
		predicates = append(predicates, label.HasPostsWith(post.PublicEQ(*l.EdgePostPublicEQ)))
	}
	if l.EdgeHasGithubRepository != nil {
		if *l.EdgeHasGithubRepository {
			predicates = append(predicates, label.HasGithubRepositories())
		} else {
			predicates = append(predicates, label.Not(label.HasGithubRepositories()))
		}
	}
	if l.EdgeGithubRepositoryRepoIDEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.RepoIDEQ(*l.EdgeGithubRepositoryRepoIDEQ)))
	}
	if l.EdgeGithubRepositoryRepoIDNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.RepoIDNEQ(*l.EdgeGithubRepositoryRepoIDNEQ)))
	}
	if l.EdgeGithubRepositoryNameEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameEQ(*l.EdgeGithubRepositoryNameEQ)))
	}
	if l.EdgeGithubRepositoryNameNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameNEQ(*l.EdgeGithubRepositoryNameNEQ)))
	}
	if l.EdgeGithubRepositoryNameIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameIn(l.EdgeGithubRepositoryNameIn...)))
	}
	if l.EdgeGithubRepositoryNameNotIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameNotIn(l.EdgeGithubRepositoryNameNotIn...)))
	}
	if l.EdgeGithubRepositoryNameEqualFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameEqualFold(*l.EdgeGithubRepositoryNameEqualFold)))
	}
	if l.EdgeGithubRepositoryNameContains != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameContains(*l.EdgeGithubRepositoryNameContains)))
	}
	if l.EdgeGithubRepositoryNameContainsFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameContainsFold(*l.EdgeGithubRepositoryNameContainsFold)))
	}
	if l.EdgeGithubRepositoryNameHasPrefix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameHasPrefix(*l.EdgeGithubRepositoryNameHasPrefix)))
	}
	if l.EdgeGithubRepositoryNameHasSuffix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.NameHasSuffix(*l.EdgeGithubRepositoryNameHasSuffix)))
	}
	if l.EdgeGithubRepositoryFullNameEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameEQ(*l.EdgeGithubRepositoryFullNameEQ)))
	}
	if l.EdgeGithubRepositoryFullNameNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameNEQ(*l.EdgeGithubRepositoryFullNameNEQ)))
	}
	if l.EdgeGithubRepositoryFullNameIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameIn(l.EdgeGithubRepositoryFullNameIn...)))
	}
	if l.EdgeGithubRepositoryFullNameNotIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameNotIn(l.EdgeGithubRepositoryFullNameNotIn...)))
	}
	if l.EdgeGithubRepositoryFullNameEqualFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameEqualFold(*l.EdgeGithubRepositoryFullNameEqualFold)))
	}
	if l.EdgeGithubRepositoryFullNameContains != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameContains(*l.EdgeGithubRepositoryFullNameContains)))
	}
	if l.EdgeGithubRepositoryFullNameContainsFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameContainsFold(*l.EdgeGithubRepositoryFullNameContainsFold)))
	}
	if l.EdgeGithubRepositoryFullNameHasPrefix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameHasPrefix(*l.EdgeGithubRepositoryFullNameHasPrefix)))
	}
	if l.EdgeGithubRepositoryFullNameHasSuffix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.FullNameHasSuffix(*l.EdgeGithubRepositoryFullNameHasSuffix)))
	}
	if l.EdgeGithubRepositoryOwnerLoginEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginEQ(*l.EdgeGithubRepositoryOwnerLoginEQ)))
	}
	if l.EdgeGithubRepositoryOwnerLoginNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginNEQ(*l.EdgeGithubRepositoryOwnerLoginNEQ)))
	}
	if l.EdgeGithubRepositoryOwnerLoginIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginIn(l.EdgeGithubRepositoryOwnerLoginIn...)))
	}
	if l.EdgeGithubRepositoryOwnerLoginNotIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginNotIn(l.EdgeGithubRepositoryOwnerLoginNotIn...)))
	}
	if l.EdgeGithubRepositoryOwnerLoginEqualFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginEqualFold(*l.EdgeGithubRepositoryOwnerLoginEqualFold)))
	}
	if l.EdgeGithubRepositoryOwnerLoginContains != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginContains(*l.EdgeGithubRepositoryOwnerLoginContains)))
	}
	if l.EdgeGithubRepositoryOwnerLoginContainsFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginContainsFold(*l.EdgeGithubRepositoryOwnerLoginContainsFold)))
	}
	if l.EdgeGithubRepositoryOwnerLoginHasPrefix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginHasPrefix(*l.EdgeGithubRepositoryOwnerLoginHasPrefix)))
	}
	if l.EdgeGithubRepositoryOwnerLoginHasSuffix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.OwnerLoginHasSuffix(*l.EdgeGithubRepositoryOwnerLoginHasSuffix)))
	}
	if l.EdgeGithubRepositoryPublicEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.PublicEQ(*l.EdgeGithubRepositoryPublicEQ)))
	}
	if l.EdgeGithubRepositoryDescriptionIsNil != nil {
		if *l.EdgeGithubRepositoryDescriptionIsNil {
			predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DescriptionIsNil()))
		} else {
			predicates = append(predicates, label.Not(label.HasGithubRepositoriesWith(githubrepository.DescriptionIsNil())))
		}
	}
	if l.EdgeGithubRepositoryDescriptionContains != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DescriptionContains(*l.EdgeGithubRepositoryDescriptionContains)))
	}
	if l.EdgeGithubRepositoryDescriptionContainsFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DescriptionContainsFold(*l.EdgeGithubRepositoryDescriptionContainsFold)))
	}
	if l.EdgeGithubRepositoryForkEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.ForkEQ(*l.EdgeGithubRepositoryForkEQ)))
	}
	if l.EdgeGithubRepositoryStarCountGT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.StarCountGT(*l.EdgeGithubRepositoryStarCountGT)))
	}
	if l.EdgeGithubRepositoryStarCountLT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.StarCountLT(*l.EdgeGithubRepositoryStarCountLT)))
	}
	if l.EdgeGithubRepositoryDefaultBranchEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchEQ(*l.EdgeGithubRepositoryDefaultBranchEQ)))
	}
	if l.EdgeGithubRepositoryDefaultBranchNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchNEQ(*l.EdgeGithubRepositoryDefaultBranchNEQ)))
	}
	if l.EdgeGithubRepositoryDefaultBranchIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchIn(l.EdgeGithubRepositoryDefaultBranchIn...)))
	}
	if l.EdgeGithubRepositoryDefaultBranchNotIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchNotIn(l.EdgeGithubRepositoryDefaultBranchNotIn...)))
	}
	if l.EdgeGithubRepositoryDefaultBranchEqualFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchEqualFold(*l.EdgeGithubRepositoryDefaultBranchEqualFold)))
	}
	if l.EdgeGithubRepositoryDefaultBranchContains != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchContains(*l.EdgeGithubRepositoryDefaultBranchContains)))
	}
	if l.EdgeGithubRepositoryDefaultBranchContainsFold != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchContainsFold(*l.EdgeGithubRepositoryDefaultBranchContainsFold)))
	}
	if l.EdgeGithubRepositoryDefaultBranchHasPrefix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchHasPrefix(*l.EdgeGithubRepositoryDefaultBranchHasPrefix)))
	}
	if l.EdgeGithubRepositoryDefaultBranchHasSuffix != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.DefaultBranchHasSuffix(*l.EdgeGithubRepositoryDefaultBranchHasSuffix)))
	}
	if l.EdgeGithubRepositoryIsTemplateEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.IsTemplateEQ(*l.EdgeGithubRepositoryIsTemplateEQ)))
	}
	if l.EdgeGithubRepositoryHasIssuesEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.HasIssuesEQ(*l.EdgeGithubRepositoryHasIssuesEQ)))
	}
	if l.EdgeGithubRepositoryArchivedEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.ArchivedEQ(*l.EdgeGithubRepositoryArchivedEQ)))
	}
	if l.EdgeGithubRepositoryPushedAtIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.PushedAtIn(l.EdgeGithubRepositoryPushedAtIn...)))
	}
	if l.EdgeGithubRepositoryPushedAtNotIn != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.PushedAtNotIn(l.EdgeGithubRepositoryPushedAtNotIn...)))
	}
	if l.EdgeGithubRepositoryCreatedAtEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.CreatedAtEQ(*l.EdgeGithubRepositoryCreatedAtEQ)))
	}
	if l.EdgeGithubRepositoryCreatedAtNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.CreatedAtNEQ(*l.EdgeGithubRepositoryCreatedAtNEQ)))
	}
	if l.EdgeGithubRepositoryCreatedAtGT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.CreatedAtGT(*l.EdgeGithubRepositoryCreatedAtGT)))
	}
	if l.EdgeGithubRepositoryCreatedAtLT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.CreatedAtLT(*l.EdgeGithubRepositoryCreatedAtLT)))
	}
	if l.EdgeGithubRepositoryUpdatedAtEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.UpdatedAtEQ(*l.EdgeGithubRepositoryUpdatedAtEQ)))
	}
	if l.EdgeGithubRepositoryUpdatedAtNEQ != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.UpdatedAtNEQ(*l.EdgeGithubRepositoryUpdatedAtNEQ)))
	}
	if l.EdgeGithubRepositoryUpdatedAtGT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.UpdatedAtGT(*l.EdgeGithubRepositoryUpdatedAtGT)))
	}
	if l.EdgeGithubRepositoryUpdatedAtLT != nil {
		predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.UpdatedAtLT(*l.EdgeGithubRepositoryUpdatedAtLT)))
	}
	if l.EdgeGithubRepositoryUpdatedAtIsNil != nil {
		if *l.EdgeGithubRepositoryUpdatedAtIsNil {
			predicates = append(predicates, label.HasGithubRepositoriesWith(githubrepository.UpdatedAtIsNil()))
		} else {
			predicates = append(predicates, label.Not(label.HasGithubRepositoriesWith(githubrepository.UpdatedAtIsNil())))
		}
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListLabelParams) ApplySorting(query *ent.LabelQuery) error {
	if err := l.Sorted.Validate(LabelSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingLabel(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListLabelParams) Exec(ctx context.Context, query *ent.LabelQuery) (results *PagedResponse[ent.Label], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadLabel(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, LabelPageConfig)
}

// ListPostParams defines parameters for listing Posts via a GET request.
type ListPostParams struct {
	Sorted
	Paginated[*ent.PostQuery, ent.Post]
	Filtered[predicate.Post]

	// Filters field "create_time" to be equal to the provided value.
	PostCreateTimeEQ *time.Time `form:"createTime.eq,omitempty" json:"post_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	PostCreateTimeNEQ *time.Time `form:"createTime.neq,omitempty" json:"post_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	PostCreateTimeGT *time.Time `form:"createTime.gt,omitempty" json:"post_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	PostCreateTimeLT *time.Time `form:"createTime.lt,omitempty" json:"post_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	PostUpdateTimeEQ *time.Time `form:"updateTime.eq,omitempty" json:"post_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	PostUpdateTimeNEQ *time.Time `form:"updateTime.neq,omitempty" json:"post_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	PostUpdateTimeGT *time.Time `form:"updateTime.gt,omitempty" json:"post_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	PostUpdateTimeLT *time.Time `form:"updateTime.lt,omitempty" json:"post_update_time_lt,omitempty"`
	// Filters field "slug" to be equal to the provided value.
	PostSlugEQ *string `form:"slug.eq,omitempty" json:"post_slug_eq,omitempty"`
	// Filters field "slug" to be not equal to the provided value.
	PostSlugNEQ *string `form:"slug.neq,omitempty" json:"post_slug_neq,omitempty"`
	// Filters field "slug" to be equal to the provided value, case-insensitive.
	PostSlugEqualFold *string `form:"slug.ieq,omitempty" json:"post_slug_equal_fold,omitempty"`
	// Filters field "slug" to contain the provided value.
	PostSlugContains *string `form:"slug.has,omitempty" json:"post_slug_contains,omitempty"`
	// Filters field "slug" to contain the provided value, case-insensitive.
	PostSlugContainsFold *string `form:"slug.ihas,omitempty" json:"post_slug_contains_fold,omitempty"`
	// Filters field "slug" to start with the provided value.
	PostSlugHasPrefix *string `form:"slug.prefix,omitempty" json:"post_slug_has_prefix,omitempty"`
	// Filters field "slug" to end with the provided value.
	PostSlugHasSuffix *string `form:"slug.suffix,omitempty" json:"post_slug_has_suffix,omitempty"`
	// Filters field "title" to be equal to the provided value.
	PostTitleEQ *string `form:"title.eq,omitempty" json:"post_title_eq,omitempty"`
	// Filters field "title" to be not equal to the provided value.
	PostTitleNEQ *string `form:"title.neq,omitempty" json:"post_title_neq,omitempty"`
	// Filters field "title" to be within the provided values.
	PostTitleIn []string `form:"title.in,omitempty" json:"post_title_in,omitempty"`
	// Filters field "title" to be not within the provided values.
	PostTitleNotIn []string `form:"title.notIn,omitempty" json:"post_title_not_in,omitempty"`
	// Filters field "title" to be equal to the provided value, case-insensitive.
	PostTitleEqualFold *string `form:"title.ieq,omitempty" json:"post_title_equal_fold,omitempty"`
	// Filters field "title" to contain the provided value.
	PostTitleContains *string `form:"title.has,omitempty" json:"post_title_contains,omitempty"`
	// Filters field "title" to contain the provided value, case-insensitive.
	PostTitleContainsFold *string `form:"title.ihas,omitempty" json:"post_title_contains_fold,omitempty"`
	// Filters field "title" to start with the provided value.
	PostTitleHasPrefix *string `form:"title.prefix,omitempty" json:"post_title_has_prefix,omitempty"`
	// Filters field "title" to end with the provided value.
	PostTitleHasSuffix *string `form:"title.suffix,omitempty" json:"post_title_has_suffix,omitempty"`
	// Filters field "content" to contain the provided value.
	PostContentContains *string `form:"content.has,omitempty" json:"post_content_contains,omitempty"`
	// Filters field "content" to contain the provided value, case-insensitive.
	PostContentContainsFold *string `form:"content.ihas,omitempty" json:"post_content_contains_fold,omitempty"`
	// Filters field "content_html" to contain the provided value.
	PostContentHTMLContains *string `form:"contentHTML.has,omitempty" json:"post_content_html_contains,omitempty"`
	// Filters field "content_html" to contain the provided value, case-insensitive.
	PostContentHTMLContainsFold *string `form:"contentHTML.ihas,omitempty" json:"post_content_html_contains_fold,omitempty"`
	// Filters field "published_at" to be equal to the provided value.
	PostPublishedAtEQ *time.Time `form:"publishedAt.eq,omitempty" json:"post_published_at_eq,omitempty"`
	// Filters field "published_at" to be not equal to the provided value.
	PostPublishedAtNEQ *time.Time `form:"publishedAt.neq,omitempty" json:"post_published_at_neq,omitempty"`
	// Filters field "published_at" to be greater than the provided value.
	PostPublishedAtGT *time.Time `form:"publishedAt.gt,omitempty" json:"post_published_at_gt,omitempty"`
	// Filters field "published_at" to be less than the provided value.
	PostPublishedAtLT *time.Time `form:"publishedAt.lt,omitempty" json:"post_published_at_lt,omitempty"`
	// Filters field "view_count" to be equal to the provided value.
	PostViewCountEQ *int `form:"viewCount.eq,omitempty" json:"post_view_count_eq,omitempty"`
	// Filters field "view_count" to be not equal to the provided value.
	PostViewCountNEQ *int `form:"viewCount.neq,omitempty" json:"post_view_count_neq,omitempty"`
	// Filters field "view_count" to be greater than the provided value.
	PostViewCountGT *int `form:"viewCount.gt,omitempty" json:"post_view_count_gt,omitempty"`
	// Filters field "view_count" to be less than the provided value.
	PostViewCountLT *int `form:"viewCount.lt,omitempty" json:"post_view_count_lt,omitempty"`
	// Filters field "public" to be equal to the provided value.
	PostPublicEQ *bool `form:"public.eq,omitempty" json:"post_public_eq,omitempty"`
	// If true, only return entities that have a author edge.
	EdgeHasAuthor *bool `form:"has.author,omitempty" json:"edge_has_author,omitempty"`
	// Filters field "create_time" to be equal to the provided value.
	EdgeAuthorCreateTimeEQ *time.Time `form:"author.createTime.eq,omitempty" json:"edge_author_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	EdgeAuthorCreateTimeNEQ *time.Time `form:"author.createTime.neq,omitempty" json:"edge_author_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	EdgeAuthorCreateTimeGT *time.Time `form:"author.createTime.gt,omitempty" json:"edge_author_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	EdgeAuthorCreateTimeLT *time.Time `form:"author.createTime.lt,omitempty" json:"edge_author_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	EdgeAuthorUpdateTimeEQ *time.Time `form:"author.updateTime.eq,omitempty" json:"edge_author_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	EdgeAuthorUpdateTimeNEQ *time.Time `form:"author.updateTime.neq,omitempty" json:"edge_author_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	EdgeAuthorUpdateTimeGT *time.Time `form:"author.updateTime.gt,omitempty" json:"edge_author_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	EdgeAuthorUpdateTimeLT *time.Time `form:"author.updateTime.lt,omitempty" json:"edge_author_update_time_lt,omitempty"`
	// Filters field "user_id" to be equal to the provided value.
	EdgeAuthorUserIDEQ *int `form:"author.userID.eq,omitempty" json:"edge_author_user_ideq,omitempty"`
	// Filters field "user_id" to be not equal to the provided value.
	EdgeAuthorUserIDNEQ *int `form:"author.userID.neq,omitempty" json:"edge_author_user_idneq,omitempty"`
	// Filters field "user_id" to be within the provided values.
	EdgeAuthorUserIDIn []int `form:"author.userID.in,omitempty" json:"edge_author_user_id_in,omitempty"`
	// Filters field "user_id" to be not within the provided values.
	EdgeAuthorUserIDNotIn []int `form:"author.userID.notIn,omitempty" json:"edge_author_user_id_not_in,omitempty"`
	// Filters field "login" to be equal to the provided value.
	EdgeAuthorLoginEQ *string `form:"author.login.eq,omitempty" json:"edge_author_login_eq,omitempty"`
	// Filters field "login" to be not equal to the provided value.
	EdgeAuthorLoginNEQ *string `form:"author.login.neq,omitempty" json:"edge_author_login_neq,omitempty"`
	// Filters field "login" to be within the provided values.
	EdgeAuthorLoginIn []string `form:"author.login.in,omitempty" json:"edge_author_login_in,omitempty"`
	// Filters field "login" to be not within the provided values.
	EdgeAuthorLoginNotIn []string `form:"author.login.notIn,omitempty" json:"edge_author_login_not_in,omitempty"`
	// Filters field "login" to be equal to the provided value, case-insensitive.
	EdgeAuthorLoginEqualFold *string `form:"author.login.ieq,omitempty" json:"edge_author_login_equal_fold,omitempty"`
	// Filters field "login" to contain the provided value.
	EdgeAuthorLoginContains *string `form:"author.login.has,omitempty" json:"edge_author_login_contains,omitempty"`
	// Filters field "login" to contain the provided value, case-insensitive.
	EdgeAuthorLoginContainsFold *string `form:"author.login.ihas,omitempty" json:"edge_author_login_contains_fold,omitempty"`
	// Filters field "login" to start with the provided value.
	EdgeAuthorLoginHasPrefix *string `form:"author.login.prefix,omitempty" json:"edge_author_login_has_prefix,omitempty"`
	// Filters field "login" to end with the provided value.
	EdgeAuthorLoginHasSuffix *string `form:"author.login.suffix,omitempty" json:"edge_author_login_has_suffix,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeAuthorNameEQ *string `form:"author.name.eq,omitempty" json:"edge_author_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeAuthorNameNEQ *string `form:"author.name.neq,omitempty" json:"edge_author_name_neq,omitempty"`
	// Filters field "name" to be null/nil.
	EdgeAuthorNameIsNil *bool `form:"author.name.null,omitempty" json:"edge_author_name_is_nil,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeAuthorNameIn []string `form:"author.name.in,omitempty" json:"edge_author_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeAuthorNameNotIn []string `form:"author.name.notIn,omitempty" json:"edge_author_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeAuthorNameEqualFold *string `form:"author.name.ieq,omitempty" json:"edge_author_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeAuthorNameContains *string `form:"author.name.has,omitempty" json:"edge_author_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeAuthorNameContainsFold *string `form:"author.name.ihas,omitempty" json:"edge_author_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeAuthorNameHasPrefix *string `form:"author.name.prefix,omitempty" json:"edge_author_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeAuthorNameHasSuffix *string `form:"author.name.suffix,omitempty" json:"edge_author_name_has_suffix,omitempty"`
	// Filters field "email" to be equal to the provided value.
	EdgeAuthorEmailEQ *string `form:"author.email.eq,omitempty" json:"edge_author_email_eq,omitempty"`
	// Filters field "email" to be not equal to the provided value.
	EdgeAuthorEmailNEQ *string `form:"author.email.neq,omitempty" json:"edge_author_email_neq,omitempty"`
	// Filters field "email" to be null/nil.
	EdgeAuthorEmailIsNil *bool `form:"author.email.null,omitempty" json:"edge_author_email_is_nil,omitempty"`
	// Filters field "email" to be within the provided values.
	EdgeAuthorEmailIn []string `form:"author.email.in,omitempty" json:"edge_author_email_in,omitempty"`
	// Filters field "email" to be not within the provided values.
	EdgeAuthorEmailNotIn []string `form:"author.email.notIn,omitempty" json:"edge_author_email_not_in,omitempty"`
	// Filters field "email" to be equal to the provided value, case-insensitive.
	EdgeAuthorEmailEqualFold *string `form:"author.email.ieq,omitempty" json:"edge_author_email_equal_fold,omitempty"`
	// Filters field "email" to contain the provided value.
	EdgeAuthorEmailContains *string `form:"author.email.has,omitempty" json:"edge_author_email_contains,omitempty"`
	// Filters field "email" to contain the provided value, case-insensitive.
	EdgeAuthorEmailContainsFold *string `form:"author.email.ihas,omitempty" json:"edge_author_email_contains_fold,omitempty"`
	// Filters field "email" to start with the provided value.
	EdgeAuthorEmailHasPrefix *string `form:"author.email.prefix,omitempty" json:"edge_author_email_has_prefix,omitempty"`
	// Filters field "email" to end with the provided value.
	EdgeAuthorEmailHasSuffix *string `form:"author.email.suffix,omitempty" json:"edge_author_email_has_suffix,omitempty"`
	// Filters field "location" to be equal to the provided value.
	EdgeAuthorLocationEQ *string `form:"author.location.eq,omitempty" json:"edge_author_location_eq,omitempty"`
	// Filters field "location" to be not equal to the provided value.
	EdgeAuthorLocationNEQ *string `form:"author.location.neq,omitempty" json:"edge_author_location_neq,omitempty"`
	// Filters field "location" to be null/nil.
	EdgeAuthorLocationIsNil *bool `form:"author.location.null,omitempty" json:"edge_author_location_is_nil,omitempty"`
	// Filters field "location" to be within the provided values.
	EdgeAuthorLocationIn []string `form:"author.location.in,omitempty" json:"edge_author_location_in,omitempty"`
	// Filters field "location" to be not within the provided values.
	EdgeAuthorLocationNotIn []string `form:"author.location.notIn,omitempty" json:"edge_author_location_not_in,omitempty"`
	// Filters field "location" to be equal to the provided value, case-insensitive.
	EdgeAuthorLocationEqualFold *string `form:"author.location.ieq,omitempty" json:"edge_author_location_equal_fold,omitempty"`
	// Filters field "location" to contain the provided value.
	EdgeAuthorLocationContains *string `form:"author.location.has,omitempty" json:"edge_author_location_contains,omitempty"`
	// Filters field "location" to contain the provided value, case-insensitive.
	EdgeAuthorLocationContainsFold *string `form:"author.location.ihas,omitempty" json:"edge_author_location_contains_fold,omitempty"`
	// Filters field "location" to start with the provided value.
	EdgeAuthorLocationHasPrefix *string `form:"author.location.prefix,omitempty" json:"edge_author_location_has_prefix,omitempty"`
	// Filters field "location" to end with the provided value.
	EdgeAuthorLocationHasSuffix *string `form:"author.location.suffix,omitempty" json:"edge_author_location_has_suffix,omitempty"`
	// If true, only return entities that have a label edge.
	EdgeHasLabel *bool `form:"has.label,omitempty" json:"edge_has_label,omitempty"`
	// Filters field "create_time" to be equal to the provided value.
	EdgeLabelCreateTimeEQ *time.Time `form:"label.createTime.eq,omitempty" json:"edge_label_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	EdgeLabelCreateTimeNEQ *time.Time `form:"label.createTime.neq,omitempty" json:"edge_label_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	EdgeLabelCreateTimeGT *time.Time `form:"label.createTime.gt,omitempty" json:"edge_label_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	EdgeLabelCreateTimeLT *time.Time `form:"label.createTime.lt,omitempty" json:"edge_label_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	EdgeLabelUpdateTimeEQ *time.Time `form:"label.updateTime.eq,omitempty" json:"edge_label_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	EdgeLabelUpdateTimeNEQ *time.Time `form:"label.updateTime.neq,omitempty" json:"edge_label_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	EdgeLabelUpdateTimeGT *time.Time `form:"label.updateTime.gt,omitempty" json:"edge_label_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	EdgeLabelUpdateTimeLT *time.Time `form:"label.updateTime.lt,omitempty" json:"edge_label_update_time_lt,omitempty"`
	// Filters field "name" to be equal to the provided value.
	EdgeLabelNameEQ *string `form:"label.name.eq,omitempty" json:"edge_label_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	EdgeLabelNameNEQ *string `form:"label.name.neq,omitempty" json:"edge_label_name_neq,omitempty"`
	// Filters field "name" to be within the provided values.
	EdgeLabelNameIn []string `form:"label.name.in,omitempty" json:"edge_label_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	EdgeLabelNameNotIn []string `form:"label.name.notIn,omitempty" json:"edge_label_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	EdgeLabelNameEqualFold *string `form:"label.name.ieq,omitempty" json:"edge_label_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	EdgeLabelNameContains *string `form:"label.name.has,omitempty" json:"edge_label_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	EdgeLabelNameContainsFold *string `form:"label.name.ihas,omitempty" json:"edge_label_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	EdgeLabelNameHasPrefix *string `form:"label.name.prefix,omitempty" json:"edge_label_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	EdgeLabelNameHasSuffix *string `form:"label.name.suffix,omitempty" json:"edge_label_name_has_suffix,omitempty"`

	// Field "search.eq" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchEQ *string `form:"search.eq,omitempty" json:"post_filter_group_search_eq,omitempty"`
	// Field "search.neq" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchNEQ *string `form:"search.neq,omitempty" json:"post_filter_group_search_neq,omitempty"`
	// Field "search.ieq" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchEqualFold *string `form:"search.ieq,omitempty" json:"post_filter_group_search_equal_fold,omitempty"`
	// Field "search.has" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchContains *string `form:"search.has,omitempty" json:"post_filter_group_search_contains,omitempty"`
	// Field "search.ihas" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchContainsFold *string `form:"search.ihas,omitempty" json:"post_filter_group_search_contains_fold,omitempty"`
	// Field "search.prefix" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchHasPrefix *string `form:"search.prefix,omitempty" json:"post_filter_group_search_has_prefix,omitempty"`
	// Field "search.suffix" filters across multiple fields (case insensitive): slug, title, content.
	PostFilterGroupSearchHasSuffix *string `form:"search.suffix,omitempty" json:"post_filter_group_search_has_suffix,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in Post.
func (l *ListPostParams) FilterPredicates() (predicate.Post, error) {
	var predicates []predicate.Post

	if l.PostCreateTimeEQ != nil {
		predicates = append(predicates, post.CreateTimeEQ(*l.PostCreateTimeEQ))
	}
	if l.PostCreateTimeNEQ != nil {
		predicates = append(predicates, post.CreateTimeNEQ(*l.PostCreateTimeNEQ))
	}
	if l.PostCreateTimeGT != nil {
		predicates = append(predicates, post.CreateTimeGT(*l.PostCreateTimeGT))
	}
	if l.PostCreateTimeLT != nil {
		predicates = append(predicates, post.CreateTimeLT(*l.PostCreateTimeLT))
	}
	if l.PostUpdateTimeEQ != nil {
		predicates = append(predicates, post.UpdateTimeEQ(*l.PostUpdateTimeEQ))
	}
	if l.PostUpdateTimeNEQ != nil {
		predicates = append(predicates, post.UpdateTimeNEQ(*l.PostUpdateTimeNEQ))
	}
	if l.PostUpdateTimeGT != nil {
		predicates = append(predicates, post.UpdateTimeGT(*l.PostUpdateTimeGT))
	}
	if l.PostUpdateTimeLT != nil {
		predicates = append(predicates, post.UpdateTimeLT(*l.PostUpdateTimeLT))
	}
	if l.PostSlugEQ != nil {
		predicates = append(predicates, post.SlugEQ(*l.PostSlugEQ))
	}
	if l.PostSlugNEQ != nil {
		predicates = append(predicates, post.SlugNEQ(*l.PostSlugNEQ))
	}
	if l.PostSlugEqualFold != nil {
		predicates = append(predicates, post.SlugEqualFold(*l.PostSlugEqualFold))
	}
	if l.PostSlugContains != nil {
		predicates = append(predicates, post.SlugContains(*l.PostSlugContains))
	}
	if l.PostSlugContainsFold != nil {
		predicates = append(predicates, post.SlugContainsFold(*l.PostSlugContainsFold))
	}
	if l.PostSlugHasPrefix != nil {
		predicates = append(predicates, post.SlugHasPrefix(*l.PostSlugHasPrefix))
	}
	if l.PostSlugHasSuffix != nil {
		predicates = append(predicates, post.SlugHasSuffix(*l.PostSlugHasSuffix))
	}
	if l.PostTitleEQ != nil {
		predicates = append(predicates, post.TitleEQ(*l.PostTitleEQ))
	}
	if l.PostTitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*l.PostTitleNEQ))
	}
	if l.PostTitleIn != nil {
		predicates = append(predicates, post.TitleIn(l.PostTitleIn...))
	}
	if l.PostTitleNotIn != nil {
		predicates = append(predicates, post.TitleNotIn(l.PostTitleNotIn...))
	}
	if l.PostTitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*l.PostTitleEqualFold))
	}
	if l.PostTitleContains != nil {
		predicates = append(predicates, post.TitleContains(*l.PostTitleContains))
	}
	if l.PostTitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*l.PostTitleContainsFold))
	}
	if l.PostTitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*l.PostTitleHasPrefix))
	}
	if l.PostTitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*l.PostTitleHasSuffix))
	}
	if l.PostContentContains != nil {
		predicates = append(predicates, post.ContentContains(*l.PostContentContains))
	}
	if l.PostContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*l.PostContentContainsFold))
	}
	if l.PostContentHTMLContains != nil {
		predicates = append(predicates, post.ContentHTMLContains(*l.PostContentHTMLContains))
	}
	if l.PostContentHTMLContainsFold != nil {
		predicates = append(predicates, post.ContentHTMLContainsFold(*l.PostContentHTMLContainsFold))
	}
	if l.PostPublishedAtEQ != nil {
		predicates = append(predicates, post.PublishedAtEQ(*l.PostPublishedAtEQ))
	}
	if l.PostPublishedAtNEQ != nil {
		predicates = append(predicates, post.PublishedAtNEQ(*l.PostPublishedAtNEQ))
	}
	if l.PostPublishedAtGT != nil {
		predicates = append(predicates, post.PublishedAtGT(*l.PostPublishedAtGT))
	}
	if l.PostPublishedAtLT != nil {
		predicates = append(predicates, post.PublishedAtLT(*l.PostPublishedAtLT))
	}
	if l.PostViewCountEQ != nil {
		predicates = append(predicates, post.ViewCountEQ(*l.PostViewCountEQ))
	}
	if l.PostViewCountNEQ != nil {
		predicates = append(predicates, post.ViewCountNEQ(*l.PostViewCountNEQ))
	}
	if l.PostViewCountGT != nil {
		predicates = append(predicates, post.ViewCountGT(*l.PostViewCountGT))
	}
	if l.PostViewCountLT != nil {
		predicates = append(predicates, post.ViewCountLT(*l.PostViewCountLT))
	}
	if l.PostPublicEQ != nil {
		predicates = append(predicates, post.PublicEQ(*l.PostPublicEQ))
	}
	if l.EdgeHasAuthor != nil {
		if *l.EdgeHasAuthor {
			predicates = append(predicates, post.HasAuthor())
		} else {
			predicates = append(predicates, post.Not(post.HasAuthor()))
		}
	}
	if l.EdgeAuthorCreateTimeEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.CreateTimeEQ(*l.EdgeAuthorCreateTimeEQ)))
	}
	if l.EdgeAuthorCreateTimeNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.CreateTimeNEQ(*l.EdgeAuthorCreateTimeNEQ)))
	}
	if l.EdgeAuthorCreateTimeGT != nil {
		predicates = append(predicates, post.HasAuthorWith(user.CreateTimeGT(*l.EdgeAuthorCreateTimeGT)))
	}
	if l.EdgeAuthorCreateTimeLT != nil {
		predicates = append(predicates, post.HasAuthorWith(user.CreateTimeLT(*l.EdgeAuthorCreateTimeLT)))
	}
	if l.EdgeAuthorUpdateTimeEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UpdateTimeEQ(*l.EdgeAuthorUpdateTimeEQ)))
	}
	if l.EdgeAuthorUpdateTimeNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UpdateTimeNEQ(*l.EdgeAuthorUpdateTimeNEQ)))
	}
	if l.EdgeAuthorUpdateTimeGT != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UpdateTimeGT(*l.EdgeAuthorUpdateTimeGT)))
	}
	if l.EdgeAuthorUpdateTimeLT != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UpdateTimeLT(*l.EdgeAuthorUpdateTimeLT)))
	}
	if l.EdgeAuthorUserIDEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UserIDEQ(*l.EdgeAuthorUserIDEQ)))
	}
	if l.EdgeAuthorUserIDNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UserIDNEQ(*l.EdgeAuthorUserIDNEQ)))
	}
	if l.EdgeAuthorUserIDIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UserIDIn(l.EdgeAuthorUserIDIn...)))
	}
	if l.EdgeAuthorUserIDNotIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.UserIDNotIn(l.EdgeAuthorUserIDNotIn...)))
	}
	if l.EdgeAuthorLoginEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginEQ(*l.EdgeAuthorLoginEQ)))
	}
	if l.EdgeAuthorLoginNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginNEQ(*l.EdgeAuthorLoginNEQ)))
	}
	if l.EdgeAuthorLoginIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginIn(l.EdgeAuthorLoginIn...)))
	}
	if l.EdgeAuthorLoginNotIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginNotIn(l.EdgeAuthorLoginNotIn...)))
	}
	if l.EdgeAuthorLoginEqualFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginEqualFold(*l.EdgeAuthorLoginEqualFold)))
	}
	if l.EdgeAuthorLoginContains != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginContains(*l.EdgeAuthorLoginContains)))
	}
	if l.EdgeAuthorLoginContainsFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginContainsFold(*l.EdgeAuthorLoginContainsFold)))
	}
	if l.EdgeAuthorLoginHasPrefix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginHasPrefix(*l.EdgeAuthorLoginHasPrefix)))
	}
	if l.EdgeAuthorLoginHasSuffix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LoginHasSuffix(*l.EdgeAuthorLoginHasSuffix)))
	}
	if l.EdgeAuthorNameEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameEQ(*l.EdgeAuthorNameEQ)))
	}
	if l.EdgeAuthorNameNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameNEQ(*l.EdgeAuthorNameNEQ)))
	}
	if l.EdgeAuthorNameIsNil != nil {
		if *l.EdgeAuthorNameIsNil {
			predicates = append(predicates, post.HasAuthorWith(user.NameIsNil()))
		} else {
			predicates = append(predicates, post.Not(post.HasAuthorWith(user.NameIsNil())))
		}
	}
	if l.EdgeAuthorNameIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameIn(l.EdgeAuthorNameIn...)))
	}
	if l.EdgeAuthorNameNotIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameNotIn(l.EdgeAuthorNameNotIn...)))
	}
	if l.EdgeAuthorNameEqualFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameEqualFold(*l.EdgeAuthorNameEqualFold)))
	}
	if l.EdgeAuthorNameContains != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameContains(*l.EdgeAuthorNameContains)))
	}
	if l.EdgeAuthorNameContainsFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameContainsFold(*l.EdgeAuthorNameContainsFold)))
	}
	if l.EdgeAuthorNameHasPrefix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameHasPrefix(*l.EdgeAuthorNameHasPrefix)))
	}
	if l.EdgeAuthorNameHasSuffix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.NameHasSuffix(*l.EdgeAuthorNameHasSuffix)))
	}
	if l.EdgeAuthorEmailEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailEQ(*l.EdgeAuthorEmailEQ)))
	}
	if l.EdgeAuthorEmailNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailNEQ(*l.EdgeAuthorEmailNEQ)))
	}
	if l.EdgeAuthorEmailIsNil != nil {
		if *l.EdgeAuthorEmailIsNil {
			predicates = append(predicates, post.HasAuthorWith(user.EmailIsNil()))
		} else {
			predicates = append(predicates, post.Not(post.HasAuthorWith(user.EmailIsNil())))
		}
	}
	if l.EdgeAuthorEmailIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailIn(l.EdgeAuthorEmailIn...)))
	}
	if l.EdgeAuthorEmailNotIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailNotIn(l.EdgeAuthorEmailNotIn...)))
	}
	if l.EdgeAuthorEmailEqualFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailEqualFold(*l.EdgeAuthorEmailEqualFold)))
	}
	if l.EdgeAuthorEmailContains != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailContains(*l.EdgeAuthorEmailContains)))
	}
	if l.EdgeAuthorEmailContainsFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailContainsFold(*l.EdgeAuthorEmailContainsFold)))
	}
	if l.EdgeAuthorEmailHasPrefix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailHasPrefix(*l.EdgeAuthorEmailHasPrefix)))
	}
	if l.EdgeAuthorEmailHasSuffix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.EmailHasSuffix(*l.EdgeAuthorEmailHasSuffix)))
	}
	if l.EdgeAuthorLocationEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationEQ(*l.EdgeAuthorLocationEQ)))
	}
	if l.EdgeAuthorLocationNEQ != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationNEQ(*l.EdgeAuthorLocationNEQ)))
	}
	if l.EdgeAuthorLocationIsNil != nil {
		if *l.EdgeAuthorLocationIsNil {
			predicates = append(predicates, post.HasAuthorWith(user.LocationIsNil()))
		} else {
			predicates = append(predicates, post.Not(post.HasAuthorWith(user.LocationIsNil())))
		}
	}
	if l.EdgeAuthorLocationIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationIn(l.EdgeAuthorLocationIn...)))
	}
	if l.EdgeAuthorLocationNotIn != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationNotIn(l.EdgeAuthorLocationNotIn...)))
	}
	if l.EdgeAuthorLocationEqualFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationEqualFold(*l.EdgeAuthorLocationEqualFold)))
	}
	if l.EdgeAuthorLocationContains != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationContains(*l.EdgeAuthorLocationContains)))
	}
	if l.EdgeAuthorLocationContainsFold != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationContainsFold(*l.EdgeAuthorLocationContainsFold)))
	}
	if l.EdgeAuthorLocationHasPrefix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationHasPrefix(*l.EdgeAuthorLocationHasPrefix)))
	}
	if l.EdgeAuthorLocationHasSuffix != nil {
		predicates = append(predicates, post.HasAuthorWith(user.LocationHasSuffix(*l.EdgeAuthorLocationHasSuffix)))
	}
	if l.EdgeHasLabel != nil {
		if *l.EdgeHasLabel {
			predicates = append(predicates, post.HasLabels())
		} else {
			predicates = append(predicates, post.Not(post.HasLabels()))
		}
	}
	if l.EdgeLabelCreateTimeEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.CreateTimeEQ(*l.EdgeLabelCreateTimeEQ)))
	}
	if l.EdgeLabelCreateTimeNEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.CreateTimeNEQ(*l.EdgeLabelCreateTimeNEQ)))
	}
	if l.EdgeLabelCreateTimeGT != nil {
		predicates = append(predicates, post.HasLabelsWith(label.CreateTimeGT(*l.EdgeLabelCreateTimeGT)))
	}
	if l.EdgeLabelCreateTimeLT != nil {
		predicates = append(predicates, post.HasLabelsWith(label.CreateTimeLT(*l.EdgeLabelCreateTimeLT)))
	}
	if l.EdgeLabelUpdateTimeEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.UpdateTimeEQ(*l.EdgeLabelUpdateTimeEQ)))
	}
	if l.EdgeLabelUpdateTimeNEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.UpdateTimeNEQ(*l.EdgeLabelUpdateTimeNEQ)))
	}
	if l.EdgeLabelUpdateTimeGT != nil {
		predicates = append(predicates, post.HasLabelsWith(label.UpdateTimeGT(*l.EdgeLabelUpdateTimeGT)))
	}
	if l.EdgeLabelUpdateTimeLT != nil {
		predicates = append(predicates, post.HasLabelsWith(label.UpdateTimeLT(*l.EdgeLabelUpdateTimeLT)))
	}
	if l.EdgeLabelNameEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameEQ(*l.EdgeLabelNameEQ)))
	}
	if l.EdgeLabelNameNEQ != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameNEQ(*l.EdgeLabelNameNEQ)))
	}
	if l.EdgeLabelNameIn != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameIn(l.EdgeLabelNameIn...)))
	}
	if l.EdgeLabelNameNotIn != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameNotIn(l.EdgeLabelNameNotIn...)))
	}
	if l.EdgeLabelNameEqualFold != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameEqualFold(*l.EdgeLabelNameEqualFold)))
	}
	if l.EdgeLabelNameContains != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameContains(*l.EdgeLabelNameContains)))
	}
	if l.EdgeLabelNameContainsFold != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameContainsFold(*l.EdgeLabelNameContainsFold)))
	}
	if l.EdgeLabelNameHasPrefix != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameHasPrefix(*l.EdgeLabelNameHasPrefix)))
	}
	if l.EdgeLabelNameHasSuffix != nil {
		predicates = append(predicates, post.HasLabelsWith(label.NameHasSuffix(*l.EdgeLabelNameHasSuffix)))
	}

	if l.PostFilterGroupSearchEQ != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugEQ(*l.PostFilterGroupSearchEQ),
			post.TitleEQ(*l.PostFilterGroupSearchEQ),
			post.ContentEQ(*l.PostFilterGroupSearchEQ),
		))
	}
	if l.PostFilterGroupSearchNEQ != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugNEQ(*l.PostFilterGroupSearchNEQ),
			post.TitleNEQ(*l.PostFilterGroupSearchNEQ),
			post.ContentNEQ(*l.PostFilterGroupSearchNEQ),
		))
	}
	if l.PostFilterGroupSearchEqualFold != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugEqualFold(*l.PostFilterGroupSearchEqualFold),
			post.TitleEqualFold(*l.PostFilterGroupSearchEqualFold),
			post.ContentEqualFold(*l.PostFilterGroupSearchEqualFold),
		))
	}
	if l.PostFilterGroupSearchContains != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugContains(*l.PostFilterGroupSearchContains),
			post.TitleContains(*l.PostFilterGroupSearchContains),
			post.ContentContains(*l.PostFilterGroupSearchContains),
		))
	}
	if l.PostFilterGroupSearchContainsFold != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugContainsFold(*l.PostFilterGroupSearchContainsFold),
			post.TitleContainsFold(*l.PostFilterGroupSearchContainsFold),
			post.ContentContainsFold(*l.PostFilterGroupSearchContainsFold),
		))
	}
	if l.PostFilterGroupSearchHasPrefix != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugHasPrefix(*l.PostFilterGroupSearchHasPrefix),
			post.TitleHasPrefix(*l.PostFilterGroupSearchHasPrefix),
			post.ContentHasPrefix(*l.PostFilterGroupSearchHasPrefix),
		))
	}
	if l.PostFilterGroupSearchHasSuffix != nil {
		predicates = append(predicates, sql.OrPredicates(
			post.SlugHasSuffix(*l.PostFilterGroupSearchHasSuffix),
			post.TitleHasSuffix(*l.PostFilterGroupSearchHasSuffix),
			post.ContentHasSuffix(*l.PostFilterGroupSearchHasSuffix),
		))
	}
	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListPostParams) ApplySorting(query *ent.PostQuery) error {
	if err := l.Sorted.Validate(PostSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingPost(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListPostParams) Exec(ctx context.Context, query *ent.PostQuery) (results *PagedResponse[ent.Post], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadPost(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, PostPageConfig)
}

// ListUserParams defines parameters for listing Users via a GET request.
type ListUserParams struct {
	Sorted
	Paginated[*ent.UserQuery, ent.User]
	Filtered[predicate.User]

	// Filters field "create_time" to be equal to the provided value.
	UserCreateTimeEQ *time.Time `form:"createTime.eq,omitempty" json:"user_create_time_eq,omitempty"`
	// Filters field "create_time" to be not equal to the provided value.
	UserCreateTimeNEQ *time.Time `form:"createTime.neq,omitempty" json:"user_create_time_neq,omitempty"`
	// Filters field "create_time" to be greater than the provided value.
	UserCreateTimeGT *time.Time `form:"createTime.gt,omitempty" json:"user_create_time_gt,omitempty"`
	// Filters field "create_time" to be less than the provided value.
	UserCreateTimeLT *time.Time `form:"createTime.lt,omitempty" json:"user_create_time_lt,omitempty"`
	// Filters field "update_time" to be equal to the provided value.
	UserUpdateTimeEQ *time.Time `form:"updateTime.eq,omitempty" json:"user_update_time_eq,omitempty"`
	// Filters field "update_time" to be not equal to the provided value.
	UserUpdateTimeNEQ *time.Time `form:"updateTime.neq,omitempty" json:"user_update_time_neq,omitempty"`
	// Filters field "update_time" to be greater than the provided value.
	UserUpdateTimeGT *time.Time `form:"updateTime.gt,omitempty" json:"user_update_time_gt,omitempty"`
	// Filters field "update_time" to be less than the provided value.
	UserUpdateTimeLT *time.Time `form:"updateTime.lt,omitempty" json:"user_update_time_lt,omitempty"`
	// Filters field "user_id" to be equal to the provided value.
	UserUserIDEQ *int `form:"userID.eq,omitempty" json:"user_user_ideq,omitempty"`
	// Filters field "user_id" to be not equal to the provided value.
	UserUserIDNEQ *int `form:"userID.neq,omitempty" json:"user_user_idneq,omitempty"`
	// Filters field "user_id" to be within the provided values.
	UserUserIDIn []int `form:"userID.in,omitempty" json:"user_user_id_in,omitempty"`
	// Filters field "user_id" to be not within the provided values.
	UserUserIDNotIn []int `form:"userID.notIn,omitempty" json:"user_user_id_not_in,omitempty"`
	// Filters field "login" to be equal to the provided value.
	UserLoginEQ *string `form:"login.eq,omitempty" json:"user_login_eq,omitempty"`
	// Filters field "login" to be not equal to the provided value.
	UserLoginNEQ *string `form:"login.neq,omitempty" json:"user_login_neq,omitempty"`
	// Filters field "login" to be within the provided values.
	UserLoginIn []string `form:"login.in,omitempty" json:"user_login_in,omitempty"`
	// Filters field "login" to be not within the provided values.
	UserLoginNotIn []string `form:"login.notIn,omitempty" json:"user_login_not_in,omitempty"`
	// Filters field "login" to be equal to the provided value, case-insensitive.
	UserLoginEqualFold *string `form:"login.ieq,omitempty" json:"user_login_equal_fold,omitempty"`
	// Filters field "login" to contain the provided value.
	UserLoginContains *string `form:"login.has,omitempty" json:"user_login_contains,omitempty"`
	// Filters field "login" to contain the provided value, case-insensitive.
	UserLoginContainsFold *string `form:"login.ihas,omitempty" json:"user_login_contains_fold,omitempty"`
	// Filters field "login" to start with the provided value.
	UserLoginHasPrefix *string `form:"login.prefix,omitempty" json:"user_login_has_prefix,omitempty"`
	// Filters field "login" to end with the provided value.
	UserLoginHasSuffix *string `form:"login.suffix,omitempty" json:"user_login_has_suffix,omitempty"`
	// Filters field "name" to be equal to the provided value.
	UserNameEQ *string `form:"name.eq,omitempty" json:"user_name_eq,omitempty"`
	// Filters field "name" to be not equal to the provided value.
	UserNameNEQ *string `form:"name.neq,omitempty" json:"user_name_neq,omitempty"`
	// Filters field "name" to be null/nil.
	UserNameIsNil *bool `form:"name.null,omitempty" json:"user_name_is_nil,omitempty"`
	// Filters field "name" to be within the provided values.
	UserNameIn []string `form:"name.in,omitempty" json:"user_name_in,omitempty"`
	// Filters field "name" to be not within the provided values.
	UserNameNotIn []string `form:"name.notIn,omitempty" json:"user_name_not_in,omitempty"`
	// Filters field "name" to be equal to the provided value, case-insensitive.
	UserNameEqualFold *string `form:"name.ieq,omitempty" json:"user_name_equal_fold,omitempty"`
	// Filters field "name" to contain the provided value.
	UserNameContains *string `form:"name.has,omitempty" json:"user_name_contains,omitempty"`
	// Filters field "name" to contain the provided value, case-insensitive.
	UserNameContainsFold *string `form:"name.ihas,omitempty" json:"user_name_contains_fold,omitempty"`
	// Filters field "name" to start with the provided value.
	UserNameHasPrefix *string `form:"name.prefix,omitempty" json:"user_name_has_prefix,omitempty"`
	// Filters field "name" to end with the provided value.
	UserNameHasSuffix *string `form:"name.suffix,omitempty" json:"user_name_has_suffix,omitempty"`
	// Filters field "email" to be equal to the provided value.
	UserEmailEQ *string `form:"email.eq,omitempty" json:"user_email_eq,omitempty"`
	// Filters field "email" to be not equal to the provided value.
	UserEmailNEQ *string `form:"email.neq,omitempty" json:"user_email_neq,omitempty"`
	// Filters field "email" to be null/nil.
	UserEmailIsNil *bool `form:"email.null,omitempty" json:"user_email_is_nil,omitempty"`
	// Filters field "email" to be within the provided values.
	UserEmailIn []string `form:"email.in,omitempty" json:"user_email_in,omitempty"`
	// Filters field "email" to be not within the provided values.
	UserEmailNotIn []string `form:"email.notIn,omitempty" json:"user_email_not_in,omitempty"`
	// Filters field "email" to be equal to the provided value, case-insensitive.
	UserEmailEqualFold *string `form:"email.ieq,omitempty" json:"user_email_equal_fold,omitempty"`
	// Filters field "email" to contain the provided value.
	UserEmailContains *string `form:"email.has,omitempty" json:"user_email_contains,omitempty"`
	// Filters field "email" to contain the provided value, case-insensitive.
	UserEmailContainsFold *string `form:"email.ihas,omitempty" json:"user_email_contains_fold,omitempty"`
	// Filters field "email" to start with the provided value.
	UserEmailHasPrefix *string `form:"email.prefix,omitempty" json:"user_email_has_prefix,omitempty"`
	// Filters field "email" to end with the provided value.
	UserEmailHasSuffix *string `form:"email.suffix,omitempty" json:"user_email_has_suffix,omitempty"`
	// Filters field "location" to be equal to the provided value.
	UserLocationEQ *string `form:"location.eq,omitempty" json:"user_location_eq,omitempty"`
	// Filters field "location" to be not equal to the provided value.
	UserLocationNEQ *string `form:"location.neq,omitempty" json:"user_location_neq,omitempty"`
	// Filters field "location" to be null/nil.
	UserLocationIsNil *bool `form:"location.null,omitempty" json:"user_location_is_nil,omitempty"`
	// Filters field "location" to be within the provided values.
	UserLocationIn []string `form:"location.in,omitempty" json:"user_location_in,omitempty"`
	// Filters field "location" to be not within the provided values.
	UserLocationNotIn []string `form:"location.notIn,omitempty" json:"user_location_not_in,omitempty"`
	// Filters field "location" to be equal to the provided value, case-insensitive.
	UserLocationEqualFold *string `form:"location.ieq,omitempty" json:"user_location_equal_fold,omitempty"`
	// Filters field "location" to contain the provided value.
	UserLocationContains *string `form:"location.has,omitempty" json:"user_location_contains,omitempty"`
	// Filters field "location" to contain the provided value, case-insensitive.
	UserLocationContainsFold *string `form:"location.ihas,omitempty" json:"user_location_contains_fold,omitempty"`
	// Filters field "location" to start with the provided value.
	UserLocationHasPrefix *string `form:"location.prefix,omitempty" json:"user_location_has_prefix,omitempty"`
	// Filters field "location" to end with the provided value.
	UserLocationHasSuffix *string `form:"location.suffix,omitempty" json:"user_location_has_suffix,omitempty"`
}

// FilterPredicates returns the predicates for filter-related parameters in User.
func (l *ListUserParams) FilterPredicates() (predicate.User, error) {
	var predicates []predicate.User

	if l.UserCreateTimeEQ != nil {
		predicates = append(predicates, user.CreateTimeEQ(*l.UserCreateTimeEQ))
	}
	if l.UserCreateTimeNEQ != nil {
		predicates = append(predicates, user.CreateTimeNEQ(*l.UserCreateTimeNEQ))
	}
	if l.UserCreateTimeGT != nil {
		predicates = append(predicates, user.CreateTimeGT(*l.UserCreateTimeGT))
	}
	if l.UserCreateTimeLT != nil {
		predicates = append(predicates, user.CreateTimeLT(*l.UserCreateTimeLT))
	}
	if l.UserUpdateTimeEQ != nil {
		predicates = append(predicates, user.UpdateTimeEQ(*l.UserUpdateTimeEQ))
	}
	if l.UserUpdateTimeNEQ != nil {
		predicates = append(predicates, user.UpdateTimeNEQ(*l.UserUpdateTimeNEQ))
	}
	if l.UserUpdateTimeGT != nil {
		predicates = append(predicates, user.UpdateTimeGT(*l.UserUpdateTimeGT))
	}
	if l.UserUpdateTimeLT != nil {
		predicates = append(predicates, user.UpdateTimeLT(*l.UserUpdateTimeLT))
	}
	if l.UserUserIDEQ != nil {
		predicates = append(predicates, user.UserIDEQ(*l.UserUserIDEQ))
	}
	if l.UserUserIDNEQ != nil {
		predicates = append(predicates, user.UserIDNEQ(*l.UserUserIDNEQ))
	}
	if l.UserUserIDIn != nil {
		predicates = append(predicates, user.UserIDIn(l.UserUserIDIn...))
	}
	if l.UserUserIDNotIn != nil {
		predicates = append(predicates, user.UserIDNotIn(l.UserUserIDNotIn...))
	}
	if l.UserLoginEQ != nil {
		predicates = append(predicates, user.LoginEQ(*l.UserLoginEQ))
	}
	if l.UserLoginNEQ != nil {
		predicates = append(predicates, user.LoginNEQ(*l.UserLoginNEQ))
	}
	if l.UserLoginIn != nil {
		predicates = append(predicates, user.LoginIn(l.UserLoginIn...))
	}
	if l.UserLoginNotIn != nil {
		predicates = append(predicates, user.LoginNotIn(l.UserLoginNotIn...))
	}
	if l.UserLoginEqualFold != nil {
		predicates = append(predicates, user.LoginEqualFold(*l.UserLoginEqualFold))
	}
	if l.UserLoginContains != nil {
		predicates = append(predicates, user.LoginContains(*l.UserLoginContains))
	}
	if l.UserLoginContainsFold != nil {
		predicates = append(predicates, user.LoginContainsFold(*l.UserLoginContainsFold))
	}
	if l.UserLoginHasPrefix != nil {
		predicates = append(predicates, user.LoginHasPrefix(*l.UserLoginHasPrefix))
	}
	if l.UserLoginHasSuffix != nil {
		predicates = append(predicates, user.LoginHasSuffix(*l.UserLoginHasSuffix))
	}
	if l.UserNameEQ != nil {
		predicates = append(predicates, user.NameEQ(*l.UserNameEQ))
	}
	if l.UserNameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*l.UserNameNEQ))
	}
	if l.UserNameIsNil != nil {
		if *l.UserNameIsNil {
			predicates = append(predicates, user.NameIsNil())
		} else {
			predicates = append(predicates, user.Not(user.NameIsNil()))
		}
	}
	if l.UserNameIn != nil {
		predicates = append(predicates, user.NameIn(l.UserNameIn...))
	}
	if l.UserNameNotIn != nil {
		predicates = append(predicates, user.NameNotIn(l.UserNameNotIn...))
	}
	if l.UserNameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*l.UserNameEqualFold))
	}
	if l.UserNameContains != nil {
		predicates = append(predicates, user.NameContains(*l.UserNameContains))
	}
	if l.UserNameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*l.UserNameContainsFold))
	}
	if l.UserNameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*l.UserNameHasPrefix))
	}
	if l.UserNameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*l.UserNameHasSuffix))
	}
	if l.UserEmailEQ != nil {
		predicates = append(predicates, user.EmailEQ(*l.UserEmailEQ))
	}
	if l.UserEmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*l.UserEmailNEQ))
	}
	if l.UserEmailIsNil != nil {
		if *l.UserEmailIsNil {
			predicates = append(predicates, user.EmailIsNil())
		} else {
			predicates = append(predicates, user.Not(user.EmailIsNil()))
		}
	}
	if l.UserEmailIn != nil {
		predicates = append(predicates, user.EmailIn(l.UserEmailIn...))
	}
	if l.UserEmailNotIn != nil {
		predicates = append(predicates, user.EmailNotIn(l.UserEmailNotIn...))
	}
	if l.UserEmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*l.UserEmailEqualFold))
	}
	if l.UserEmailContains != nil {
		predicates = append(predicates, user.EmailContains(*l.UserEmailContains))
	}
	if l.UserEmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*l.UserEmailContainsFold))
	}
	if l.UserEmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*l.UserEmailHasPrefix))
	}
	if l.UserEmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*l.UserEmailHasSuffix))
	}
	if l.UserLocationEQ != nil {
		predicates = append(predicates, user.LocationEQ(*l.UserLocationEQ))
	}
	if l.UserLocationNEQ != nil {
		predicates = append(predicates, user.LocationNEQ(*l.UserLocationNEQ))
	}
	if l.UserLocationIsNil != nil {
		if *l.UserLocationIsNil {
			predicates = append(predicates, user.LocationIsNil())
		} else {
			predicates = append(predicates, user.Not(user.LocationIsNil()))
		}
	}
	if l.UserLocationIn != nil {
		predicates = append(predicates, user.LocationIn(l.UserLocationIn...))
	}
	if l.UserLocationNotIn != nil {
		predicates = append(predicates, user.LocationNotIn(l.UserLocationNotIn...))
	}
	if l.UserLocationEqualFold != nil {
		predicates = append(predicates, user.LocationEqualFold(*l.UserLocationEqualFold))
	}
	if l.UserLocationContains != nil {
		predicates = append(predicates, user.LocationContains(*l.UserLocationContains))
	}
	if l.UserLocationContainsFold != nil {
		predicates = append(predicates, user.LocationContainsFold(*l.UserLocationContainsFold))
	}
	if l.UserLocationHasPrefix != nil {
		predicates = append(predicates, user.LocationHasPrefix(*l.UserLocationHasPrefix))
	}
	if l.UserLocationHasSuffix != nil {
		predicates = append(predicates, user.LocationHasSuffix(*l.UserLocationHasSuffix))
	}

	return l.ApplyFilterOperation(predicates...)
}

// ApplySorting applies sorting to the query based on the provided sort and order fields.
func (l *ListUserParams) ApplySorting(query *ent.UserQuery) error {
	if err := l.Sorted.Validate(UserSortConfig); err != nil {
		return err
	}
	if l.Field == nil { // No custom sort field provided and no defaults, so don't do anything.
		return nil
	}
	applySortingUser(query, *l.Field, *l.Order)
	return nil
}

// Exec wraps all logic (filtering, sorting, pagination, eager loading) and
// executes all necessary queries, returning the results.
func (l *ListUserParams) Exec(ctx context.Context, query *ent.UserQuery) (results *PagedResponse[ent.User], err error) {
	predicates, err := l.FilterPredicates()
	if err != nil {
		return nil, err
	}
	query.Where(predicates)
	err = l.ApplySorting(EagerLoadUser(query))
	if err != nil {
		return nil, err
	}
	return l.ExecutePaginated(ctx, query, UserPageConfig)
}
