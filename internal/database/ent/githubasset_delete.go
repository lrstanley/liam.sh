// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubasset"
	"github.com/lrstanley/liam.sh/internal/database/ent/predicate"
)

// GithubAssetDelete is the builder for deleting a GithubAsset entity.
type GithubAssetDelete struct {
	config
	hooks    []Hook
	mutation *GithubAssetMutation
}

// Where appends a list predicates to the GithubAssetDelete builder.
func (gad *GithubAssetDelete) Where(ps ...predicate.GithubAsset) *GithubAssetDelete {
	gad.mutation.Where(ps...)
	return gad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gad *GithubAssetDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gad.sqlExec, gad.mutation, gad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gad *GithubAssetDelete) ExecX(ctx context.Context) int {
	n, err := gad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gad *GithubAssetDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(githubasset.Table, sqlgraph.NewFieldSpec(githubasset.FieldID, field.TypeInt))
	if ps := gad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gad.mutation.done = true
	return affected, err
}

// GithubAssetDeleteOne is the builder for deleting a single GithubAsset entity.
type GithubAssetDeleteOne struct {
	gad *GithubAssetDelete
}

// Where appends a list predicates to the GithubAssetDelete builder.
func (gado *GithubAssetDeleteOne) Where(ps ...predicate.GithubAsset) *GithubAssetDeleteOne {
	gado.gad.mutation.Where(ps...)
	return gado
}

// Exec executes the deletion query.
func (gado *GithubAssetDeleteOne) Exec(ctx context.Context) error {
	n, err := gado.gad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{githubasset.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gado *GithubAssetDeleteOne) ExecX(ctx context.Context) {
	if err := gado.Exec(ctx); err != nil {
		panic(err)
	}
}
