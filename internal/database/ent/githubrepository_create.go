// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/go-github/v52/github"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrelease"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrepository"
	"github.com/lrstanley/liam.sh/internal/database/ent/label"
)

// GithubRepositoryCreate is the builder for creating a GithubRepository entity.
type GithubRepositoryCreate struct {
	config
	mutation *GithubRepositoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRepoID sets the "repo_id" field.
func (grc *GithubRepositoryCreate) SetRepoID(i int64) *GithubRepositoryCreate {
	grc.mutation.SetRepoID(i)
	return grc
}

// SetName sets the "name" field.
func (grc *GithubRepositoryCreate) SetName(s string) *GithubRepositoryCreate {
	grc.mutation.SetName(s)
	return grc
}

// SetFullName sets the "full_name" field.
func (grc *GithubRepositoryCreate) SetFullName(s string) *GithubRepositoryCreate {
	grc.mutation.SetFullName(s)
	return grc
}

// SetOwnerLogin sets the "owner_login" field.
func (grc *GithubRepositoryCreate) SetOwnerLogin(s string) *GithubRepositoryCreate {
	grc.mutation.SetOwnerLogin(s)
	return grc
}

// SetOwner sets the "owner" field.
func (grc *GithubRepositoryCreate) SetOwner(gi *github.User) *GithubRepositoryCreate {
	grc.mutation.SetOwner(gi)
	return grc
}

// SetPublic sets the "public" field.
func (grc *GithubRepositoryCreate) SetPublic(b bool) *GithubRepositoryCreate {
	grc.mutation.SetPublic(b)
	return grc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillablePublic(b *bool) *GithubRepositoryCreate {
	if b != nil {
		grc.SetPublic(*b)
	}
	return grc
}

// SetHTMLURL sets the "html_url" field.
func (grc *GithubRepositoryCreate) SetHTMLURL(s string) *GithubRepositoryCreate {
	grc.mutation.SetHTMLURL(s)
	return grc
}

// SetDescription sets the "description" field.
func (grc *GithubRepositoryCreate) SetDescription(s string) *GithubRepositoryCreate {
	grc.mutation.SetDescription(s)
	return grc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableDescription(s *string) *GithubRepositoryCreate {
	if s != nil {
		grc.SetDescription(*s)
	}
	return grc
}

// SetFork sets the "fork" field.
func (grc *GithubRepositoryCreate) SetFork(b bool) *GithubRepositoryCreate {
	grc.mutation.SetFork(b)
	return grc
}

// SetNillableFork sets the "fork" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableFork(b *bool) *GithubRepositoryCreate {
	if b != nil {
		grc.SetFork(*b)
	}
	return grc
}

// SetHomepage sets the "homepage" field.
func (grc *GithubRepositoryCreate) SetHomepage(s string) *GithubRepositoryCreate {
	grc.mutation.SetHomepage(s)
	return grc
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableHomepage(s *string) *GithubRepositoryCreate {
	if s != nil {
		grc.SetHomepage(*s)
	}
	return grc
}

// SetStarCount sets the "star_count" field.
func (grc *GithubRepositoryCreate) SetStarCount(i int) *GithubRepositoryCreate {
	grc.mutation.SetStarCount(i)
	return grc
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableStarCount(i *int) *GithubRepositoryCreate {
	if i != nil {
		grc.SetStarCount(*i)
	}
	return grc
}

// SetDefaultBranch sets the "default_branch" field.
func (grc *GithubRepositoryCreate) SetDefaultBranch(s string) *GithubRepositoryCreate {
	grc.mutation.SetDefaultBranch(s)
	return grc
}

// SetIsTemplate sets the "is_template" field.
func (grc *GithubRepositoryCreate) SetIsTemplate(b bool) *GithubRepositoryCreate {
	grc.mutation.SetIsTemplate(b)
	return grc
}

// SetNillableIsTemplate sets the "is_template" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableIsTemplate(b *bool) *GithubRepositoryCreate {
	if b != nil {
		grc.SetIsTemplate(*b)
	}
	return grc
}

// SetHasIssues sets the "has_issues" field.
func (grc *GithubRepositoryCreate) SetHasIssues(b bool) *GithubRepositoryCreate {
	grc.mutation.SetHasIssues(b)
	return grc
}

// SetNillableHasIssues sets the "has_issues" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableHasIssues(b *bool) *GithubRepositoryCreate {
	if b != nil {
		grc.SetHasIssues(*b)
	}
	return grc
}

// SetArchived sets the "archived" field.
func (grc *GithubRepositoryCreate) SetArchived(b bool) *GithubRepositoryCreate {
	grc.mutation.SetArchived(b)
	return grc
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableArchived(b *bool) *GithubRepositoryCreate {
	if b != nil {
		grc.SetArchived(*b)
	}
	return grc
}

// SetPushedAt sets the "pushed_at" field.
func (grc *GithubRepositoryCreate) SetPushedAt(t time.Time) *GithubRepositoryCreate {
	grc.mutation.SetPushedAt(t)
	return grc
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillablePushedAt(t *time.Time) *GithubRepositoryCreate {
	if t != nil {
		grc.SetPushedAt(*t)
	}
	return grc
}

// SetCreatedAt sets the "created_at" field.
func (grc *GithubRepositoryCreate) SetCreatedAt(t time.Time) *GithubRepositoryCreate {
	grc.mutation.SetCreatedAt(t)
	return grc
}

// SetUpdatedAt sets the "updated_at" field.
func (grc *GithubRepositoryCreate) SetUpdatedAt(t time.Time) *GithubRepositoryCreate {
	grc.mutation.SetUpdatedAt(t)
	return grc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (grc *GithubRepositoryCreate) SetNillableUpdatedAt(t *time.Time) *GithubRepositoryCreate {
	if t != nil {
		grc.SetUpdatedAt(*t)
	}
	return grc
}

// SetLicense sets the "license" field.
func (grc *GithubRepositoryCreate) SetLicense(gi *github.License) *GithubRepositoryCreate {
	grc.mutation.SetLicense(gi)
	return grc
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (grc *GithubRepositoryCreate) AddLabelIDs(ids ...int) *GithubRepositoryCreate {
	grc.mutation.AddLabelIDs(ids...)
	return grc
}

// AddLabels adds the "labels" edges to the Label entity.
func (grc *GithubRepositoryCreate) AddLabels(l ...*Label) *GithubRepositoryCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return grc.AddLabelIDs(ids...)
}

// AddReleaseIDs adds the "releases" edge to the GithubRelease entity by IDs.
func (grc *GithubRepositoryCreate) AddReleaseIDs(ids ...int) *GithubRepositoryCreate {
	grc.mutation.AddReleaseIDs(ids...)
	return grc
}

// AddReleases adds the "releases" edges to the GithubRelease entity.
func (grc *GithubRepositoryCreate) AddReleases(g ...*GithubRelease) *GithubRepositoryCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return grc.AddReleaseIDs(ids...)
}

// Mutation returns the GithubRepositoryMutation object of the builder.
func (grc *GithubRepositoryCreate) Mutation() *GithubRepositoryMutation {
	return grc.mutation
}

// Save creates the GithubRepository in the database.
func (grc *GithubRepositoryCreate) Save(ctx context.Context) (*GithubRepository, error) {
	if err := grc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GithubRepositoryCreate) SaveX(ctx context.Context) *GithubRepository {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GithubRepositoryCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GithubRepositoryCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GithubRepositoryCreate) defaults() error {
	if _, ok := grc.mutation.Public(); !ok {
		v := githubrepository.DefaultPublic
		grc.mutation.SetPublic(v)
	}
	if _, ok := grc.mutation.Fork(); !ok {
		v := githubrepository.DefaultFork
		grc.mutation.SetFork(v)
	}
	if _, ok := grc.mutation.StarCount(); !ok {
		v := githubrepository.DefaultStarCount
		grc.mutation.SetStarCount(v)
	}
	if _, ok := grc.mutation.IsTemplate(); !ok {
		v := githubrepository.DefaultIsTemplate
		grc.mutation.SetIsTemplate(v)
	}
	if _, ok := grc.mutation.HasIssues(); !ok {
		v := githubrepository.DefaultHasIssues
		grc.mutation.SetHasIssues(v)
	}
	if _, ok := grc.mutation.Archived(); !ok {
		v := githubrepository.DefaultArchived
		grc.mutation.SetArchived(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (grc *GithubRepositoryCreate) check() error {
	if _, ok := grc.mutation.RepoID(); !ok {
		return &ValidationError{Name: "repo_id", err: errors.New(`ent: missing required field "GithubRepository.repo_id"`)}
	}
	if v, ok := grc.mutation.RepoID(); ok {
		if err := githubrepository.RepoIDValidator(v); err != nil {
			return &ValidationError{Name: "repo_id", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.repo_id": %w`, err)}
		}
	}
	if _, ok := grc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GithubRepository.name"`)}
	}
	if v, ok := grc.mutation.Name(); ok {
		if err := githubrepository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.name": %w`, err)}
		}
	}
	if _, ok := grc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "GithubRepository.full_name"`)}
	}
	if v, ok := grc.mutation.FullName(); ok {
		if err := githubrepository.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.full_name": %w`, err)}
		}
	}
	if _, ok := grc.mutation.OwnerLogin(); !ok {
		return &ValidationError{Name: "owner_login", err: errors.New(`ent: missing required field "GithubRepository.owner_login"`)}
	}
	if v, ok := grc.mutation.OwnerLogin(); ok {
		if err := githubrepository.OwnerLoginValidator(v); err != nil {
			return &ValidationError{Name: "owner_login", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.owner_login": %w`, err)}
		}
	}
	if _, ok := grc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "GithubRepository.owner"`)}
	}
	if _, ok := grc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "GithubRepository.public"`)}
	}
	if _, ok := grc.mutation.HTMLURL(); !ok {
		return &ValidationError{Name: "html_url", err: errors.New(`ent: missing required field "GithubRepository.html_url"`)}
	}
	if v, ok := grc.mutation.HTMLURL(); ok {
		if err := githubrepository.HTMLURLValidator(v); err != nil {
			return &ValidationError{Name: "html_url", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.html_url": %w`, err)}
		}
	}
	if _, ok := grc.mutation.Fork(); !ok {
		return &ValidationError{Name: "fork", err: errors.New(`ent: missing required field "GithubRepository.fork"`)}
	}
	if _, ok := grc.mutation.StarCount(); !ok {
		return &ValidationError{Name: "star_count", err: errors.New(`ent: missing required field "GithubRepository.star_count"`)}
	}
	if v, ok := grc.mutation.StarCount(); ok {
		if err := githubrepository.StarCountValidator(v); err != nil {
			return &ValidationError{Name: "star_count", err: fmt.Errorf(`ent: validator failed for field "GithubRepository.star_count": %w`, err)}
		}
	}
	if _, ok := grc.mutation.DefaultBranch(); !ok {
		return &ValidationError{Name: "default_branch", err: errors.New(`ent: missing required field "GithubRepository.default_branch"`)}
	}
	if _, ok := grc.mutation.IsTemplate(); !ok {
		return &ValidationError{Name: "is_template", err: errors.New(`ent: missing required field "GithubRepository.is_template"`)}
	}
	if _, ok := grc.mutation.HasIssues(); !ok {
		return &ValidationError{Name: "has_issues", err: errors.New(`ent: missing required field "GithubRepository.has_issues"`)}
	}
	if _, ok := grc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "GithubRepository.archived"`)}
	}
	if _, ok := grc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GithubRepository.created_at"`)}
	}
	return nil
}

func (grc *GithubRepositoryCreate) sqlSave(ctx context.Context) (*GithubRepository, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GithubRepositoryCreate) createSpec() (*GithubRepository, *sqlgraph.CreateSpec) {
	var (
		_node = &GithubRepository{config: grc.config}
		_spec = sqlgraph.NewCreateSpec(githubrepository.Table, sqlgraph.NewFieldSpec(githubrepository.FieldID, field.TypeInt))
	)
	_spec.OnConflict = grc.conflict
	if value, ok := grc.mutation.RepoID(); ok {
		_spec.SetField(githubrepository.FieldRepoID, field.TypeInt64, value)
		_node.RepoID = value
	}
	if value, ok := grc.mutation.Name(); ok {
		_spec.SetField(githubrepository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := grc.mutation.FullName(); ok {
		_spec.SetField(githubrepository.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := grc.mutation.OwnerLogin(); ok {
		_spec.SetField(githubrepository.FieldOwnerLogin, field.TypeString, value)
		_node.OwnerLogin = value
	}
	if value, ok := grc.mutation.Owner(); ok {
		_spec.SetField(githubrepository.FieldOwner, field.TypeJSON, value)
		_node.Owner = value
	}
	if value, ok := grc.mutation.Public(); ok {
		_spec.SetField(githubrepository.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := grc.mutation.HTMLURL(); ok {
		_spec.SetField(githubrepository.FieldHTMLURL, field.TypeString, value)
		_node.HTMLURL = value
	}
	if value, ok := grc.mutation.Description(); ok {
		_spec.SetField(githubrepository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := grc.mutation.Fork(); ok {
		_spec.SetField(githubrepository.FieldFork, field.TypeBool, value)
		_node.Fork = value
	}
	if value, ok := grc.mutation.Homepage(); ok {
		_spec.SetField(githubrepository.FieldHomepage, field.TypeString, value)
		_node.Homepage = value
	}
	if value, ok := grc.mutation.StarCount(); ok {
		_spec.SetField(githubrepository.FieldStarCount, field.TypeInt, value)
		_node.StarCount = value
	}
	if value, ok := grc.mutation.DefaultBranch(); ok {
		_spec.SetField(githubrepository.FieldDefaultBranch, field.TypeString, value)
		_node.DefaultBranch = value
	}
	if value, ok := grc.mutation.IsTemplate(); ok {
		_spec.SetField(githubrepository.FieldIsTemplate, field.TypeBool, value)
		_node.IsTemplate = value
	}
	if value, ok := grc.mutation.HasIssues(); ok {
		_spec.SetField(githubrepository.FieldHasIssues, field.TypeBool, value)
		_node.HasIssues = value
	}
	if value, ok := grc.mutation.Archived(); ok {
		_spec.SetField(githubrepository.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := grc.mutation.PushedAt(); ok {
		_spec.SetField(githubrepository.FieldPushedAt, field.TypeTime, value)
		_node.PushedAt = value
	}
	if value, ok := grc.mutation.CreatedAt(); ok {
		_spec.SetField(githubrepository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := grc.mutation.UpdatedAt(); ok {
		_spec.SetField(githubrepository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := grc.mutation.License(); ok {
		_spec.SetField(githubrepository.FieldLicense, field.TypeJSON, value)
		_node.License = value
	}
	if nodes := grc.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   githubrepository.LabelsTable,
			Columns: githubrepository.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := grc.mutation.ReleasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   githubrepository.ReleasesTable,
			Columns: []string{githubrepository.ReleasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(githubrelease.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubRepository.Create().
//		SetRepoID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubRepositoryUpsert) {
//			SetRepoID(v+v).
//		}).
//		Exec(ctx)
func (grc *GithubRepositoryCreate) OnConflict(opts ...sql.ConflictOption) *GithubRepositoryUpsertOne {
	grc.conflict = opts
	return &GithubRepositoryUpsertOne{
		create: grc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grc *GithubRepositoryCreate) OnConflictColumns(columns ...string) *GithubRepositoryUpsertOne {
	grc.conflict = append(grc.conflict, sql.ConflictColumns(columns...))
	return &GithubRepositoryUpsertOne{
		create: grc,
	}
}

type (
	// GithubRepositoryUpsertOne is the builder for "upsert"-ing
	//  one GithubRepository node.
	GithubRepositoryUpsertOne struct {
		create *GithubRepositoryCreate
	}

	// GithubRepositoryUpsert is the "OnConflict" setter.
	GithubRepositoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetRepoID sets the "repo_id" field.
func (u *GithubRepositoryUpsert) SetRepoID(v int64) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldRepoID, v)
	return u
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateRepoID() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldRepoID)
	return u
}

// AddRepoID adds v to the "repo_id" field.
func (u *GithubRepositoryUpsert) AddRepoID(v int64) *GithubRepositoryUpsert {
	u.Add(githubrepository.FieldRepoID, v)
	return u
}

// SetName sets the "name" field.
func (u *GithubRepositoryUpsert) SetName(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateName() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldName)
	return u
}

// SetFullName sets the "full_name" field.
func (u *GithubRepositoryUpsert) SetFullName(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateFullName() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldFullName)
	return u
}

// SetOwnerLogin sets the "owner_login" field.
func (u *GithubRepositoryUpsert) SetOwnerLogin(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldOwnerLogin, v)
	return u
}

// UpdateOwnerLogin sets the "owner_login" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateOwnerLogin() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldOwnerLogin)
	return u
}

// SetOwner sets the "owner" field.
func (u *GithubRepositoryUpsert) SetOwner(v *github.User) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateOwner() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldOwner)
	return u
}

// SetPublic sets the "public" field.
func (u *GithubRepositoryUpsert) SetPublic(v bool) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldPublic, v)
	return u
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdatePublic() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldPublic)
	return u
}

// SetHTMLURL sets the "html_url" field.
func (u *GithubRepositoryUpsert) SetHTMLURL(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldHTMLURL, v)
	return u
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateHTMLURL() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldHTMLURL)
	return u
}

// SetDescription sets the "description" field.
func (u *GithubRepositoryUpsert) SetDescription(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateDescription() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *GithubRepositoryUpsert) ClearDescription() *GithubRepositoryUpsert {
	u.SetNull(githubrepository.FieldDescription)
	return u
}

// SetFork sets the "fork" field.
func (u *GithubRepositoryUpsert) SetFork(v bool) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldFork, v)
	return u
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateFork() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldFork)
	return u
}

// SetHomepage sets the "homepage" field.
func (u *GithubRepositoryUpsert) SetHomepage(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldHomepage, v)
	return u
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateHomepage() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldHomepage)
	return u
}

// ClearHomepage clears the value of the "homepage" field.
func (u *GithubRepositoryUpsert) ClearHomepage() *GithubRepositoryUpsert {
	u.SetNull(githubrepository.FieldHomepage)
	return u
}

// SetStarCount sets the "star_count" field.
func (u *GithubRepositoryUpsert) SetStarCount(v int) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldStarCount, v)
	return u
}

// UpdateStarCount sets the "star_count" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateStarCount() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldStarCount)
	return u
}

// AddStarCount adds v to the "star_count" field.
func (u *GithubRepositoryUpsert) AddStarCount(v int) *GithubRepositoryUpsert {
	u.Add(githubrepository.FieldStarCount, v)
	return u
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GithubRepositoryUpsert) SetDefaultBranch(v string) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldDefaultBranch, v)
	return u
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateDefaultBranch() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldDefaultBranch)
	return u
}

// SetIsTemplate sets the "is_template" field.
func (u *GithubRepositoryUpsert) SetIsTemplate(v bool) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldIsTemplate, v)
	return u
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateIsTemplate() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldIsTemplate)
	return u
}

// SetHasIssues sets the "has_issues" field.
func (u *GithubRepositoryUpsert) SetHasIssues(v bool) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldHasIssues, v)
	return u
}

// UpdateHasIssues sets the "has_issues" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateHasIssues() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldHasIssues)
	return u
}

// SetArchived sets the "archived" field.
func (u *GithubRepositoryUpsert) SetArchived(v bool) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateArchived() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldArchived)
	return u
}

// SetPushedAt sets the "pushed_at" field.
func (u *GithubRepositoryUpsert) SetPushedAt(v time.Time) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldPushedAt, v)
	return u
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdatePushedAt() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldPushedAt)
	return u
}

// ClearPushedAt clears the value of the "pushed_at" field.
func (u *GithubRepositoryUpsert) ClearPushedAt() *GithubRepositoryUpsert {
	u.SetNull(githubrepository.FieldPushedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubRepositoryUpsert) SetCreatedAt(v time.Time) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateCreatedAt() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubRepositoryUpsert) SetUpdatedAt(v time.Time) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateUpdatedAt() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GithubRepositoryUpsert) ClearUpdatedAt() *GithubRepositoryUpsert {
	u.SetNull(githubrepository.FieldUpdatedAt)
	return u
}

// SetLicense sets the "license" field.
func (u *GithubRepositoryUpsert) SetLicense(v *github.License) *GithubRepositoryUpsert {
	u.Set(githubrepository.FieldLicense, v)
	return u
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *GithubRepositoryUpsert) UpdateLicense() *GithubRepositoryUpsert {
	u.SetExcluded(githubrepository.FieldLicense)
	return u
}

// ClearLicense clears the value of the "license" field.
func (u *GithubRepositoryUpsert) ClearLicense() *GithubRepositoryUpsert {
	u.SetNull(githubrepository.FieldLicense)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GithubRepositoryUpsertOne) UpdateNewValues() *GithubRepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GithubRepositoryUpsertOne) Ignore() *GithubRepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubRepositoryUpsertOne) DoNothing() *GithubRepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubRepositoryCreate.OnConflict
// documentation for more info.
func (u *GithubRepositoryUpsertOne) Update(set func(*GithubRepositoryUpsert)) *GithubRepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubRepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepoID sets the "repo_id" field.
func (u *GithubRepositoryUpsertOne) SetRepoID(v int64) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetRepoID(v)
	})
}

// AddRepoID adds v to the "repo_id" field.
func (u *GithubRepositoryUpsertOne) AddRepoID(v int64) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.AddRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateRepoID() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateRepoID()
	})
}

// SetName sets the "name" field.
func (u *GithubRepositoryUpsertOne) SetName(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateName() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *GithubRepositoryUpsertOne) SetFullName(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateFullName() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetOwnerLogin sets the "owner_login" field.
func (u *GithubRepositoryUpsertOne) SetOwnerLogin(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetOwnerLogin(v)
	})
}

// UpdateOwnerLogin sets the "owner_login" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateOwnerLogin() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateOwnerLogin()
	})
}

// SetOwner sets the "owner" field.
func (u *GithubRepositoryUpsertOne) SetOwner(v *github.User) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateOwner() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateOwner()
	})
}

// SetPublic sets the "public" field.
func (u *GithubRepositoryUpsertOne) SetPublic(v bool) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdatePublic() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdatePublic()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *GithubRepositoryUpsertOne) SetHTMLURL(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateHTMLURL() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *GithubRepositoryUpsertOne) SetDescription(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateDescription() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *GithubRepositoryUpsertOne) ClearDescription() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearDescription()
	})
}

// SetFork sets the "fork" field.
func (u *GithubRepositoryUpsertOne) SetFork(v bool) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetFork(v)
	})
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateFork() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateFork()
	})
}

// SetHomepage sets the "homepage" field.
func (u *GithubRepositoryUpsertOne) SetHomepage(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateHomepage() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHomepage()
	})
}

// ClearHomepage clears the value of the "homepage" field.
func (u *GithubRepositoryUpsertOne) ClearHomepage() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearHomepage()
	})
}

// SetStarCount sets the "star_count" field.
func (u *GithubRepositoryUpsertOne) SetStarCount(v int) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetStarCount(v)
	})
}

// AddStarCount adds v to the "star_count" field.
func (u *GithubRepositoryUpsertOne) AddStarCount(v int) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.AddStarCount(v)
	})
}

// UpdateStarCount sets the "star_count" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateStarCount() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateStarCount()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GithubRepositoryUpsertOne) SetDefaultBranch(v string) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateDefaultBranch() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetIsTemplate sets the "is_template" field.
func (u *GithubRepositoryUpsertOne) SetIsTemplate(v bool) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetIsTemplate(v)
	})
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateIsTemplate() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateIsTemplate()
	})
}

// SetHasIssues sets the "has_issues" field.
func (u *GithubRepositoryUpsertOne) SetHasIssues(v bool) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHasIssues(v)
	})
}

// UpdateHasIssues sets the "has_issues" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateHasIssues() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHasIssues()
	})
}

// SetArchived sets the "archived" field.
func (u *GithubRepositoryUpsertOne) SetArchived(v bool) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateArchived() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateArchived()
	})
}

// SetPushedAt sets the "pushed_at" field.
func (u *GithubRepositoryUpsertOne) SetPushedAt(v time.Time) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetPushedAt(v)
	})
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdatePushedAt() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdatePushedAt()
	})
}

// ClearPushedAt clears the value of the "pushed_at" field.
func (u *GithubRepositoryUpsertOne) ClearPushedAt() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearPushedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubRepositoryUpsertOne) SetCreatedAt(v time.Time) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateCreatedAt() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubRepositoryUpsertOne) SetUpdatedAt(v time.Time) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateUpdatedAt() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GithubRepositoryUpsertOne) ClearUpdatedAt() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetLicense sets the "license" field.
func (u *GithubRepositoryUpsertOne) SetLicense(v *github.License) *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *GithubRepositoryUpsertOne) UpdateLicense() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateLicense()
	})
}

// ClearLicense clears the value of the "license" field.
func (u *GithubRepositoryUpsertOne) ClearLicense() *GithubRepositoryUpsertOne {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearLicense()
	})
}

// Exec executes the query.
func (u *GithubRepositoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubRepositoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubRepositoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GithubRepositoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GithubRepositoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GithubRepositoryCreateBulk is the builder for creating many GithubRepository entities in bulk.
type GithubRepositoryCreateBulk struct {
	config
	err      error
	builders []*GithubRepositoryCreate
	conflict []sql.ConflictOption
}

// Save creates the GithubRepository entities in the database.
func (grcb *GithubRepositoryCreateBulk) Save(ctx context.Context) ([]*GithubRepository, error) {
	if grcb.err != nil {
		return nil, grcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GithubRepository, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GithubRepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = grcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GithubRepositoryCreateBulk) SaveX(ctx context.Context) []*GithubRepository {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GithubRepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GithubRepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GithubRepository.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GithubRepositoryUpsert) {
//			SetRepoID(v+v).
//		}).
//		Exec(ctx)
func (grcb *GithubRepositoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *GithubRepositoryUpsertBulk {
	grcb.conflict = opts
	return &GithubRepositoryUpsertBulk{
		create: grcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grcb *GithubRepositoryCreateBulk) OnConflictColumns(columns ...string) *GithubRepositoryUpsertBulk {
	grcb.conflict = append(grcb.conflict, sql.ConflictColumns(columns...))
	return &GithubRepositoryUpsertBulk{
		create: grcb,
	}
}

// GithubRepositoryUpsertBulk is the builder for "upsert"-ing
// a bulk of GithubRepository nodes.
type GithubRepositoryUpsertBulk struct {
	create *GithubRepositoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GithubRepositoryUpsertBulk) UpdateNewValues() *GithubRepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GithubRepository.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GithubRepositoryUpsertBulk) Ignore() *GithubRepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GithubRepositoryUpsertBulk) DoNothing() *GithubRepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GithubRepositoryCreateBulk.OnConflict
// documentation for more info.
func (u *GithubRepositoryUpsertBulk) Update(set func(*GithubRepositoryUpsert)) *GithubRepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GithubRepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepoID sets the "repo_id" field.
func (u *GithubRepositoryUpsertBulk) SetRepoID(v int64) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetRepoID(v)
	})
}

// AddRepoID adds v to the "repo_id" field.
func (u *GithubRepositoryUpsertBulk) AddRepoID(v int64) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.AddRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateRepoID() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateRepoID()
	})
}

// SetName sets the "name" field.
func (u *GithubRepositoryUpsertBulk) SetName(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateName() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateName()
	})
}

// SetFullName sets the "full_name" field.
func (u *GithubRepositoryUpsertBulk) SetFullName(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateFullName() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateFullName()
	})
}

// SetOwnerLogin sets the "owner_login" field.
func (u *GithubRepositoryUpsertBulk) SetOwnerLogin(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetOwnerLogin(v)
	})
}

// UpdateOwnerLogin sets the "owner_login" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateOwnerLogin() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateOwnerLogin()
	})
}

// SetOwner sets the "owner" field.
func (u *GithubRepositoryUpsertBulk) SetOwner(v *github.User) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateOwner() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateOwner()
	})
}

// SetPublic sets the "public" field.
func (u *GithubRepositoryUpsertBulk) SetPublic(v bool) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdatePublic() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdatePublic()
	})
}

// SetHTMLURL sets the "html_url" field.
func (u *GithubRepositoryUpsertBulk) SetHTMLURL(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHTMLURL(v)
	})
}

// UpdateHTMLURL sets the "html_url" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateHTMLURL() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHTMLURL()
	})
}

// SetDescription sets the "description" field.
func (u *GithubRepositoryUpsertBulk) SetDescription(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateDescription() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *GithubRepositoryUpsertBulk) ClearDescription() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearDescription()
	})
}

// SetFork sets the "fork" field.
func (u *GithubRepositoryUpsertBulk) SetFork(v bool) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetFork(v)
	})
}

// UpdateFork sets the "fork" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateFork() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateFork()
	})
}

// SetHomepage sets the "homepage" field.
func (u *GithubRepositoryUpsertBulk) SetHomepage(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHomepage(v)
	})
}

// UpdateHomepage sets the "homepage" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateHomepage() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHomepage()
	})
}

// ClearHomepage clears the value of the "homepage" field.
func (u *GithubRepositoryUpsertBulk) ClearHomepage() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearHomepage()
	})
}

// SetStarCount sets the "star_count" field.
func (u *GithubRepositoryUpsertBulk) SetStarCount(v int) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetStarCount(v)
	})
}

// AddStarCount adds v to the "star_count" field.
func (u *GithubRepositoryUpsertBulk) AddStarCount(v int) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.AddStarCount(v)
	})
}

// UpdateStarCount sets the "star_count" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateStarCount() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateStarCount()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GithubRepositoryUpsertBulk) SetDefaultBranch(v string) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateDefaultBranch() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetIsTemplate sets the "is_template" field.
func (u *GithubRepositoryUpsertBulk) SetIsTemplate(v bool) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetIsTemplate(v)
	})
}

// UpdateIsTemplate sets the "is_template" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateIsTemplate() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateIsTemplate()
	})
}

// SetHasIssues sets the "has_issues" field.
func (u *GithubRepositoryUpsertBulk) SetHasIssues(v bool) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetHasIssues(v)
	})
}

// UpdateHasIssues sets the "has_issues" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateHasIssues() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateHasIssues()
	})
}

// SetArchived sets the "archived" field.
func (u *GithubRepositoryUpsertBulk) SetArchived(v bool) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateArchived() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateArchived()
	})
}

// SetPushedAt sets the "pushed_at" field.
func (u *GithubRepositoryUpsertBulk) SetPushedAt(v time.Time) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetPushedAt(v)
	})
}

// UpdatePushedAt sets the "pushed_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdatePushedAt() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdatePushedAt()
	})
}

// ClearPushedAt clears the value of the "pushed_at" field.
func (u *GithubRepositoryUpsertBulk) ClearPushedAt() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearPushedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GithubRepositoryUpsertBulk) SetCreatedAt(v time.Time) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateCreatedAt() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GithubRepositoryUpsertBulk) SetUpdatedAt(v time.Time) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateUpdatedAt() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GithubRepositoryUpsertBulk) ClearUpdatedAt() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetLicense sets the "license" field.
func (u *GithubRepositoryUpsertBulk) SetLicense(v *github.License) *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.SetLicense(v)
	})
}

// UpdateLicense sets the "license" field to the value that was provided on create.
func (u *GithubRepositoryUpsertBulk) UpdateLicense() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.UpdateLicense()
	})
}

// ClearLicense clears the value of the "license" field.
func (u *GithubRepositoryUpsertBulk) ClearLicense() *GithubRepositoryUpsertBulk {
	return u.Update(func(s *GithubRepositoryUpsert) {
		s.ClearLicense()
	})
}

// Exec executes the query.
func (u *GithubRepositoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GithubRepositoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GithubRepositoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GithubRepositoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
