// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubgist"
	"github.com/lrstanley/liam.sh/internal/database/ent/predicate"
)

// GithubGistDelete is the builder for deleting a GithubGist entity.
type GithubGistDelete struct {
	config
	hooks    []Hook
	mutation *GithubGistMutation
}

// Where appends a list predicates to the GithubGistDelete builder.
func (ggd *GithubGistDelete) Where(ps ...predicate.GithubGist) *GithubGistDelete {
	ggd.mutation.Where(ps...)
	return ggd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ggd *GithubGistDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ggd.sqlExec, ggd.mutation, ggd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ggd *GithubGistDelete) ExecX(ctx context.Context) int {
	n, err := ggd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ggd *GithubGistDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(githubgist.Table, sqlgraph.NewFieldSpec(githubgist.FieldID, field.TypeInt))
	if ps := ggd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ggd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ggd.mutation.done = true
	return affected, err
}

// GithubGistDeleteOne is the builder for deleting a single GithubGist entity.
type GithubGistDeleteOne struct {
	ggd *GithubGistDelete
}

// Where appends a list predicates to the GithubGistDelete builder.
func (ggdo *GithubGistDeleteOne) Where(ps ...predicate.GithubGist) *GithubGistDeleteOne {
	ggdo.ggd.mutation.Where(ps...)
	return ggdo
}

// Exec executes the deletion query.
func (ggdo *GithubGistDeleteOne) Exec(ctx context.Context) error {
	n, err := ggdo.ggd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{githubgist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ggdo *GithubGistDeleteOne) ExecX(ctx context.Context) {
	if err := ggdo.Exec(ctx); err != nil {
		panic(err)
	}
}
