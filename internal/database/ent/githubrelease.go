// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/go-github/v52/github"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrelease"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrepository"
)

// GithubRelease is the model entity for the GithubRelease schema.
type GithubRelease struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReleaseID holds the value of the "release_id" field.
	ReleaseID int64 `json:"release_id,omitempty"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url,omitempty"`
	// TagName holds the value of the "tag_name" field.
	TagName string `json:"tag_name,omitempty"`
	// TargetCommitish holds the value of the "target_commitish" field.
	TargetCommitish string `json:"target_commitish,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Draft holds the value of the "draft" field.
	Draft bool `json:"draft,omitempty"`
	// Prerelease holds the value of the "prerelease" field.
	Prerelease bool `json:"prerelease,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Author holds the value of the "author" field.
	Author *github.User `json:"author,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubReleaseQuery when eager-loading is set.
	Edges                      GithubReleaseEdges `json:"edges"`
	github_repository_releases *int
	selectValues               sql.SelectValues
}

// GithubReleaseEdges holds the relations/edges for other nodes in the graph.
type GithubReleaseEdges struct {
	// Repository holds the value of the repository edge.
	Repository *GithubRepository `json:"repository,omitempty"`
	// Assets holds the value of the assets edge.
	Assets []*GithubAsset `json:"assets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAssets map[string][]*GithubAsset
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GithubReleaseEdges) RepositoryOrErr() (*GithubRepository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: githubrepository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e GithubReleaseEdges) AssetsOrErr() ([]*GithubAsset, error) {
	if e.loadedTypes[1] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubRelease) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubrelease.FieldAuthor:
			values[i] = new([]byte)
		case githubrelease.FieldDraft, githubrelease.FieldPrerelease:
			values[i] = new(sql.NullBool)
		case githubrelease.FieldID, githubrelease.FieldReleaseID:
			values[i] = new(sql.NullInt64)
		case githubrelease.FieldHTMLURL, githubrelease.FieldTagName, githubrelease.FieldTargetCommitish, githubrelease.FieldName:
			values[i] = new(sql.NullString)
		case githubrelease.FieldCreatedAt, githubrelease.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		case githubrelease.ForeignKeys[0]: // github_repository_releases
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubRelease fields.
func (gr *GithubRelease) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubrelease.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case githubrelease.FieldReleaseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field release_id", values[i])
			} else if value.Valid {
				gr.ReleaseID = value.Int64
			}
		case githubrelease.FieldHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[i])
			} else if value.Valid {
				gr.HTMLURL = value.String
			}
		case githubrelease.FieldTagName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_name", values[i])
			} else if value.Valid {
				gr.TagName = value.String
			}
		case githubrelease.FieldTargetCommitish:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_commitish", values[i])
			} else if value.Valid {
				gr.TargetCommitish = value.String
			}
		case githubrelease.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case githubrelease.FieldDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field draft", values[i])
			} else if value.Valid {
				gr.Draft = value.Bool
			}
		case githubrelease.FieldPrerelease:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prerelease", values[i])
			} else if value.Valid {
				gr.Prerelease = value.Bool
			}
		case githubrelease.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case githubrelease.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				gr.PublishedAt = value.Time
			}
		case githubrelease.FieldAuthor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Author); err != nil {
					return fmt.Errorf("unmarshal field author: %w", err)
				}
			}
		case githubrelease.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field github_repository_releases", value)
			} else if value.Valid {
				gr.github_repository_releases = new(int)
				*gr.github_repository_releases = int(value.Int64)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GithubRelease.
// This includes values selected through modifiers, order, etc.
func (gr *GithubRelease) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the GithubRelease entity.
func (gr *GithubRelease) QueryRepository() *GithubRepositoryQuery {
	return NewGithubReleaseClient(gr.config).QueryRepository(gr)
}

// QueryAssets queries the "assets" edge of the GithubRelease entity.
func (gr *GithubRelease) QueryAssets() *GithubAssetQuery {
	return NewGithubReleaseClient(gr.config).QueryAssets(gr)
}

// Update returns a builder for updating this GithubRelease.
// Note that you need to call GithubRelease.Unwrap() before calling this method if this GithubRelease
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GithubRelease) Update() *GithubReleaseUpdateOne {
	return NewGithubReleaseClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GithubRelease entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GithubRelease) Unwrap() *GithubRelease {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubRelease is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GithubRelease) String() string {
	var builder strings.Builder
	builder.WriteString("GithubRelease(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("release_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.ReleaseID))
	builder.WriteString(", ")
	builder.WriteString("html_url=")
	builder.WriteString(gr.HTMLURL)
	builder.WriteString(", ")
	builder.WriteString("tag_name=")
	builder.WriteString(gr.TagName)
	builder.WriteString(", ")
	builder.WriteString("target_commitish=")
	builder.WriteString(gr.TargetCommitish)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", ")
	builder.WriteString("draft=")
	builder.WriteString(fmt.Sprintf("%v", gr.Draft))
	builder.WriteString(", ")
	builder.WriteString("prerelease=")
	builder.WriteString(fmt.Sprintf("%v", gr.Prerelease))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(gr.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", gr.Author))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAssets returns the Assets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *GithubRelease) NamedAssets(name string) ([]*GithubAsset, error) {
	if gr.Edges.namedAssets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedAssets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *GithubRelease) appendNamedAssets(name string, edges ...*GithubAsset) {
	if gr.Edges.namedAssets == nil {
		gr.Edges.namedAssets = make(map[string][]*GithubAsset)
	}
	if len(edges) == 0 {
		gr.Edges.namedAssets[name] = []*GithubAsset{}
	} else {
		gr.Edges.namedAssets[name] = append(gr.Edges.namedAssets[name], edges...)
	}
}

// GithubReleases is a parsable slice of GithubRelease.
type GithubReleases []*GithubRelease
