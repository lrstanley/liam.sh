// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubasset"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubevent"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubgist"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrelease"
	"github.com/lrstanley/liam.sh/internal/database/ent/githubrepository"
	"github.com/lrstanley/liam.sh/internal/database/ent/label"
	"github.com/lrstanley/liam.sh/internal/database/ent/post"
	"github.com/lrstanley/liam.sh/internal/database/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ga *GithubAssetQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubAssetQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ga, nil
	}
	if err := ga.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ga, nil
}

func (ga *GithubAssetQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(githubasset.Columns))
		selectedFields = []string{githubasset.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "release":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GithubReleaseClient{config: ga.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ga.withRelease = query
		case "assetID":
			if _, ok := fieldSeen[githubasset.FieldAssetID]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldAssetID)
				fieldSeen[githubasset.FieldAssetID] = struct{}{}
			}
		case "browserDownloadURL":
			if _, ok := fieldSeen[githubasset.FieldBrowserDownloadURL]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldBrowserDownloadURL)
				fieldSeen[githubasset.FieldBrowserDownloadURL] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[githubasset.FieldName]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldName)
				fieldSeen[githubasset.FieldName] = struct{}{}
			}
		case "label":
			if _, ok := fieldSeen[githubasset.FieldLabel]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldLabel)
				fieldSeen[githubasset.FieldLabel] = struct{}{}
			}
		case "state":
			if _, ok := fieldSeen[githubasset.FieldState]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldState)
				fieldSeen[githubasset.FieldState] = struct{}{}
			}
		case "contentType":
			if _, ok := fieldSeen[githubasset.FieldContentType]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldContentType)
				fieldSeen[githubasset.FieldContentType] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[githubasset.FieldSize]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldSize)
				fieldSeen[githubasset.FieldSize] = struct{}{}
			}
		case "downloadCount":
			if _, ok := fieldSeen[githubasset.FieldDownloadCount]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldDownloadCount)
				fieldSeen[githubasset.FieldDownloadCount] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[githubasset.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldCreatedAt)
				fieldSeen[githubasset.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[githubasset.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldUpdatedAt)
				fieldSeen[githubasset.FieldUpdatedAt] = struct{}{}
			}
		case "uploader":
			if _, ok := fieldSeen[githubasset.FieldUploader]; !ok {
				selectedFields = append(selectedFields, githubasset.FieldUploader)
				fieldSeen[githubasset.FieldUploader] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ga.Select(selectedFields...)
	}
	return nil
}

type githubassetPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubAssetPaginateOption
}

func newGithubAssetPaginateArgs(rv map[string]interface{}) *githubassetPaginateArgs {
	args := &githubassetPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubAssetOrder{Field: &GithubAssetOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubAssetOrder(order))
			}
		case *GithubAssetOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubAssetOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubAssetWhereInput); ok {
		args.opts = append(args.opts, WithGithubAssetFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ge *GithubEventQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubEventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ge, nil
	}
	if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ge, nil
}

func (ge *GithubEventQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(githubevent.Columns))
		selectedFields = []string{githubevent.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "eventID":
			if _, ok := fieldSeen[githubevent.FieldEventID]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldEventID)
				fieldSeen[githubevent.FieldEventID] = struct{}{}
			}
		case "eventType":
			if _, ok := fieldSeen[githubevent.FieldEventType]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldEventType)
				fieldSeen[githubevent.FieldEventType] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[githubevent.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldCreatedAt)
				fieldSeen[githubevent.FieldCreatedAt] = struct{}{}
			}
		case "public":
			if _, ok := fieldSeen[githubevent.FieldPublic]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldPublic)
				fieldSeen[githubevent.FieldPublic] = struct{}{}
			}
		case "actorID":
			if _, ok := fieldSeen[githubevent.FieldActorID]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldActorID)
				fieldSeen[githubevent.FieldActorID] = struct{}{}
			}
		case "actor":
			if _, ok := fieldSeen[githubevent.FieldActor]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldActor)
				fieldSeen[githubevent.FieldActor] = struct{}{}
			}
		case "repoID":
			if _, ok := fieldSeen[githubevent.FieldRepoID]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldRepoID)
				fieldSeen[githubevent.FieldRepoID] = struct{}{}
			}
		case "repo":
			if _, ok := fieldSeen[githubevent.FieldRepo]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldRepo)
				fieldSeen[githubevent.FieldRepo] = struct{}{}
			}
		case "payload":
			if _, ok := fieldSeen[githubevent.FieldPayload]; !ok {
				selectedFields = append(selectedFields, githubevent.FieldPayload)
				fieldSeen[githubevent.FieldPayload] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ge.Select(selectedFields...)
	}
	return nil
}

type githubeventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubEventPaginateOption
}

func newGithubEventPaginateArgs(rv map[string]interface{}) *githubeventPaginateArgs {
	args := &githubeventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubEventOrder{Field: &GithubEventOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubEventOrder(order))
			}
		case *GithubEventOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubEventOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubEventWhereInput); ok {
		args.opts = append(args.opts, WithGithubEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gg *GithubGistQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubGistQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gg, nil
	}
	if err := gg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gg, nil
}

func (gg *GithubGistQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(githubgist.Columns))
		selectedFields = []string{githubgist.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "gistID":
			if _, ok := fieldSeen[githubgist.FieldGistID]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldGistID)
				fieldSeen[githubgist.FieldGistID] = struct{}{}
			}
		case "htmlURL":
			if _, ok := fieldSeen[githubgist.FieldHTMLURL]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldHTMLURL)
				fieldSeen[githubgist.FieldHTMLURL] = struct{}{}
			}
		case "public":
			if _, ok := fieldSeen[githubgist.FieldPublic]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldPublic)
				fieldSeen[githubgist.FieldPublic] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[githubgist.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldCreatedAt)
				fieldSeen[githubgist.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[githubgist.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldUpdatedAt)
				fieldSeen[githubgist.FieldUpdatedAt] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[githubgist.FieldDescription]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldDescription)
				fieldSeen[githubgist.FieldDescription] = struct{}{}
			}
		case "owner":
			if _, ok := fieldSeen[githubgist.FieldOwner]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldOwner)
				fieldSeen[githubgist.FieldOwner] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[githubgist.FieldName]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldName)
				fieldSeen[githubgist.FieldName] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[githubgist.FieldType]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldType)
				fieldSeen[githubgist.FieldType] = struct{}{}
			}
		case "language":
			if _, ok := fieldSeen[githubgist.FieldLanguage]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldLanguage)
				fieldSeen[githubgist.FieldLanguage] = struct{}{}
			}
		case "size":
			if _, ok := fieldSeen[githubgist.FieldSize]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldSize)
				fieldSeen[githubgist.FieldSize] = struct{}{}
			}
		case "rawURL":
			if _, ok := fieldSeen[githubgist.FieldRawURL]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldRawURL)
				fieldSeen[githubgist.FieldRawURL] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[githubgist.FieldContent]; !ok {
				selectedFields = append(selectedFields, githubgist.FieldContent)
				fieldSeen[githubgist.FieldContent] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gg.Select(selectedFields...)
	}
	return nil
}

type githubgistPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubGistPaginateOption
}

func newGithubGistPaginateArgs(rv map[string]interface{}) *githubgistPaginateArgs {
	args := &githubgistPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubGistOrder{Field: &GithubGistOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubGistOrder(order))
			}
		case *GithubGistOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubGistOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubGistWhereInput); ok {
		args.opts = append(args.opts, WithGithubGistFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gr *GithubReleaseQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubReleaseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gr, nil
	}
	if err := gr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gr, nil
}

func (gr *GithubReleaseQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(githubrelease.Columns))
		selectedFields = []string{githubrelease.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "repository":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GithubRepositoryClient{config: gr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gr.withRepository = query
		case "assets":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GithubAssetClient{config: gr.config}).Query()
			)
			args := newGithubAssetPaginateArgs(fieldArgs(ctx, new(GithubAssetWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newGithubAssetPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					gr.loadTotal = append(gr.loadTotal, func(ctx context.Context, nodes []*GithubRelease) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"github_release_assets"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(githubrelease.AssetsColumn), ids...))
						})
						if err := query.GroupBy(githubrelease.AssetsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					gr.loadTotal = append(gr.loadTotal, func(_ context.Context, nodes []*GithubRelease) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Assets)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(githubrelease.AssetsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			gr.WithNamedAssets(alias, func(wq *GithubAssetQuery) {
				*wq = *query
			})
		case "releaseID":
			if _, ok := fieldSeen[githubrelease.FieldReleaseID]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldReleaseID)
				fieldSeen[githubrelease.FieldReleaseID] = struct{}{}
			}
		case "htmlURL":
			if _, ok := fieldSeen[githubrelease.FieldHTMLURL]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldHTMLURL)
				fieldSeen[githubrelease.FieldHTMLURL] = struct{}{}
			}
		case "tagName":
			if _, ok := fieldSeen[githubrelease.FieldTagName]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldTagName)
				fieldSeen[githubrelease.FieldTagName] = struct{}{}
			}
		case "targetCommitish":
			if _, ok := fieldSeen[githubrelease.FieldTargetCommitish]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldTargetCommitish)
				fieldSeen[githubrelease.FieldTargetCommitish] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[githubrelease.FieldName]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldName)
				fieldSeen[githubrelease.FieldName] = struct{}{}
			}
		case "draft":
			if _, ok := fieldSeen[githubrelease.FieldDraft]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldDraft)
				fieldSeen[githubrelease.FieldDraft] = struct{}{}
			}
		case "prerelease":
			if _, ok := fieldSeen[githubrelease.FieldPrerelease]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldPrerelease)
				fieldSeen[githubrelease.FieldPrerelease] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[githubrelease.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldCreatedAt)
				fieldSeen[githubrelease.FieldCreatedAt] = struct{}{}
			}
		case "publishedAt":
			if _, ok := fieldSeen[githubrelease.FieldPublishedAt]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldPublishedAt)
				fieldSeen[githubrelease.FieldPublishedAt] = struct{}{}
			}
		case "author":
			if _, ok := fieldSeen[githubrelease.FieldAuthor]; !ok {
				selectedFields = append(selectedFields, githubrelease.FieldAuthor)
				fieldSeen[githubrelease.FieldAuthor] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gr.Select(selectedFields...)
	}
	return nil
}

type githubreleasePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubReleasePaginateOption
}

func newGithubReleasePaginateArgs(rv map[string]interface{}) *githubreleasePaginateArgs {
	args := &githubreleasePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubReleaseOrder{Field: &GithubReleaseOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubReleaseOrder(order))
			}
		case *GithubReleaseOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubReleaseOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubReleaseWhereInput); ok {
		args.opts = append(args.opts, WithGithubReleaseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gr *GithubRepositoryQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubRepositoryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gr, nil
	}
	if err := gr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gr, nil
}

func (gr *GithubRepositoryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(githubrepository.Columns))
		selectedFields = []string{githubrepository.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "labels":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LabelClient{config: gr.config}).Query()
			)
			args := newLabelPaginateArgs(fieldArgs(ctx, new(LabelWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLabelPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					gr.loadTotal = append(gr.loadTotal, func(ctx context.Context, nodes []*GithubRepository) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"github_repository_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(githubrepository.LabelsTable)
							s.Join(joinT).On(s.C(label.FieldID), joinT.C(githubrepository.LabelsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(githubrepository.LabelsPrimaryKey[1]), ids...))
							s.Select(joinT.C(githubrepository.LabelsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(githubrepository.LabelsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					gr.loadTotal = append(gr.loadTotal, func(_ context.Context, nodes []*GithubRepository) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Labels)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(githubrepository.LabelsPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			gr.WithNamedLabels(alias, func(wq *LabelQuery) {
				*wq = *query
			})
		case "releases":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GithubReleaseClient{config: gr.config}).Query()
			)
			args := newGithubReleasePaginateArgs(fieldArgs(ctx, new(GithubReleaseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newGithubReleasePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					gr.loadTotal = append(gr.loadTotal, func(ctx context.Context, nodes []*GithubRepository) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"github_repository_releases"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(githubrepository.ReleasesColumn), ids...))
						})
						if err := query.GroupBy(githubrepository.ReleasesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					gr.loadTotal = append(gr.loadTotal, func(_ context.Context, nodes []*GithubRepository) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Releases)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(githubrepository.ReleasesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			gr.WithNamedReleases(alias, func(wq *GithubReleaseQuery) {
				*wq = *query
			})
		case "repoID":
			if _, ok := fieldSeen[githubrepository.FieldRepoID]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldRepoID)
				fieldSeen[githubrepository.FieldRepoID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[githubrepository.FieldName]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldName)
				fieldSeen[githubrepository.FieldName] = struct{}{}
			}
		case "fullName":
			if _, ok := fieldSeen[githubrepository.FieldFullName]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldFullName)
				fieldSeen[githubrepository.FieldFullName] = struct{}{}
			}
		case "ownerLogin":
			if _, ok := fieldSeen[githubrepository.FieldOwnerLogin]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldOwnerLogin)
				fieldSeen[githubrepository.FieldOwnerLogin] = struct{}{}
			}
		case "owner":
			if _, ok := fieldSeen[githubrepository.FieldOwner]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldOwner)
				fieldSeen[githubrepository.FieldOwner] = struct{}{}
			}
		case "public":
			if _, ok := fieldSeen[githubrepository.FieldPublic]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldPublic)
				fieldSeen[githubrepository.FieldPublic] = struct{}{}
			}
		case "htmlURL":
			if _, ok := fieldSeen[githubrepository.FieldHTMLURL]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldHTMLURL)
				fieldSeen[githubrepository.FieldHTMLURL] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[githubrepository.FieldDescription]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldDescription)
				fieldSeen[githubrepository.FieldDescription] = struct{}{}
			}
		case "fork":
			if _, ok := fieldSeen[githubrepository.FieldFork]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldFork)
				fieldSeen[githubrepository.FieldFork] = struct{}{}
			}
		case "homepage":
			if _, ok := fieldSeen[githubrepository.FieldHomepage]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldHomepage)
				fieldSeen[githubrepository.FieldHomepage] = struct{}{}
			}
		case "starCount":
			if _, ok := fieldSeen[githubrepository.FieldStarCount]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldStarCount)
				fieldSeen[githubrepository.FieldStarCount] = struct{}{}
			}
		case "defaultBranch":
			if _, ok := fieldSeen[githubrepository.FieldDefaultBranch]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldDefaultBranch)
				fieldSeen[githubrepository.FieldDefaultBranch] = struct{}{}
			}
		case "isTemplate":
			if _, ok := fieldSeen[githubrepository.FieldIsTemplate]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldIsTemplate)
				fieldSeen[githubrepository.FieldIsTemplate] = struct{}{}
			}
		case "hasIssues":
			if _, ok := fieldSeen[githubrepository.FieldHasIssues]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldHasIssues)
				fieldSeen[githubrepository.FieldHasIssues] = struct{}{}
			}
		case "archived":
			if _, ok := fieldSeen[githubrepository.FieldArchived]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldArchived)
				fieldSeen[githubrepository.FieldArchived] = struct{}{}
			}
		case "pushedAt":
			if _, ok := fieldSeen[githubrepository.FieldPushedAt]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldPushedAt)
				fieldSeen[githubrepository.FieldPushedAt] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[githubrepository.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldCreatedAt)
				fieldSeen[githubrepository.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[githubrepository.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldUpdatedAt)
				fieldSeen[githubrepository.FieldUpdatedAt] = struct{}{}
			}
		case "license":
			if _, ok := fieldSeen[githubrepository.FieldLicense]; !ok {
				selectedFields = append(selectedFields, githubrepository.FieldLicense)
				fieldSeen[githubrepository.FieldLicense] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gr.Select(selectedFields...)
	}
	return nil
}

type githubrepositoryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubRepositoryPaginateOption
}

func newGithubRepositoryPaginateArgs(rv map[string]interface{}) *githubrepositoryPaginateArgs {
	args := &githubrepositoryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubRepositoryOrder{Field: &GithubRepositoryOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubRepositoryOrder(order))
			}
		case *GithubRepositoryOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubRepositoryOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubRepositoryWhereInput); ok {
		args.opts = append(args.opts, WithGithubRepositoryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LabelQuery) CollectFields(ctx context.Context, satisfies ...string) (*LabelQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *LabelQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(label.Columns))
		selectedFields = []string{label.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: l.config}).Query()
			)
			args := newPostPaginateArgs(fieldArgs(ctx, new(PostWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newPostPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					l.loadTotal = append(l.loadTotal, func(ctx context.Context, nodes []*Label) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"label_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(label.PostsTable)
							s.Join(joinT).On(s.C(post.FieldID), joinT.C(label.PostsPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(label.PostsPrimaryKey[0]), ids...))
							s.Select(joinT.C(label.PostsPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(label.PostsPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					l.loadTotal = append(l.loadTotal, func(_ context.Context, nodes []*Label) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Posts)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(label.PostsPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			l.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})
		case "githubRepositories":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GithubRepositoryClient{config: l.config}).Query()
			)
			args := newGithubRepositoryPaginateArgs(fieldArgs(ctx, new(GithubRepositoryWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newGithubRepositoryPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					l.loadTotal = append(l.loadTotal, func(ctx context.Context, nodes []*Label) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"label_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(label.GithubRepositoriesTable)
							s.Join(joinT).On(s.C(githubrepository.FieldID), joinT.C(label.GithubRepositoriesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(label.GithubRepositoriesPrimaryKey[0]), ids...))
							s.Select(joinT.C(label.GithubRepositoriesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(label.GithubRepositoriesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					l.loadTotal = append(l.loadTotal, func(_ context.Context, nodes []*Label) error {
						for i := range nodes {
							n := len(nodes[i].Edges.GithubRepositories)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(label.GithubRepositoriesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			l.WithNamedGithubRepositories(alias, func(wq *GithubRepositoryQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[label.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, label.FieldCreateTime)
				fieldSeen[label.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[label.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, label.FieldUpdateTime)
				fieldSeen[label.FieldUpdateTime] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[label.FieldName]; !ok {
				selectedFields = append(selectedFields, label.FieldName)
				fieldSeen[label.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		l.Select(selectedFields...)
	}
	return nil
}

type labelPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LabelPaginateOption
}

func newLabelPaginateArgs(rv map[string]interface{}) *labelPaginateArgs {
	args := &labelPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LabelOrder{Field: &LabelOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLabelOrder(order))
			}
		case *LabelOrder:
			if v != nil {
				args.opts = append(args.opts, WithLabelOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LabelWhereInput); ok {
		args.opts = append(args.opts, WithLabelFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PostQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return po, nil
	}
	if err := po.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return po, nil
}

func (po *PostQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(post.Columns))
		selectedFields = []string{post.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "author":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			po.withAuthor = query
		case "labels":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LabelClient{config: po.config}).Query()
			)
			args := newLabelPaginateArgs(fieldArgs(ctx, new(LabelWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLabelPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					po.loadTotal = append(po.loadTotal, func(ctx context.Context, nodes []*Post) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"post_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(post.LabelsTable)
							s.Join(joinT).On(s.C(label.FieldID), joinT.C(post.LabelsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(post.LabelsPrimaryKey[1]), ids...))
							s.Select(joinT.C(post.LabelsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(post.LabelsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					po.loadTotal = append(po.loadTotal, func(_ context.Context, nodes []*Post) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Labels)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(post.LabelsPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			po.WithNamedLabels(alias, func(wq *LabelQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[post.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, post.FieldCreateTime)
				fieldSeen[post.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[post.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, post.FieldUpdateTime)
				fieldSeen[post.FieldUpdateTime] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[post.FieldSlug]; !ok {
				selectedFields = append(selectedFields, post.FieldSlug)
				fieldSeen[post.FieldSlug] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[post.FieldTitle]; !ok {
				selectedFields = append(selectedFields, post.FieldTitle)
				fieldSeen[post.FieldTitle] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[post.FieldContent]; !ok {
				selectedFields = append(selectedFields, post.FieldContent)
				fieldSeen[post.FieldContent] = struct{}{}
			}
		case "contentHTML":
			if _, ok := fieldSeen[post.FieldContentHTML]; !ok {
				selectedFields = append(selectedFields, post.FieldContentHTML)
				fieldSeen[post.FieldContentHTML] = struct{}{}
			}
		case "summary":
			if _, ok := fieldSeen[post.FieldSummary]; !ok {
				selectedFields = append(selectedFields, post.FieldSummary)
				fieldSeen[post.FieldSummary] = struct{}{}
			}
		case "publishedAt":
			if _, ok := fieldSeen[post.FieldPublishedAt]; !ok {
				selectedFields = append(selectedFields, post.FieldPublishedAt)
				fieldSeen[post.FieldPublishedAt] = struct{}{}
			}
		case "viewCount":
			if _, ok := fieldSeen[post.FieldViewCount]; !ok {
				selectedFields = append(selectedFields, post.FieldViewCount)
				fieldSeen[post.FieldViewCount] = struct{}{}
			}
		case "public":
			if _, ok := fieldSeen[post.FieldPublic]; !ok {
				selectedFields = append(selectedFields, post.FieldPublic)
				fieldSeen[post.FieldPublic] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		po.Select(selectedFields...)
	}
	return nil
}

type postPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostPaginateOption
}

func newPostPaginateArgs(rv map[string]interface{}) *postPaginateArgs {
	args := &postPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &PostOrder{Field: &PostOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostOrder(order))
			}
		case *PostOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostWhereInput); ok {
		args.opts = append(args.opts, WithPostFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: u.config}).Query()
			)
			args := newPostPaginateArgs(fieldArgs(ctx, new(PostWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newPostPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"user_posts"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.PostsColumn), ids...))
						})
						if err := query.GroupBy(user.PostsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Posts)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.PostsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[user.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldCreateTime)
				fieldSeen[user.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[user.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdateTime)
				fieldSeen[user.FieldUpdateTime] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[user.FieldUserID]; !ok {
				selectedFields = append(selectedFields, user.FieldUserID)
				fieldSeen[user.FieldUserID] = struct{}{}
			}
		case "login":
			if _, ok := fieldSeen[user.FieldLogin]; !ok {
				selectedFields = append(selectedFields, user.FieldLogin)
				fieldSeen[user.FieldLogin] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "avatarURL":
			if _, ok := fieldSeen[user.FieldAvatarURL]; !ok {
				selectedFields = append(selectedFields, user.FieldAvatarURL)
				fieldSeen[user.FieldAvatarURL] = struct{}{}
			}
		case "htmlURL":
			if _, ok := fieldSeen[user.FieldHTMLURL]; !ok {
				selectedFields = append(selectedFields, user.FieldHTMLURL)
				fieldSeen[user.FieldHTMLURL] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "location":
			if _, ok := fieldSeen[user.FieldLocation]; !ok {
				selectedFields = append(selectedFields, user.FieldLocation)
				fieldSeen[user.FieldLocation] = struct{}{}
			}
		case "bio":
			if _, ok := fieldSeen[user.FieldBio]; !ok {
				selectedFields = append(selectedFields, user.FieldBio)
				fieldSeen[user.FieldBio] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
