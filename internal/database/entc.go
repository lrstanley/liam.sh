//go:build ignore

package main

import (
	"log"
	"os"
	"time"

	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	"github.com/lrstanley/entrest"
)

const header = `// Copyright (c) Liam Stanley <liam@liam.sh>. All rights reserved. Use of
// this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.`

func checkError(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	schemaPath := "./schema"
	rest, err := entrest.NewExtension(&entrest.Config{
		SpecFromPath:          "../../cmd/httpserver/base-openapi.json",
		MaxItemsPerPage:       1000,
		Handler:               entrest.HandlerChi,
		StrictMutate:          true,
		GlobalRequestHeaders:  entrest.RequestIDHeader,
		GlobalResponseHeaders: entrest.RateLimitHeaders,
	})
	checkError(err)

	extensions := entc.Extensions(rest)

	getConfig := func() *gen.Config {
		return &gen.Config{
			Target:  "./ent/",
			Schema:  "github.com/lrstanley/liam.sh/internal/database/schema",
			Package: "github.com/lrstanley/liam.sh/internal/database/ent",
			Header:  header,
			Features: []gen.Feature{
				gen.FeaturePrivacy,
				gen.FeatureEntQL,
				gen.FeatureUpsert,
				gen.FeatureIntercept,
			},
		}
	}

	start := time.Now()

	// For speed, check if hooks directory exists, if so, skip this step.
	if _, err := os.Stat("./ent/hook"); err != nil {
		checkError(entc.Generate(schemaPath, getConfig(), extensions, entc.BuildTags("skiphooks", "skippolicy")))
		log.Printf("bootstrap (no hooks, policies) took: %s", time.Since(start))
	}

	// For speed, check if the privacy directory exists, if so, skip this step.
	if _, err := os.Stat("./ent/privacy"); err != nil {
		checkError(entc.Generate(schemaPath, getConfig(), extensions, entc.BuildTags("skippolicy")))
		log.Printf("bootstrap (no policies) took: %s", time.Since(start))
	}

	checkError(entc.Generate(schemaPath, getConfig(), extensions))
	log.Printf("generation completed (all): %s", time.Since(start))
}
