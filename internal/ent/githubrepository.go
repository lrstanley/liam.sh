// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/go-github/v44/github"
	"github.com/lrstanley/liam.sh/internal/ent/githubrepository"
)

// GithubRepository is the model entity for the GithubRepository schema.
type GithubRepository struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RepoID holds the value of the "repo_id" field.
	RepoID int64 `json:"repo_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// OwnerLogin holds the value of the "owner_login" field.
	OwnerLogin string `json:"owner_login,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner *github.User `json:"owner,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Fork holds the value of the "fork" field.
	Fork bool `json:"fork,omitempty"`
	// Homepage holds the value of the "homepage" field.
	Homepage string `json:"homepage,omitempty"`
	// StarCount holds the value of the "star_count" field.
	StarCount int `json:"star_count,omitempty"`
	// DefaultBranch holds the value of the "default_branch" field.
	DefaultBranch string `json:"default_branch,omitempty"`
	// IsTemplate holds the value of the "is_template" field.
	IsTemplate bool `json:"is_template,omitempty"`
	// HasIssues holds the value of the "has_issues" field.
	HasIssues bool `json:"has_issues,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// PushedAt holds the value of the "pushed_at" field.
	PushedAt time.Time `json:"pushed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// License holds the value of the "license" field.
	License *github.License `json:"license,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GithubRepositoryQuery when eager-loading is set.
	Edges GithubRepositoryEdges `json:"edges"`
}

// GithubRepositoryEdges holds the relations/edges for other nodes in the graph.
type GithubRepositoryEdges struct {
	// Labels holds the value of the labels edge.
	Labels []*Label `json:"labels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]*int
}

// LabelsOrErr returns the Labels value or an error if the edge
// was not loaded in eager-loading.
func (e GithubRepositoryEdges) LabelsOrErr() ([]*Label, error) {
	if e.loadedTypes[0] {
		return e.Labels, nil
	}
	return nil, &NotLoadedError{edge: "labels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubRepository) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubrepository.FieldOwner, githubrepository.FieldLicense:
			values[i] = new([]byte)
		case githubrepository.FieldPublic, githubrepository.FieldFork, githubrepository.FieldIsTemplate, githubrepository.FieldHasIssues, githubrepository.FieldArchived:
			values[i] = new(sql.NullBool)
		case githubrepository.FieldID, githubrepository.FieldRepoID, githubrepository.FieldStarCount:
			values[i] = new(sql.NullInt64)
		case githubrepository.FieldName, githubrepository.FieldFullName, githubrepository.FieldOwnerLogin, githubrepository.FieldHTMLURL, githubrepository.FieldDescription, githubrepository.FieldHomepage, githubrepository.FieldDefaultBranch:
			values[i] = new(sql.NullString)
		case githubrepository.FieldPushedAt, githubrepository.FieldCreatedAt, githubrepository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GithubRepository", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubRepository fields.
func (gr *GithubRepository) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubrepository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case githubrepository.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				gr.RepoID = value.Int64
			}
		case githubrepository.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case githubrepository.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				gr.FullName = value.String
			}
		case githubrepository.FieldOwnerLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_login", values[i])
			} else if value.Valid {
				gr.OwnerLogin = value.String
			}
		case githubrepository.FieldOwner:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Owner); err != nil {
					return fmt.Errorf("unmarshal field owner: %w", err)
				}
			}
		case githubrepository.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				gr.Public = value.Bool
			}
		case githubrepository.FieldHTMLURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_url", values[i])
			} else if value.Valid {
				gr.HTMLURL = value.String
			}
		case githubrepository.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gr.Description = value.String
			}
		case githubrepository.FieldFork:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fork", values[i])
			} else if value.Valid {
				gr.Fork = value.Bool
			}
		case githubrepository.FieldHomepage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage", values[i])
			} else if value.Valid {
				gr.Homepage = value.String
			}
		case githubrepository.FieldStarCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field star_count", values[i])
			} else if value.Valid {
				gr.StarCount = int(value.Int64)
			}
		case githubrepository.FieldDefaultBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_branch", values[i])
			} else if value.Valid {
				gr.DefaultBranch = value.String
			}
		case githubrepository.FieldIsTemplate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_template", values[i])
			} else if value.Valid {
				gr.IsTemplate = value.Bool
			}
		case githubrepository.FieldHasIssues:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_issues", values[i])
			} else if value.Valid {
				gr.HasIssues = value.Bool
			}
		case githubrepository.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				gr.Archived = value.Bool
			}
		case githubrepository.FieldPushedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pushed_at", values[i])
			} else if value.Valid {
				gr.PushedAt = value.Time
			}
		case githubrepository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case githubrepository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case githubrepository.FieldLicense:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field license", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.License); err != nil {
					return fmt.Errorf("unmarshal field license: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryLabels queries the "labels" edge of the GithubRepository entity.
func (gr *GithubRepository) QueryLabels() *LabelQuery {
	return (&GithubRepositoryClient{config: gr.config}).QueryLabels(gr)
}

// Update returns a builder for updating this GithubRepository.
// Note that you need to call GithubRepository.Unwrap() before calling this method if this GithubRepository
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GithubRepository) Update() *GithubRepositoryUpdateOne {
	return (&GithubRepositoryClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the GithubRepository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GithubRepository) Unwrap() *GithubRepository {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubRepository is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GithubRepository) String() string {
	var builder strings.Builder
	builder.WriteString("GithubRepository(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", repo_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.RepoID))
	builder.WriteString(", name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", full_name=")
	builder.WriteString(gr.FullName)
	builder.WriteString(", owner_login=")
	builder.WriteString(gr.OwnerLogin)
	builder.WriteString(", owner=")
	builder.WriteString(fmt.Sprintf("%v", gr.Owner))
	builder.WriteString(", public=")
	builder.WriteString(fmt.Sprintf("%v", gr.Public))
	builder.WriteString(", html_url=")
	builder.WriteString(gr.HTMLURL)
	builder.WriteString(", description=")
	builder.WriteString(gr.Description)
	builder.WriteString(", fork=")
	builder.WriteString(fmt.Sprintf("%v", gr.Fork))
	builder.WriteString(", homepage=")
	builder.WriteString(gr.Homepage)
	builder.WriteString(", star_count=")
	builder.WriteString(fmt.Sprintf("%v", gr.StarCount))
	builder.WriteString(", default_branch=")
	builder.WriteString(gr.DefaultBranch)
	builder.WriteString(", is_template=")
	builder.WriteString(fmt.Sprintf("%v", gr.IsTemplate))
	builder.WriteString(", has_issues=")
	builder.WriteString(fmt.Sprintf("%v", gr.HasIssues))
	builder.WriteString(", archived=")
	builder.WriteString(fmt.Sprintf("%v", gr.Archived))
	builder.WriteString(", pushed_at=")
	builder.WriteString(gr.PushedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", license=")
	builder.WriteString(fmt.Sprintf("%v", gr.License))
	builder.WriteByte(')')
	return builder.String()
}

// GithubRepositories is a parsable slice of GithubRepository.
type GithubRepositories []*GithubRepository

func (gr GithubRepositories) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
