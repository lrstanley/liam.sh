// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"fmt"
	"time"

	"github.com/lrstanley/liam.sh/internal/ent/githubasset"
	"github.com/lrstanley/liam.sh/internal/ent/githubevent"
	"github.com/lrstanley/liam.sh/internal/ent/githubgist"
	"github.com/lrstanley/liam.sh/internal/ent/githubrelease"
	"github.com/lrstanley/liam.sh/internal/ent/githubrepository"
	"github.com/lrstanley/liam.sh/internal/ent/label"
	"github.com/lrstanley/liam.sh/internal/ent/post"
	"github.com/lrstanley/liam.sh/internal/ent/predicate"
	"github.com/lrstanley/liam.sh/internal/ent/user"
)

// GithubAssetWhereInput represents a where input for filtering GithubAsset queries.
type GithubAssetWhereInput struct {
	Predicates []predicate.GithubAsset  `json:"-"`
	Not        *GithubAssetWhereInput   `json:"not,omitempty"`
	Or         []*GithubAssetWhereInput `json:"or,omitempty"`
	And        []*GithubAssetWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "asset_id" field predicates.
	AssetID      *int64  `json:"assetID,omitempty"`
	AssetIDNEQ   *int64  `json:"assetIDNEQ,omitempty"`
	AssetIDIn    []int64 `json:"assetIDIn,omitempty"`
	AssetIDNotIn []int64 `json:"assetIDNotIn,omitempty"`
	AssetIDGT    *int64  `json:"assetIDGT,omitempty"`
	AssetIDGTE   *int64  `json:"assetIDGTE,omitempty"`
	AssetIDLT    *int64  `json:"assetIDLT,omitempty"`
	AssetIDLTE   *int64  `json:"assetIDLTE,omitempty"`

	// "browser_download_url" field predicates.
	BrowserDownloadURL             *string  `json:"browserDownloadURL,omitempty"`
	BrowserDownloadURLNEQ          *string  `json:"browserDownloadURLNEQ,omitempty"`
	BrowserDownloadURLIn           []string `json:"browserDownloadURLIn,omitempty"`
	BrowserDownloadURLNotIn        []string `json:"browserDownloadURLNotIn,omitempty"`
	BrowserDownloadURLGT           *string  `json:"browserDownloadURLGT,omitempty"`
	BrowserDownloadURLGTE          *string  `json:"browserDownloadURLGTE,omitempty"`
	BrowserDownloadURLLT           *string  `json:"browserDownloadURLLT,omitempty"`
	BrowserDownloadURLLTE          *string  `json:"browserDownloadURLLTE,omitempty"`
	BrowserDownloadURLContains     *string  `json:"browserDownloadURLContains,omitempty"`
	BrowserDownloadURLHasPrefix    *string  `json:"browserDownloadURLHasPrefix,omitempty"`
	BrowserDownloadURLHasSuffix    *string  `json:"browserDownloadURLHasSuffix,omitempty"`
	BrowserDownloadURLEqualFold    *string  `json:"browserDownloadURLEqualFold,omitempty"`
	BrowserDownloadURLContainsFold *string  `json:"browserDownloadURLContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "label" field predicates.
	Label             *string  `json:"label,omitempty"`
	LabelNEQ          *string  `json:"labelNEQ,omitempty"`
	LabelIn           []string `json:"labelIn,omitempty"`
	LabelNotIn        []string `json:"labelNotIn,omitempty"`
	LabelGT           *string  `json:"labelGT,omitempty"`
	LabelGTE          *string  `json:"labelGTE,omitempty"`
	LabelLT           *string  `json:"labelLT,omitempty"`
	LabelLTE          *string  `json:"labelLTE,omitempty"`
	LabelContains     *string  `json:"labelContains,omitempty"`
	LabelHasPrefix    *string  `json:"labelHasPrefix,omitempty"`
	LabelHasSuffix    *string  `json:"labelHasSuffix,omitempty"`
	LabelIsNil        bool     `json:"labelIsNil,omitempty"`
	LabelNotNil       bool     `json:"labelNotNil,omitempty"`
	LabelEqualFold    *string  `json:"labelEqualFold,omitempty"`
	LabelContainsFold *string  `json:"labelContainsFold,omitempty"`

	// "state" field predicates.
	State             *string  `json:"state,omitempty"`
	StateNEQ          *string  `json:"stateNEQ,omitempty"`
	StateIn           []string `json:"stateIn,omitempty"`
	StateNotIn        []string `json:"stateNotIn,omitempty"`
	StateGT           *string  `json:"stateGT,omitempty"`
	StateGTE          *string  `json:"stateGTE,omitempty"`
	StateLT           *string  `json:"stateLT,omitempty"`
	StateLTE          *string  `json:"stateLTE,omitempty"`
	StateContains     *string  `json:"stateContains,omitempty"`
	StateHasPrefix    *string  `json:"stateHasPrefix,omitempty"`
	StateHasSuffix    *string  `json:"stateHasSuffix,omitempty"`
	StateIsNil        bool     `json:"stateIsNil,omitempty"`
	StateNotNil       bool     `json:"stateNotNil,omitempty"`
	StateEqualFold    *string  `json:"stateEqualFold,omitempty"`
	StateContainsFold *string  `json:"stateContainsFold,omitempty"`

	// "content_type" field predicates.
	ContentType             *string  `json:"contentType,omitempty"`
	ContentTypeNEQ          *string  `json:"contentTypeNEQ,omitempty"`
	ContentTypeIn           []string `json:"contentTypeIn,omitempty"`
	ContentTypeNotIn        []string `json:"contentTypeNotIn,omitempty"`
	ContentTypeGT           *string  `json:"contentTypeGT,omitempty"`
	ContentTypeGTE          *string  `json:"contentTypeGTE,omitempty"`
	ContentTypeLT           *string  `json:"contentTypeLT,omitempty"`
	ContentTypeLTE          *string  `json:"contentTypeLTE,omitempty"`
	ContentTypeContains     *string  `json:"contentTypeContains,omitempty"`
	ContentTypeHasPrefix    *string  `json:"contentTypeHasPrefix,omitempty"`
	ContentTypeHasSuffix    *string  `json:"contentTypeHasSuffix,omitempty"`
	ContentTypeEqualFold    *string  `json:"contentTypeEqualFold,omitempty"`
	ContentTypeContainsFold *string  `json:"contentTypeContainsFold,omitempty"`

	// "size" field predicates.
	Size      *int64  `json:"size,omitempty"`
	SizeNEQ   *int64  `json:"sizeNEQ,omitempty"`
	SizeIn    []int64 `json:"sizeIn,omitempty"`
	SizeNotIn []int64 `json:"sizeNotIn,omitempty"`
	SizeGT    *int64  `json:"sizeGT,omitempty"`
	SizeGTE   *int64  `json:"sizeGTE,omitempty"`
	SizeLT    *int64  `json:"sizeLT,omitempty"`
	SizeLTE   *int64  `json:"sizeLTE,omitempty"`

	// "download_count" field predicates.
	DownloadCount      *int64  `json:"downloadCount,omitempty"`
	DownloadCountNEQ   *int64  `json:"downloadCountNEQ,omitempty"`
	DownloadCountIn    []int64 `json:"downloadCountIn,omitempty"`
	DownloadCountNotIn []int64 `json:"downloadCountNotIn,omitempty"`
	DownloadCountGT    *int64  `json:"downloadCountGT,omitempty"`
	DownloadCountGTE   *int64  `json:"downloadCountGTE,omitempty"`
	DownloadCountLT    *int64  `json:"downloadCountLT,omitempty"`
	DownloadCountLTE   *int64  `json:"downloadCountLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "release" edge predicates.
	HasRelease     *bool                      `json:"hasRelease,omitempty"`
	HasReleaseWith []*GithubReleaseWhereInput `json:"hasReleaseWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GithubAssetWhereInput) AddPredicates(predicates ...predicate.GithubAsset) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GithubAssetWhereInput filter on the GithubAssetQuery builder.
func (i *GithubAssetWhereInput) Filter(q *GithubAssetQuery) (*GithubAssetQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubassets.
// An error is returned if the input is empty or invalid.
func (i *GithubAssetWhereInput) P() (predicate.GithubAsset, error) {
	var predicates []predicate.GithubAsset
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubasset.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubAsset, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubasset.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubAsset, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubasset.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, githubasset.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubasset.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubasset.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubasset.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubasset.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubasset.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubasset.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubasset.IDLTE(*i.IDLTE))
	}
	if i.AssetID != nil {
		predicates = append(predicates, githubasset.AssetIDEQ(*i.AssetID))
	}
	if i.AssetIDNEQ != nil {
		predicates = append(predicates, githubasset.AssetIDNEQ(*i.AssetIDNEQ))
	}
	if len(i.AssetIDIn) > 0 {
		predicates = append(predicates, githubasset.AssetIDIn(i.AssetIDIn...))
	}
	if len(i.AssetIDNotIn) > 0 {
		predicates = append(predicates, githubasset.AssetIDNotIn(i.AssetIDNotIn...))
	}
	if i.AssetIDGT != nil {
		predicates = append(predicates, githubasset.AssetIDGT(*i.AssetIDGT))
	}
	if i.AssetIDGTE != nil {
		predicates = append(predicates, githubasset.AssetIDGTE(*i.AssetIDGTE))
	}
	if i.AssetIDLT != nil {
		predicates = append(predicates, githubasset.AssetIDLT(*i.AssetIDLT))
	}
	if i.AssetIDLTE != nil {
		predicates = append(predicates, githubasset.AssetIDLTE(*i.AssetIDLTE))
	}
	if i.BrowserDownloadURL != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLEQ(*i.BrowserDownloadURL))
	}
	if i.BrowserDownloadURLNEQ != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLNEQ(*i.BrowserDownloadURLNEQ))
	}
	if len(i.BrowserDownloadURLIn) > 0 {
		predicates = append(predicates, githubasset.BrowserDownloadURLIn(i.BrowserDownloadURLIn...))
	}
	if len(i.BrowserDownloadURLNotIn) > 0 {
		predicates = append(predicates, githubasset.BrowserDownloadURLNotIn(i.BrowserDownloadURLNotIn...))
	}
	if i.BrowserDownloadURLGT != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLGT(*i.BrowserDownloadURLGT))
	}
	if i.BrowserDownloadURLGTE != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLGTE(*i.BrowserDownloadURLGTE))
	}
	if i.BrowserDownloadURLLT != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLLT(*i.BrowserDownloadURLLT))
	}
	if i.BrowserDownloadURLLTE != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLLTE(*i.BrowserDownloadURLLTE))
	}
	if i.BrowserDownloadURLContains != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLContains(*i.BrowserDownloadURLContains))
	}
	if i.BrowserDownloadURLHasPrefix != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLHasPrefix(*i.BrowserDownloadURLHasPrefix))
	}
	if i.BrowserDownloadURLHasSuffix != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLHasSuffix(*i.BrowserDownloadURLHasSuffix))
	}
	if i.BrowserDownloadURLEqualFold != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLEqualFold(*i.BrowserDownloadURLEqualFold))
	}
	if i.BrowserDownloadURLContainsFold != nil {
		predicates = append(predicates, githubasset.BrowserDownloadURLContainsFold(*i.BrowserDownloadURLContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, githubasset.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, githubasset.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, githubasset.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, githubasset.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, githubasset.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, githubasset.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, githubasset.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, githubasset.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, githubasset.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, githubasset.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, githubasset.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, githubasset.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, githubasset.NameContainsFold(*i.NameContainsFold))
	}
	if i.Label != nil {
		predicates = append(predicates, githubasset.LabelEQ(*i.Label))
	}
	if i.LabelNEQ != nil {
		predicates = append(predicates, githubasset.LabelNEQ(*i.LabelNEQ))
	}
	if len(i.LabelIn) > 0 {
		predicates = append(predicates, githubasset.LabelIn(i.LabelIn...))
	}
	if len(i.LabelNotIn) > 0 {
		predicates = append(predicates, githubasset.LabelNotIn(i.LabelNotIn...))
	}
	if i.LabelGT != nil {
		predicates = append(predicates, githubasset.LabelGT(*i.LabelGT))
	}
	if i.LabelGTE != nil {
		predicates = append(predicates, githubasset.LabelGTE(*i.LabelGTE))
	}
	if i.LabelLT != nil {
		predicates = append(predicates, githubasset.LabelLT(*i.LabelLT))
	}
	if i.LabelLTE != nil {
		predicates = append(predicates, githubasset.LabelLTE(*i.LabelLTE))
	}
	if i.LabelContains != nil {
		predicates = append(predicates, githubasset.LabelContains(*i.LabelContains))
	}
	if i.LabelHasPrefix != nil {
		predicates = append(predicates, githubasset.LabelHasPrefix(*i.LabelHasPrefix))
	}
	if i.LabelHasSuffix != nil {
		predicates = append(predicates, githubasset.LabelHasSuffix(*i.LabelHasSuffix))
	}
	if i.LabelIsNil {
		predicates = append(predicates, githubasset.LabelIsNil())
	}
	if i.LabelNotNil {
		predicates = append(predicates, githubasset.LabelNotNil())
	}
	if i.LabelEqualFold != nil {
		predicates = append(predicates, githubasset.LabelEqualFold(*i.LabelEqualFold))
	}
	if i.LabelContainsFold != nil {
		predicates = append(predicates, githubasset.LabelContainsFold(*i.LabelContainsFold))
	}
	if i.State != nil {
		predicates = append(predicates, githubasset.StateEQ(*i.State))
	}
	if i.StateNEQ != nil {
		predicates = append(predicates, githubasset.StateNEQ(*i.StateNEQ))
	}
	if len(i.StateIn) > 0 {
		predicates = append(predicates, githubasset.StateIn(i.StateIn...))
	}
	if len(i.StateNotIn) > 0 {
		predicates = append(predicates, githubasset.StateNotIn(i.StateNotIn...))
	}
	if i.StateGT != nil {
		predicates = append(predicates, githubasset.StateGT(*i.StateGT))
	}
	if i.StateGTE != nil {
		predicates = append(predicates, githubasset.StateGTE(*i.StateGTE))
	}
	if i.StateLT != nil {
		predicates = append(predicates, githubasset.StateLT(*i.StateLT))
	}
	if i.StateLTE != nil {
		predicates = append(predicates, githubasset.StateLTE(*i.StateLTE))
	}
	if i.StateContains != nil {
		predicates = append(predicates, githubasset.StateContains(*i.StateContains))
	}
	if i.StateHasPrefix != nil {
		predicates = append(predicates, githubasset.StateHasPrefix(*i.StateHasPrefix))
	}
	if i.StateHasSuffix != nil {
		predicates = append(predicates, githubasset.StateHasSuffix(*i.StateHasSuffix))
	}
	if i.StateIsNil {
		predicates = append(predicates, githubasset.StateIsNil())
	}
	if i.StateNotNil {
		predicates = append(predicates, githubasset.StateNotNil())
	}
	if i.StateEqualFold != nil {
		predicates = append(predicates, githubasset.StateEqualFold(*i.StateEqualFold))
	}
	if i.StateContainsFold != nil {
		predicates = append(predicates, githubasset.StateContainsFold(*i.StateContainsFold))
	}
	if i.ContentType != nil {
		predicates = append(predicates, githubasset.ContentTypeEQ(*i.ContentType))
	}
	if i.ContentTypeNEQ != nil {
		predicates = append(predicates, githubasset.ContentTypeNEQ(*i.ContentTypeNEQ))
	}
	if len(i.ContentTypeIn) > 0 {
		predicates = append(predicates, githubasset.ContentTypeIn(i.ContentTypeIn...))
	}
	if len(i.ContentTypeNotIn) > 0 {
		predicates = append(predicates, githubasset.ContentTypeNotIn(i.ContentTypeNotIn...))
	}
	if i.ContentTypeGT != nil {
		predicates = append(predicates, githubasset.ContentTypeGT(*i.ContentTypeGT))
	}
	if i.ContentTypeGTE != nil {
		predicates = append(predicates, githubasset.ContentTypeGTE(*i.ContentTypeGTE))
	}
	if i.ContentTypeLT != nil {
		predicates = append(predicates, githubasset.ContentTypeLT(*i.ContentTypeLT))
	}
	if i.ContentTypeLTE != nil {
		predicates = append(predicates, githubasset.ContentTypeLTE(*i.ContentTypeLTE))
	}
	if i.ContentTypeContains != nil {
		predicates = append(predicates, githubasset.ContentTypeContains(*i.ContentTypeContains))
	}
	if i.ContentTypeHasPrefix != nil {
		predicates = append(predicates, githubasset.ContentTypeHasPrefix(*i.ContentTypeHasPrefix))
	}
	if i.ContentTypeHasSuffix != nil {
		predicates = append(predicates, githubasset.ContentTypeHasSuffix(*i.ContentTypeHasSuffix))
	}
	if i.ContentTypeEqualFold != nil {
		predicates = append(predicates, githubasset.ContentTypeEqualFold(*i.ContentTypeEqualFold))
	}
	if i.ContentTypeContainsFold != nil {
		predicates = append(predicates, githubasset.ContentTypeContainsFold(*i.ContentTypeContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, githubasset.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, githubasset.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, githubasset.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, githubasset.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, githubasset.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, githubasset.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, githubasset.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, githubasset.SizeLTE(*i.SizeLTE))
	}
	if i.DownloadCount != nil {
		predicates = append(predicates, githubasset.DownloadCountEQ(*i.DownloadCount))
	}
	if i.DownloadCountNEQ != nil {
		predicates = append(predicates, githubasset.DownloadCountNEQ(*i.DownloadCountNEQ))
	}
	if len(i.DownloadCountIn) > 0 {
		predicates = append(predicates, githubasset.DownloadCountIn(i.DownloadCountIn...))
	}
	if len(i.DownloadCountNotIn) > 0 {
		predicates = append(predicates, githubasset.DownloadCountNotIn(i.DownloadCountNotIn...))
	}
	if i.DownloadCountGT != nil {
		predicates = append(predicates, githubasset.DownloadCountGT(*i.DownloadCountGT))
	}
	if i.DownloadCountGTE != nil {
		predicates = append(predicates, githubasset.DownloadCountGTE(*i.DownloadCountGTE))
	}
	if i.DownloadCountLT != nil {
		predicates = append(predicates, githubasset.DownloadCountLT(*i.DownloadCountLT))
	}
	if i.DownloadCountLTE != nil {
		predicates = append(predicates, githubasset.DownloadCountLTE(*i.DownloadCountLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, githubasset.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, githubasset.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, githubasset.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, githubasset.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, githubasset.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, githubasset.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, githubasset.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, githubasset.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, githubasset.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, githubasset.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, githubasset.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, githubasset.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, githubasset.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, githubasset.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, githubasset.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, githubasset.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, githubasset.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, githubasset.UpdatedAtNotNil())
	}

	if i.HasRelease != nil {
		p := githubasset.HasRelease()
		if !*i.HasRelease {
			p = githubasset.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReleaseWith) > 0 {
		with := make([]predicate.GithubRelease, 0, len(i.HasReleaseWith))
		for _, w := range i.HasReleaseWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubasset.HasReleaseWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate GithubAssetWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubasset.And(predicates...), nil
	}
}

// GithubEventWhereInput represents a where input for filtering GithubEvent queries.
type GithubEventWhereInput struct {
	Predicates []predicate.GithubEvent  `json:"-"`
	Not        *GithubEventWhereInput   `json:"not,omitempty"`
	Or         []*GithubEventWhereInput `json:"or,omitempty"`
	And        []*GithubEventWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "event_id" field predicates.
	EventID             *string  `json:"eventID,omitempty"`
	EventIDNEQ          *string  `json:"eventIDNEQ,omitempty"`
	EventIDIn           []string `json:"eventIDIn,omitempty"`
	EventIDNotIn        []string `json:"eventIDNotIn,omitempty"`
	EventIDGT           *string  `json:"eventIDGT,omitempty"`
	EventIDGTE          *string  `json:"eventIDGTE,omitempty"`
	EventIDLT           *string  `json:"eventIDLT,omitempty"`
	EventIDLTE          *string  `json:"eventIDLTE,omitempty"`
	EventIDContains     *string  `json:"eventIDContains,omitempty"`
	EventIDHasPrefix    *string  `json:"eventIDHasPrefix,omitempty"`
	EventIDHasSuffix    *string  `json:"eventIDHasSuffix,omitempty"`
	EventIDEqualFold    *string  `json:"eventIDEqualFold,omitempty"`
	EventIDContainsFold *string  `json:"eventIDContainsFold,omitempty"`

	// "event_type" field predicates.
	EventType             *string  `json:"eventType,omitempty"`
	EventTypeNEQ          *string  `json:"eventTypeNEQ,omitempty"`
	EventTypeIn           []string `json:"eventTypeIn,omitempty"`
	EventTypeNotIn        []string `json:"eventTypeNotIn,omitempty"`
	EventTypeGT           *string  `json:"eventTypeGT,omitempty"`
	EventTypeGTE          *string  `json:"eventTypeGTE,omitempty"`
	EventTypeLT           *string  `json:"eventTypeLT,omitempty"`
	EventTypeLTE          *string  `json:"eventTypeLTE,omitempty"`
	EventTypeContains     *string  `json:"eventTypeContains,omitempty"`
	EventTypeHasPrefix    *string  `json:"eventTypeHasPrefix,omitempty"`
	EventTypeHasSuffix    *string  `json:"eventTypeHasSuffix,omitempty"`
	EventTypeEqualFold    *string  `json:"eventTypeEqualFold,omitempty"`
	EventTypeContainsFold *string  `json:"eventTypeContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "public" field predicates.
	Public    *bool `json:"public,omitempty"`
	PublicNEQ *bool `json:"publicNEQ,omitempty"`

	// "actor_id" field predicates.
	ActorID      *int64  `json:"actorID,omitempty"`
	ActorIDNEQ   *int64  `json:"actorIDNEQ,omitempty"`
	ActorIDIn    []int64 `json:"actorIDIn,omitempty"`
	ActorIDNotIn []int64 `json:"actorIDNotIn,omitempty"`
	ActorIDGT    *int64  `json:"actorIDGT,omitempty"`
	ActorIDGTE   *int64  `json:"actorIDGTE,omitempty"`
	ActorIDLT    *int64  `json:"actorIDLT,omitempty"`
	ActorIDLTE   *int64  `json:"actorIDLTE,omitempty"`

	// "repo_id" field predicates.
	RepoID      *int64  `json:"repoID,omitempty"`
	RepoIDNEQ   *int64  `json:"repoIDNEQ,omitempty"`
	RepoIDIn    []int64 `json:"repoIDIn,omitempty"`
	RepoIDNotIn []int64 `json:"repoIDNotIn,omitempty"`
	RepoIDGT    *int64  `json:"repoIDGT,omitempty"`
	RepoIDGTE   *int64  `json:"repoIDGTE,omitempty"`
	RepoIDLT    *int64  `json:"repoIDLT,omitempty"`
	RepoIDLTE   *int64  `json:"repoIDLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GithubEventWhereInput) AddPredicates(predicates ...predicate.GithubEvent) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GithubEventWhereInput filter on the GithubEventQuery builder.
func (i *GithubEventWhereInput) Filter(q *GithubEventQuery) (*GithubEventQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubevents.
// An error is returned if the input is empty or invalid.
func (i *GithubEventWhereInput) P() (predicate.GithubEvent, error) {
	var predicates []predicate.GithubEvent
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubevent.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubEvent, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubevent.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubEvent, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubevent.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, githubevent.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubevent.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubevent.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubevent.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubevent.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubevent.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubevent.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubevent.IDLTE(*i.IDLTE))
	}
	if i.EventID != nil {
		predicates = append(predicates, githubevent.EventIDEQ(*i.EventID))
	}
	if i.EventIDNEQ != nil {
		predicates = append(predicates, githubevent.EventIDNEQ(*i.EventIDNEQ))
	}
	if len(i.EventIDIn) > 0 {
		predicates = append(predicates, githubevent.EventIDIn(i.EventIDIn...))
	}
	if len(i.EventIDNotIn) > 0 {
		predicates = append(predicates, githubevent.EventIDNotIn(i.EventIDNotIn...))
	}
	if i.EventIDGT != nil {
		predicates = append(predicates, githubevent.EventIDGT(*i.EventIDGT))
	}
	if i.EventIDGTE != nil {
		predicates = append(predicates, githubevent.EventIDGTE(*i.EventIDGTE))
	}
	if i.EventIDLT != nil {
		predicates = append(predicates, githubevent.EventIDLT(*i.EventIDLT))
	}
	if i.EventIDLTE != nil {
		predicates = append(predicates, githubevent.EventIDLTE(*i.EventIDLTE))
	}
	if i.EventIDContains != nil {
		predicates = append(predicates, githubevent.EventIDContains(*i.EventIDContains))
	}
	if i.EventIDHasPrefix != nil {
		predicates = append(predicates, githubevent.EventIDHasPrefix(*i.EventIDHasPrefix))
	}
	if i.EventIDHasSuffix != nil {
		predicates = append(predicates, githubevent.EventIDHasSuffix(*i.EventIDHasSuffix))
	}
	if i.EventIDEqualFold != nil {
		predicates = append(predicates, githubevent.EventIDEqualFold(*i.EventIDEqualFold))
	}
	if i.EventIDContainsFold != nil {
		predicates = append(predicates, githubevent.EventIDContainsFold(*i.EventIDContainsFold))
	}
	if i.EventType != nil {
		predicates = append(predicates, githubevent.EventTypeEQ(*i.EventType))
	}
	if i.EventTypeNEQ != nil {
		predicates = append(predicates, githubevent.EventTypeNEQ(*i.EventTypeNEQ))
	}
	if len(i.EventTypeIn) > 0 {
		predicates = append(predicates, githubevent.EventTypeIn(i.EventTypeIn...))
	}
	if len(i.EventTypeNotIn) > 0 {
		predicates = append(predicates, githubevent.EventTypeNotIn(i.EventTypeNotIn...))
	}
	if i.EventTypeGT != nil {
		predicates = append(predicates, githubevent.EventTypeGT(*i.EventTypeGT))
	}
	if i.EventTypeGTE != nil {
		predicates = append(predicates, githubevent.EventTypeGTE(*i.EventTypeGTE))
	}
	if i.EventTypeLT != nil {
		predicates = append(predicates, githubevent.EventTypeLT(*i.EventTypeLT))
	}
	if i.EventTypeLTE != nil {
		predicates = append(predicates, githubevent.EventTypeLTE(*i.EventTypeLTE))
	}
	if i.EventTypeContains != nil {
		predicates = append(predicates, githubevent.EventTypeContains(*i.EventTypeContains))
	}
	if i.EventTypeHasPrefix != nil {
		predicates = append(predicates, githubevent.EventTypeHasPrefix(*i.EventTypeHasPrefix))
	}
	if i.EventTypeHasSuffix != nil {
		predicates = append(predicates, githubevent.EventTypeHasSuffix(*i.EventTypeHasSuffix))
	}
	if i.EventTypeEqualFold != nil {
		predicates = append(predicates, githubevent.EventTypeEqualFold(*i.EventTypeEqualFold))
	}
	if i.EventTypeContainsFold != nil {
		predicates = append(predicates, githubevent.EventTypeContainsFold(*i.EventTypeContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, githubevent.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, githubevent.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, githubevent.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, githubevent.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, githubevent.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, githubevent.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, githubevent.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, githubevent.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.Public != nil {
		predicates = append(predicates, githubevent.PublicEQ(*i.Public))
	}
	if i.PublicNEQ != nil {
		predicates = append(predicates, githubevent.PublicNEQ(*i.PublicNEQ))
	}
	if i.ActorID != nil {
		predicates = append(predicates, githubevent.ActorIDEQ(*i.ActorID))
	}
	if i.ActorIDNEQ != nil {
		predicates = append(predicates, githubevent.ActorIDNEQ(*i.ActorIDNEQ))
	}
	if len(i.ActorIDIn) > 0 {
		predicates = append(predicates, githubevent.ActorIDIn(i.ActorIDIn...))
	}
	if len(i.ActorIDNotIn) > 0 {
		predicates = append(predicates, githubevent.ActorIDNotIn(i.ActorIDNotIn...))
	}
	if i.ActorIDGT != nil {
		predicates = append(predicates, githubevent.ActorIDGT(*i.ActorIDGT))
	}
	if i.ActorIDGTE != nil {
		predicates = append(predicates, githubevent.ActorIDGTE(*i.ActorIDGTE))
	}
	if i.ActorIDLT != nil {
		predicates = append(predicates, githubevent.ActorIDLT(*i.ActorIDLT))
	}
	if i.ActorIDLTE != nil {
		predicates = append(predicates, githubevent.ActorIDLTE(*i.ActorIDLTE))
	}
	if i.RepoID != nil {
		predicates = append(predicates, githubevent.RepoIDEQ(*i.RepoID))
	}
	if i.RepoIDNEQ != nil {
		predicates = append(predicates, githubevent.RepoIDNEQ(*i.RepoIDNEQ))
	}
	if len(i.RepoIDIn) > 0 {
		predicates = append(predicates, githubevent.RepoIDIn(i.RepoIDIn...))
	}
	if len(i.RepoIDNotIn) > 0 {
		predicates = append(predicates, githubevent.RepoIDNotIn(i.RepoIDNotIn...))
	}
	if i.RepoIDGT != nil {
		predicates = append(predicates, githubevent.RepoIDGT(*i.RepoIDGT))
	}
	if i.RepoIDGTE != nil {
		predicates = append(predicates, githubevent.RepoIDGTE(*i.RepoIDGTE))
	}
	if i.RepoIDLT != nil {
		predicates = append(predicates, githubevent.RepoIDLT(*i.RepoIDLT))
	}
	if i.RepoIDLTE != nil {
		predicates = append(predicates, githubevent.RepoIDLTE(*i.RepoIDLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate GithubEventWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubevent.And(predicates...), nil
	}
}

// GithubGistWhereInput represents a where input for filtering GithubGist queries.
type GithubGistWhereInput struct {
	Predicates []predicate.GithubGist  `json:"-"`
	Not        *GithubGistWhereInput   `json:"not,omitempty"`
	Or         []*GithubGistWhereInput `json:"or,omitempty"`
	And        []*GithubGistWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "gist_id" field predicates.
	GistID             *string  `json:"gistID,omitempty"`
	GistIDNEQ          *string  `json:"gistIDNEQ,omitempty"`
	GistIDIn           []string `json:"gistIDIn,omitempty"`
	GistIDNotIn        []string `json:"gistIDNotIn,omitempty"`
	GistIDGT           *string  `json:"gistIDGT,omitempty"`
	GistIDGTE          *string  `json:"gistIDGTE,omitempty"`
	GistIDLT           *string  `json:"gistIDLT,omitempty"`
	GistIDLTE          *string  `json:"gistIDLTE,omitempty"`
	GistIDContains     *string  `json:"gistIDContains,omitempty"`
	GistIDHasPrefix    *string  `json:"gistIDHasPrefix,omitempty"`
	GistIDHasSuffix    *string  `json:"gistIDHasSuffix,omitempty"`
	GistIDEqualFold    *string  `json:"gistIDEqualFold,omitempty"`
	GistIDContainsFold *string  `json:"gistIDContainsFold,omitempty"`

	// "html_url" field predicates.
	HTMLURL             *string  `json:"htmlURL,omitempty"`
	HTMLURLNEQ          *string  `json:"htmlURLNEQ,omitempty"`
	HTMLURLIn           []string `json:"htmlURLIn,omitempty"`
	HTMLURLNotIn        []string `json:"htmlURLNotIn,omitempty"`
	HTMLURLGT           *string  `json:"htmlURLGT,omitempty"`
	HTMLURLGTE          *string  `json:"htmlURLGTE,omitempty"`
	HTMLURLLT           *string  `json:"htmlURLLT,omitempty"`
	HTMLURLLTE          *string  `json:"htmlURLLTE,omitempty"`
	HTMLURLContains     *string  `json:"htmlURLContains,omitempty"`
	HTMLURLHasPrefix    *string  `json:"htmlURLHasPrefix,omitempty"`
	HTMLURLHasSuffix    *string  `json:"htmlURLHasSuffix,omitempty"`
	HTMLURLEqualFold    *string  `json:"htmlURLEqualFold,omitempty"`
	HTMLURLContainsFold *string  `json:"htmlURLContainsFold,omitempty"`

	// "public" field predicates.
	Public    *bool `json:"public,omitempty"`
	PublicNEQ *bool `json:"publicNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "language" field predicates.
	Language             *string  `json:"language,omitempty"`
	LanguageNEQ          *string  `json:"languageNEQ,omitempty"`
	LanguageIn           []string `json:"languageIn,omitempty"`
	LanguageNotIn        []string `json:"languageNotIn,omitempty"`
	LanguageGT           *string  `json:"languageGT,omitempty"`
	LanguageGTE          *string  `json:"languageGTE,omitempty"`
	LanguageLT           *string  `json:"languageLT,omitempty"`
	LanguageLTE          *string  `json:"languageLTE,omitempty"`
	LanguageContains     *string  `json:"languageContains,omitempty"`
	LanguageHasPrefix    *string  `json:"languageHasPrefix,omitempty"`
	LanguageHasSuffix    *string  `json:"languageHasSuffix,omitempty"`
	LanguageIsNil        bool     `json:"languageIsNil,omitempty"`
	LanguageNotNil       bool     `json:"languageNotNil,omitempty"`
	LanguageEqualFold    *string  `json:"languageEqualFold,omitempty"`
	LanguageContainsFold *string  `json:"languageContainsFold,omitempty"`

	// "size" field predicates.
	Size      *int64  `json:"size,omitempty"`
	SizeNEQ   *int64  `json:"sizeNEQ,omitempty"`
	SizeIn    []int64 `json:"sizeIn,omitempty"`
	SizeNotIn []int64 `json:"sizeNotIn,omitempty"`
	SizeGT    *int64  `json:"sizeGT,omitempty"`
	SizeGTE   *int64  `json:"sizeGTE,omitempty"`
	SizeLT    *int64  `json:"sizeLT,omitempty"`
	SizeLTE   *int64  `json:"sizeLTE,omitempty"`

	// "raw_url" field predicates.
	RawURL             *string  `json:"rawURL,omitempty"`
	RawURLNEQ          *string  `json:"rawURLNEQ,omitempty"`
	RawURLIn           []string `json:"rawURLIn,omitempty"`
	RawURLNotIn        []string `json:"rawURLNotIn,omitempty"`
	RawURLGT           *string  `json:"rawURLGT,omitempty"`
	RawURLGTE          *string  `json:"rawURLGTE,omitempty"`
	RawURLLT           *string  `json:"rawURLLT,omitempty"`
	RawURLLTE          *string  `json:"rawURLLTE,omitempty"`
	RawURLContains     *string  `json:"rawURLContains,omitempty"`
	RawURLHasPrefix    *string  `json:"rawURLHasPrefix,omitempty"`
	RawURLHasSuffix    *string  `json:"rawURLHasSuffix,omitempty"`
	RawURLEqualFold    *string  `json:"rawURLEqualFold,omitempty"`
	RawURLContainsFold *string  `json:"rawURLContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GithubGistWhereInput) AddPredicates(predicates ...predicate.GithubGist) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GithubGistWhereInput filter on the GithubGistQuery builder.
func (i *GithubGistWhereInput) Filter(q *GithubGistQuery) (*GithubGistQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubgists.
// An error is returned if the input is empty or invalid.
func (i *GithubGistWhereInput) P() (predicate.GithubGist, error) {
	var predicates []predicate.GithubGist
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubgist.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubGist, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubgist.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubGist, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubgist.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, githubgist.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubgist.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubgist.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubgist.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubgist.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubgist.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubgist.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubgist.IDLTE(*i.IDLTE))
	}
	if i.GistID != nil {
		predicates = append(predicates, githubgist.GistIDEQ(*i.GistID))
	}
	if i.GistIDNEQ != nil {
		predicates = append(predicates, githubgist.GistIDNEQ(*i.GistIDNEQ))
	}
	if len(i.GistIDIn) > 0 {
		predicates = append(predicates, githubgist.GistIDIn(i.GistIDIn...))
	}
	if len(i.GistIDNotIn) > 0 {
		predicates = append(predicates, githubgist.GistIDNotIn(i.GistIDNotIn...))
	}
	if i.GistIDGT != nil {
		predicates = append(predicates, githubgist.GistIDGT(*i.GistIDGT))
	}
	if i.GistIDGTE != nil {
		predicates = append(predicates, githubgist.GistIDGTE(*i.GistIDGTE))
	}
	if i.GistIDLT != nil {
		predicates = append(predicates, githubgist.GistIDLT(*i.GistIDLT))
	}
	if i.GistIDLTE != nil {
		predicates = append(predicates, githubgist.GistIDLTE(*i.GistIDLTE))
	}
	if i.GistIDContains != nil {
		predicates = append(predicates, githubgist.GistIDContains(*i.GistIDContains))
	}
	if i.GistIDHasPrefix != nil {
		predicates = append(predicates, githubgist.GistIDHasPrefix(*i.GistIDHasPrefix))
	}
	if i.GistIDHasSuffix != nil {
		predicates = append(predicates, githubgist.GistIDHasSuffix(*i.GistIDHasSuffix))
	}
	if i.GistIDEqualFold != nil {
		predicates = append(predicates, githubgist.GistIDEqualFold(*i.GistIDEqualFold))
	}
	if i.GistIDContainsFold != nil {
		predicates = append(predicates, githubgist.GistIDContainsFold(*i.GistIDContainsFold))
	}
	if i.HTMLURL != nil {
		predicates = append(predicates, githubgist.HTMLURLEQ(*i.HTMLURL))
	}
	if i.HTMLURLNEQ != nil {
		predicates = append(predicates, githubgist.HTMLURLNEQ(*i.HTMLURLNEQ))
	}
	if len(i.HTMLURLIn) > 0 {
		predicates = append(predicates, githubgist.HTMLURLIn(i.HTMLURLIn...))
	}
	if len(i.HTMLURLNotIn) > 0 {
		predicates = append(predicates, githubgist.HTMLURLNotIn(i.HTMLURLNotIn...))
	}
	if i.HTMLURLGT != nil {
		predicates = append(predicates, githubgist.HTMLURLGT(*i.HTMLURLGT))
	}
	if i.HTMLURLGTE != nil {
		predicates = append(predicates, githubgist.HTMLURLGTE(*i.HTMLURLGTE))
	}
	if i.HTMLURLLT != nil {
		predicates = append(predicates, githubgist.HTMLURLLT(*i.HTMLURLLT))
	}
	if i.HTMLURLLTE != nil {
		predicates = append(predicates, githubgist.HTMLURLLTE(*i.HTMLURLLTE))
	}
	if i.HTMLURLContains != nil {
		predicates = append(predicates, githubgist.HTMLURLContains(*i.HTMLURLContains))
	}
	if i.HTMLURLHasPrefix != nil {
		predicates = append(predicates, githubgist.HTMLURLHasPrefix(*i.HTMLURLHasPrefix))
	}
	if i.HTMLURLHasSuffix != nil {
		predicates = append(predicates, githubgist.HTMLURLHasSuffix(*i.HTMLURLHasSuffix))
	}
	if i.HTMLURLEqualFold != nil {
		predicates = append(predicates, githubgist.HTMLURLEqualFold(*i.HTMLURLEqualFold))
	}
	if i.HTMLURLContainsFold != nil {
		predicates = append(predicates, githubgist.HTMLURLContainsFold(*i.HTMLURLContainsFold))
	}
	if i.Public != nil {
		predicates = append(predicates, githubgist.PublicEQ(*i.Public))
	}
	if i.PublicNEQ != nil {
		predicates = append(predicates, githubgist.PublicNEQ(*i.PublicNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, githubgist.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, githubgist.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, githubgist.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, githubgist.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, githubgist.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, githubgist.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, githubgist.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, githubgist.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, githubgist.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, githubgist.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, githubgist.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, githubgist.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, githubgist.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, githubgist.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, githubgist.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, githubgist.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Description != nil {
		predicates = append(predicates, githubgist.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, githubgist.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, githubgist.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, githubgist.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, githubgist.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, githubgist.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, githubgist.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, githubgist.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, githubgist.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, githubgist.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, githubgist.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, githubgist.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, githubgist.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, githubgist.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, githubgist.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, githubgist.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, githubgist.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, githubgist.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, githubgist.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, githubgist.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, githubgist.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, githubgist.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, githubgist.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, githubgist.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, githubgist.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, githubgist.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, githubgist.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, githubgist.NameContainsFold(*i.NameContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, githubgist.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, githubgist.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, githubgist.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, githubgist.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, githubgist.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, githubgist.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, githubgist.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, githubgist.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, githubgist.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, githubgist.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, githubgist.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, githubgist.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, githubgist.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.Language != nil {
		predicates = append(predicates, githubgist.LanguageEQ(*i.Language))
	}
	if i.LanguageNEQ != nil {
		predicates = append(predicates, githubgist.LanguageNEQ(*i.LanguageNEQ))
	}
	if len(i.LanguageIn) > 0 {
		predicates = append(predicates, githubgist.LanguageIn(i.LanguageIn...))
	}
	if len(i.LanguageNotIn) > 0 {
		predicates = append(predicates, githubgist.LanguageNotIn(i.LanguageNotIn...))
	}
	if i.LanguageGT != nil {
		predicates = append(predicates, githubgist.LanguageGT(*i.LanguageGT))
	}
	if i.LanguageGTE != nil {
		predicates = append(predicates, githubgist.LanguageGTE(*i.LanguageGTE))
	}
	if i.LanguageLT != nil {
		predicates = append(predicates, githubgist.LanguageLT(*i.LanguageLT))
	}
	if i.LanguageLTE != nil {
		predicates = append(predicates, githubgist.LanguageLTE(*i.LanguageLTE))
	}
	if i.LanguageContains != nil {
		predicates = append(predicates, githubgist.LanguageContains(*i.LanguageContains))
	}
	if i.LanguageHasPrefix != nil {
		predicates = append(predicates, githubgist.LanguageHasPrefix(*i.LanguageHasPrefix))
	}
	if i.LanguageHasSuffix != nil {
		predicates = append(predicates, githubgist.LanguageHasSuffix(*i.LanguageHasSuffix))
	}
	if i.LanguageIsNil {
		predicates = append(predicates, githubgist.LanguageIsNil())
	}
	if i.LanguageNotNil {
		predicates = append(predicates, githubgist.LanguageNotNil())
	}
	if i.LanguageEqualFold != nil {
		predicates = append(predicates, githubgist.LanguageEqualFold(*i.LanguageEqualFold))
	}
	if i.LanguageContainsFold != nil {
		predicates = append(predicates, githubgist.LanguageContainsFold(*i.LanguageContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, githubgist.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, githubgist.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, githubgist.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, githubgist.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, githubgist.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, githubgist.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, githubgist.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, githubgist.SizeLTE(*i.SizeLTE))
	}
	if i.RawURL != nil {
		predicates = append(predicates, githubgist.RawURLEQ(*i.RawURL))
	}
	if i.RawURLNEQ != nil {
		predicates = append(predicates, githubgist.RawURLNEQ(*i.RawURLNEQ))
	}
	if len(i.RawURLIn) > 0 {
		predicates = append(predicates, githubgist.RawURLIn(i.RawURLIn...))
	}
	if len(i.RawURLNotIn) > 0 {
		predicates = append(predicates, githubgist.RawURLNotIn(i.RawURLNotIn...))
	}
	if i.RawURLGT != nil {
		predicates = append(predicates, githubgist.RawURLGT(*i.RawURLGT))
	}
	if i.RawURLGTE != nil {
		predicates = append(predicates, githubgist.RawURLGTE(*i.RawURLGTE))
	}
	if i.RawURLLT != nil {
		predicates = append(predicates, githubgist.RawURLLT(*i.RawURLLT))
	}
	if i.RawURLLTE != nil {
		predicates = append(predicates, githubgist.RawURLLTE(*i.RawURLLTE))
	}
	if i.RawURLContains != nil {
		predicates = append(predicates, githubgist.RawURLContains(*i.RawURLContains))
	}
	if i.RawURLHasPrefix != nil {
		predicates = append(predicates, githubgist.RawURLHasPrefix(*i.RawURLHasPrefix))
	}
	if i.RawURLHasSuffix != nil {
		predicates = append(predicates, githubgist.RawURLHasSuffix(*i.RawURLHasSuffix))
	}
	if i.RawURLEqualFold != nil {
		predicates = append(predicates, githubgist.RawURLEqualFold(*i.RawURLEqualFold))
	}
	if i.RawURLContainsFold != nil {
		predicates = append(predicates, githubgist.RawURLContainsFold(*i.RawURLContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, githubgist.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, githubgist.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, githubgist.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, githubgist.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, githubgist.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, githubgist.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, githubgist.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, githubgist.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, githubgist.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, githubgist.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, githubgist.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, githubgist.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, githubgist.ContentContainsFold(*i.ContentContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate GithubGistWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubgist.And(predicates...), nil
	}
}

// GithubReleaseWhereInput represents a where input for filtering GithubRelease queries.
type GithubReleaseWhereInput struct {
	Predicates []predicate.GithubRelease  `json:"-"`
	Not        *GithubReleaseWhereInput   `json:"not,omitempty"`
	Or         []*GithubReleaseWhereInput `json:"or,omitempty"`
	And        []*GithubReleaseWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "release_id" field predicates.
	ReleaseID      *int64  `json:"releaseID,omitempty"`
	ReleaseIDNEQ   *int64  `json:"releaseIDNEQ,omitempty"`
	ReleaseIDIn    []int64 `json:"releaseIDIn,omitempty"`
	ReleaseIDNotIn []int64 `json:"releaseIDNotIn,omitempty"`
	ReleaseIDGT    *int64  `json:"releaseIDGT,omitempty"`
	ReleaseIDGTE   *int64  `json:"releaseIDGTE,omitempty"`
	ReleaseIDLT    *int64  `json:"releaseIDLT,omitempty"`
	ReleaseIDLTE   *int64  `json:"releaseIDLTE,omitempty"`

	// "html_url" field predicates.
	HTMLURL             *string  `json:"htmlURL,omitempty"`
	HTMLURLNEQ          *string  `json:"htmlURLNEQ,omitempty"`
	HTMLURLIn           []string `json:"htmlURLIn,omitempty"`
	HTMLURLNotIn        []string `json:"htmlURLNotIn,omitempty"`
	HTMLURLGT           *string  `json:"htmlURLGT,omitempty"`
	HTMLURLGTE          *string  `json:"htmlURLGTE,omitempty"`
	HTMLURLLT           *string  `json:"htmlURLLT,omitempty"`
	HTMLURLLTE          *string  `json:"htmlURLLTE,omitempty"`
	HTMLURLContains     *string  `json:"htmlURLContains,omitempty"`
	HTMLURLHasPrefix    *string  `json:"htmlURLHasPrefix,omitempty"`
	HTMLURLHasSuffix    *string  `json:"htmlURLHasSuffix,omitempty"`
	HTMLURLEqualFold    *string  `json:"htmlURLEqualFold,omitempty"`
	HTMLURLContainsFold *string  `json:"htmlURLContainsFold,omitempty"`

	// "tag_name" field predicates.
	TagName             *string  `json:"tagName,omitempty"`
	TagNameNEQ          *string  `json:"tagNameNEQ,omitempty"`
	TagNameIn           []string `json:"tagNameIn,omitempty"`
	TagNameNotIn        []string `json:"tagNameNotIn,omitempty"`
	TagNameGT           *string  `json:"tagNameGT,omitempty"`
	TagNameGTE          *string  `json:"tagNameGTE,omitempty"`
	TagNameLT           *string  `json:"tagNameLT,omitempty"`
	TagNameLTE          *string  `json:"tagNameLTE,omitempty"`
	TagNameContains     *string  `json:"tagNameContains,omitempty"`
	TagNameHasPrefix    *string  `json:"tagNameHasPrefix,omitempty"`
	TagNameHasSuffix    *string  `json:"tagNameHasSuffix,omitempty"`
	TagNameEqualFold    *string  `json:"tagNameEqualFold,omitempty"`
	TagNameContainsFold *string  `json:"tagNameContainsFold,omitempty"`

	// "target_commitish" field predicates.
	TargetCommitish             *string  `json:"targetCommitish,omitempty"`
	TargetCommitishNEQ          *string  `json:"targetCommitishNEQ,omitempty"`
	TargetCommitishIn           []string `json:"targetCommitishIn,omitempty"`
	TargetCommitishNotIn        []string `json:"targetCommitishNotIn,omitempty"`
	TargetCommitishGT           *string  `json:"targetCommitishGT,omitempty"`
	TargetCommitishGTE          *string  `json:"targetCommitishGTE,omitempty"`
	TargetCommitishLT           *string  `json:"targetCommitishLT,omitempty"`
	TargetCommitishLTE          *string  `json:"targetCommitishLTE,omitempty"`
	TargetCommitishContains     *string  `json:"targetCommitishContains,omitempty"`
	TargetCommitishHasPrefix    *string  `json:"targetCommitishHasPrefix,omitempty"`
	TargetCommitishHasSuffix    *string  `json:"targetCommitishHasSuffix,omitempty"`
	TargetCommitishEqualFold    *string  `json:"targetCommitishEqualFold,omitempty"`
	TargetCommitishContainsFold *string  `json:"targetCommitishContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "draft" field predicates.
	Draft    *bool `json:"draft,omitempty"`
	DraftNEQ *bool `json:"draftNEQ,omitempty"`

	// "prerelease" field predicates.
	Prerelease    *bool `json:"prerelease,omitempty"`
	PrereleaseNEQ *bool `json:"prereleaseNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "published_at" field predicates.
	PublishedAt      *time.Time  `json:"publishedAt,omitempty"`
	PublishedAtNEQ   *time.Time  `json:"publishedAtNEQ,omitempty"`
	PublishedAtIn    []time.Time `json:"publishedAtIn,omitempty"`
	PublishedAtNotIn []time.Time `json:"publishedAtNotIn,omitempty"`
	PublishedAtGT    *time.Time  `json:"publishedAtGT,omitempty"`
	PublishedAtGTE   *time.Time  `json:"publishedAtGTE,omitempty"`
	PublishedAtLT    *time.Time  `json:"publishedAtLT,omitempty"`
	PublishedAtLTE   *time.Time  `json:"publishedAtLTE,omitempty"`

	// "repository" edge predicates.
	HasRepository     *bool                         `json:"hasRepository,omitempty"`
	HasRepositoryWith []*GithubRepositoryWhereInput `json:"hasRepositoryWith,omitempty"`

	// "assets" edge predicates.
	HasAssets     *bool                    `json:"hasAssets,omitempty"`
	HasAssetsWith []*GithubAssetWhereInput `json:"hasAssetsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GithubReleaseWhereInput) AddPredicates(predicates ...predicate.GithubRelease) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GithubReleaseWhereInput filter on the GithubReleaseQuery builder.
func (i *GithubReleaseWhereInput) Filter(q *GithubReleaseQuery) (*GithubReleaseQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubreleases.
// An error is returned if the input is empty or invalid.
func (i *GithubReleaseWhereInput) P() (predicate.GithubRelease, error) {
	var predicates []predicate.GithubRelease
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubrelease.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubRelease, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubrelease.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubRelease, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubrelease.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, githubrelease.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubrelease.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubrelease.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubrelease.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubrelease.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubrelease.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubrelease.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubrelease.IDLTE(*i.IDLTE))
	}
	if i.ReleaseID != nil {
		predicates = append(predicates, githubrelease.ReleaseIDEQ(*i.ReleaseID))
	}
	if i.ReleaseIDNEQ != nil {
		predicates = append(predicates, githubrelease.ReleaseIDNEQ(*i.ReleaseIDNEQ))
	}
	if len(i.ReleaseIDIn) > 0 {
		predicates = append(predicates, githubrelease.ReleaseIDIn(i.ReleaseIDIn...))
	}
	if len(i.ReleaseIDNotIn) > 0 {
		predicates = append(predicates, githubrelease.ReleaseIDNotIn(i.ReleaseIDNotIn...))
	}
	if i.ReleaseIDGT != nil {
		predicates = append(predicates, githubrelease.ReleaseIDGT(*i.ReleaseIDGT))
	}
	if i.ReleaseIDGTE != nil {
		predicates = append(predicates, githubrelease.ReleaseIDGTE(*i.ReleaseIDGTE))
	}
	if i.ReleaseIDLT != nil {
		predicates = append(predicates, githubrelease.ReleaseIDLT(*i.ReleaseIDLT))
	}
	if i.ReleaseIDLTE != nil {
		predicates = append(predicates, githubrelease.ReleaseIDLTE(*i.ReleaseIDLTE))
	}
	if i.HTMLURL != nil {
		predicates = append(predicates, githubrelease.HTMLURLEQ(*i.HTMLURL))
	}
	if i.HTMLURLNEQ != nil {
		predicates = append(predicates, githubrelease.HTMLURLNEQ(*i.HTMLURLNEQ))
	}
	if len(i.HTMLURLIn) > 0 {
		predicates = append(predicates, githubrelease.HTMLURLIn(i.HTMLURLIn...))
	}
	if len(i.HTMLURLNotIn) > 0 {
		predicates = append(predicates, githubrelease.HTMLURLNotIn(i.HTMLURLNotIn...))
	}
	if i.HTMLURLGT != nil {
		predicates = append(predicates, githubrelease.HTMLURLGT(*i.HTMLURLGT))
	}
	if i.HTMLURLGTE != nil {
		predicates = append(predicates, githubrelease.HTMLURLGTE(*i.HTMLURLGTE))
	}
	if i.HTMLURLLT != nil {
		predicates = append(predicates, githubrelease.HTMLURLLT(*i.HTMLURLLT))
	}
	if i.HTMLURLLTE != nil {
		predicates = append(predicates, githubrelease.HTMLURLLTE(*i.HTMLURLLTE))
	}
	if i.HTMLURLContains != nil {
		predicates = append(predicates, githubrelease.HTMLURLContains(*i.HTMLURLContains))
	}
	if i.HTMLURLHasPrefix != nil {
		predicates = append(predicates, githubrelease.HTMLURLHasPrefix(*i.HTMLURLHasPrefix))
	}
	if i.HTMLURLHasSuffix != nil {
		predicates = append(predicates, githubrelease.HTMLURLHasSuffix(*i.HTMLURLHasSuffix))
	}
	if i.HTMLURLEqualFold != nil {
		predicates = append(predicates, githubrelease.HTMLURLEqualFold(*i.HTMLURLEqualFold))
	}
	if i.HTMLURLContainsFold != nil {
		predicates = append(predicates, githubrelease.HTMLURLContainsFold(*i.HTMLURLContainsFold))
	}
	if i.TagName != nil {
		predicates = append(predicates, githubrelease.TagNameEQ(*i.TagName))
	}
	if i.TagNameNEQ != nil {
		predicates = append(predicates, githubrelease.TagNameNEQ(*i.TagNameNEQ))
	}
	if len(i.TagNameIn) > 0 {
		predicates = append(predicates, githubrelease.TagNameIn(i.TagNameIn...))
	}
	if len(i.TagNameNotIn) > 0 {
		predicates = append(predicates, githubrelease.TagNameNotIn(i.TagNameNotIn...))
	}
	if i.TagNameGT != nil {
		predicates = append(predicates, githubrelease.TagNameGT(*i.TagNameGT))
	}
	if i.TagNameGTE != nil {
		predicates = append(predicates, githubrelease.TagNameGTE(*i.TagNameGTE))
	}
	if i.TagNameLT != nil {
		predicates = append(predicates, githubrelease.TagNameLT(*i.TagNameLT))
	}
	if i.TagNameLTE != nil {
		predicates = append(predicates, githubrelease.TagNameLTE(*i.TagNameLTE))
	}
	if i.TagNameContains != nil {
		predicates = append(predicates, githubrelease.TagNameContains(*i.TagNameContains))
	}
	if i.TagNameHasPrefix != nil {
		predicates = append(predicates, githubrelease.TagNameHasPrefix(*i.TagNameHasPrefix))
	}
	if i.TagNameHasSuffix != nil {
		predicates = append(predicates, githubrelease.TagNameHasSuffix(*i.TagNameHasSuffix))
	}
	if i.TagNameEqualFold != nil {
		predicates = append(predicates, githubrelease.TagNameEqualFold(*i.TagNameEqualFold))
	}
	if i.TagNameContainsFold != nil {
		predicates = append(predicates, githubrelease.TagNameContainsFold(*i.TagNameContainsFold))
	}
	if i.TargetCommitish != nil {
		predicates = append(predicates, githubrelease.TargetCommitishEQ(*i.TargetCommitish))
	}
	if i.TargetCommitishNEQ != nil {
		predicates = append(predicates, githubrelease.TargetCommitishNEQ(*i.TargetCommitishNEQ))
	}
	if len(i.TargetCommitishIn) > 0 {
		predicates = append(predicates, githubrelease.TargetCommitishIn(i.TargetCommitishIn...))
	}
	if len(i.TargetCommitishNotIn) > 0 {
		predicates = append(predicates, githubrelease.TargetCommitishNotIn(i.TargetCommitishNotIn...))
	}
	if i.TargetCommitishGT != nil {
		predicates = append(predicates, githubrelease.TargetCommitishGT(*i.TargetCommitishGT))
	}
	if i.TargetCommitishGTE != nil {
		predicates = append(predicates, githubrelease.TargetCommitishGTE(*i.TargetCommitishGTE))
	}
	if i.TargetCommitishLT != nil {
		predicates = append(predicates, githubrelease.TargetCommitishLT(*i.TargetCommitishLT))
	}
	if i.TargetCommitishLTE != nil {
		predicates = append(predicates, githubrelease.TargetCommitishLTE(*i.TargetCommitishLTE))
	}
	if i.TargetCommitishContains != nil {
		predicates = append(predicates, githubrelease.TargetCommitishContains(*i.TargetCommitishContains))
	}
	if i.TargetCommitishHasPrefix != nil {
		predicates = append(predicates, githubrelease.TargetCommitishHasPrefix(*i.TargetCommitishHasPrefix))
	}
	if i.TargetCommitishHasSuffix != nil {
		predicates = append(predicates, githubrelease.TargetCommitishHasSuffix(*i.TargetCommitishHasSuffix))
	}
	if i.TargetCommitishEqualFold != nil {
		predicates = append(predicates, githubrelease.TargetCommitishEqualFold(*i.TargetCommitishEqualFold))
	}
	if i.TargetCommitishContainsFold != nil {
		predicates = append(predicates, githubrelease.TargetCommitishContainsFold(*i.TargetCommitishContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, githubrelease.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, githubrelease.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, githubrelease.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, githubrelease.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, githubrelease.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, githubrelease.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, githubrelease.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, githubrelease.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, githubrelease.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, githubrelease.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, githubrelease.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, githubrelease.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, githubrelease.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, githubrelease.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, githubrelease.NameContainsFold(*i.NameContainsFold))
	}
	if i.Draft != nil {
		predicates = append(predicates, githubrelease.DraftEQ(*i.Draft))
	}
	if i.DraftNEQ != nil {
		predicates = append(predicates, githubrelease.DraftNEQ(*i.DraftNEQ))
	}
	if i.Prerelease != nil {
		predicates = append(predicates, githubrelease.PrereleaseEQ(*i.Prerelease))
	}
	if i.PrereleaseNEQ != nil {
		predicates = append(predicates, githubrelease.PrereleaseNEQ(*i.PrereleaseNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, githubrelease.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, githubrelease.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, githubrelease.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, githubrelease.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, githubrelease.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, githubrelease.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, githubrelease.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, githubrelease.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.PublishedAt != nil {
		predicates = append(predicates, githubrelease.PublishedAtEQ(*i.PublishedAt))
	}
	if i.PublishedAtNEQ != nil {
		predicates = append(predicates, githubrelease.PublishedAtNEQ(*i.PublishedAtNEQ))
	}
	if len(i.PublishedAtIn) > 0 {
		predicates = append(predicates, githubrelease.PublishedAtIn(i.PublishedAtIn...))
	}
	if len(i.PublishedAtNotIn) > 0 {
		predicates = append(predicates, githubrelease.PublishedAtNotIn(i.PublishedAtNotIn...))
	}
	if i.PublishedAtGT != nil {
		predicates = append(predicates, githubrelease.PublishedAtGT(*i.PublishedAtGT))
	}
	if i.PublishedAtGTE != nil {
		predicates = append(predicates, githubrelease.PublishedAtGTE(*i.PublishedAtGTE))
	}
	if i.PublishedAtLT != nil {
		predicates = append(predicates, githubrelease.PublishedAtLT(*i.PublishedAtLT))
	}
	if i.PublishedAtLTE != nil {
		predicates = append(predicates, githubrelease.PublishedAtLTE(*i.PublishedAtLTE))
	}

	if i.HasRepository != nil {
		p := githubrelease.HasRepository()
		if !*i.HasRepository {
			p = githubrelease.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRepositoryWith) > 0 {
		with := make([]predicate.GithubRepository, 0, len(i.HasRepositoryWith))
		for _, w := range i.HasRepositoryWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubrelease.HasRepositoryWith(with...))
	}
	if i.HasAssets != nil {
		p := githubrelease.HasAssets()
		if !*i.HasAssets {
			p = githubrelease.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAssetsWith) > 0 {
		with := make([]predicate.GithubAsset, 0, len(i.HasAssetsWith))
		for _, w := range i.HasAssetsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubrelease.HasAssetsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate GithubReleaseWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubrelease.And(predicates...), nil
	}
}

// GithubRepositoryWhereInput represents a where input for filtering GithubRepository queries.
type GithubRepositoryWhereInput struct {
	Predicates []predicate.GithubRepository  `json:"-"`
	Not        *GithubRepositoryWhereInput   `json:"not,omitempty"`
	Or         []*GithubRepositoryWhereInput `json:"or,omitempty"`
	And        []*GithubRepositoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "repo_id" field predicates.
	RepoID      *int64  `json:"repoID,omitempty"`
	RepoIDNEQ   *int64  `json:"repoIDNEQ,omitempty"`
	RepoIDIn    []int64 `json:"repoIDIn,omitempty"`
	RepoIDNotIn []int64 `json:"repoIDNotIn,omitempty"`
	RepoIDGT    *int64  `json:"repoIDGT,omitempty"`
	RepoIDGTE   *int64  `json:"repoIDGTE,omitempty"`
	RepoIDLT    *int64  `json:"repoIDLT,omitempty"`
	RepoIDLTE   *int64  `json:"repoIDLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "full_name" field predicates.
	FullName             *string  `json:"fullName,omitempty"`
	FullNameNEQ          *string  `json:"fullNameNEQ,omitempty"`
	FullNameIn           []string `json:"fullNameIn,omitempty"`
	FullNameNotIn        []string `json:"fullNameNotIn,omitempty"`
	FullNameGT           *string  `json:"fullNameGT,omitempty"`
	FullNameGTE          *string  `json:"fullNameGTE,omitempty"`
	FullNameLT           *string  `json:"fullNameLT,omitempty"`
	FullNameLTE          *string  `json:"fullNameLTE,omitempty"`
	FullNameContains     *string  `json:"fullNameContains,omitempty"`
	FullNameHasPrefix    *string  `json:"fullNameHasPrefix,omitempty"`
	FullNameHasSuffix    *string  `json:"fullNameHasSuffix,omitempty"`
	FullNameEqualFold    *string  `json:"fullNameEqualFold,omitempty"`
	FullNameContainsFold *string  `json:"fullNameContainsFold,omitempty"`

	// "owner_login" field predicates.
	OwnerLogin             *string  `json:"ownerLogin,omitempty"`
	OwnerLoginNEQ          *string  `json:"ownerLoginNEQ,omitempty"`
	OwnerLoginIn           []string `json:"ownerLoginIn,omitempty"`
	OwnerLoginNotIn        []string `json:"ownerLoginNotIn,omitempty"`
	OwnerLoginGT           *string  `json:"ownerLoginGT,omitempty"`
	OwnerLoginGTE          *string  `json:"ownerLoginGTE,omitempty"`
	OwnerLoginLT           *string  `json:"ownerLoginLT,omitempty"`
	OwnerLoginLTE          *string  `json:"ownerLoginLTE,omitempty"`
	OwnerLoginContains     *string  `json:"ownerLoginContains,omitempty"`
	OwnerLoginHasPrefix    *string  `json:"ownerLoginHasPrefix,omitempty"`
	OwnerLoginHasSuffix    *string  `json:"ownerLoginHasSuffix,omitempty"`
	OwnerLoginEqualFold    *string  `json:"ownerLoginEqualFold,omitempty"`
	OwnerLoginContainsFold *string  `json:"ownerLoginContainsFold,omitempty"`

	// "public" field predicates.
	Public    *bool `json:"public,omitempty"`
	PublicNEQ *bool `json:"publicNEQ,omitempty"`

	// "html_url" field predicates.
	HTMLURL             *string  `json:"htmlURL,omitempty"`
	HTMLURLNEQ          *string  `json:"htmlURLNEQ,omitempty"`
	HTMLURLIn           []string `json:"htmlURLIn,omitempty"`
	HTMLURLNotIn        []string `json:"htmlURLNotIn,omitempty"`
	HTMLURLGT           *string  `json:"htmlURLGT,omitempty"`
	HTMLURLGTE          *string  `json:"htmlURLGTE,omitempty"`
	HTMLURLLT           *string  `json:"htmlURLLT,omitempty"`
	HTMLURLLTE          *string  `json:"htmlURLLTE,omitempty"`
	HTMLURLContains     *string  `json:"htmlURLContains,omitempty"`
	HTMLURLHasPrefix    *string  `json:"htmlURLHasPrefix,omitempty"`
	HTMLURLHasSuffix    *string  `json:"htmlURLHasSuffix,omitempty"`
	HTMLURLEqualFold    *string  `json:"htmlURLEqualFold,omitempty"`
	HTMLURLContainsFold *string  `json:"htmlURLContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "fork" field predicates.
	Fork    *bool `json:"fork,omitempty"`
	ForkNEQ *bool `json:"forkNEQ,omitempty"`

	// "homepage" field predicates.
	Homepage             *string  `json:"homepage,omitempty"`
	HomepageNEQ          *string  `json:"homepageNEQ,omitempty"`
	HomepageIn           []string `json:"homepageIn,omitempty"`
	HomepageNotIn        []string `json:"homepageNotIn,omitempty"`
	HomepageGT           *string  `json:"homepageGT,omitempty"`
	HomepageGTE          *string  `json:"homepageGTE,omitempty"`
	HomepageLT           *string  `json:"homepageLT,omitempty"`
	HomepageLTE          *string  `json:"homepageLTE,omitempty"`
	HomepageContains     *string  `json:"homepageContains,omitempty"`
	HomepageHasPrefix    *string  `json:"homepageHasPrefix,omitempty"`
	HomepageHasSuffix    *string  `json:"homepageHasSuffix,omitempty"`
	HomepageIsNil        bool     `json:"homepageIsNil,omitempty"`
	HomepageNotNil       bool     `json:"homepageNotNil,omitempty"`
	HomepageEqualFold    *string  `json:"homepageEqualFold,omitempty"`
	HomepageContainsFold *string  `json:"homepageContainsFold,omitempty"`

	// "star_count" field predicates.
	StarCount      *int  `json:"starCount,omitempty"`
	StarCountNEQ   *int  `json:"starCountNEQ,omitempty"`
	StarCountIn    []int `json:"starCountIn,omitempty"`
	StarCountNotIn []int `json:"starCountNotIn,omitempty"`
	StarCountGT    *int  `json:"starCountGT,omitempty"`
	StarCountGTE   *int  `json:"starCountGTE,omitempty"`
	StarCountLT    *int  `json:"starCountLT,omitempty"`
	StarCountLTE   *int  `json:"starCountLTE,omitempty"`

	// "default_branch" field predicates.
	DefaultBranch             *string  `json:"defaultBranch,omitempty"`
	DefaultBranchNEQ          *string  `json:"defaultBranchNEQ,omitempty"`
	DefaultBranchIn           []string `json:"defaultBranchIn,omitempty"`
	DefaultBranchNotIn        []string `json:"defaultBranchNotIn,omitempty"`
	DefaultBranchGT           *string  `json:"defaultBranchGT,omitempty"`
	DefaultBranchGTE          *string  `json:"defaultBranchGTE,omitempty"`
	DefaultBranchLT           *string  `json:"defaultBranchLT,omitempty"`
	DefaultBranchLTE          *string  `json:"defaultBranchLTE,omitempty"`
	DefaultBranchContains     *string  `json:"defaultBranchContains,omitempty"`
	DefaultBranchHasPrefix    *string  `json:"defaultBranchHasPrefix,omitempty"`
	DefaultBranchHasSuffix    *string  `json:"defaultBranchHasSuffix,omitempty"`
	DefaultBranchEqualFold    *string  `json:"defaultBranchEqualFold,omitempty"`
	DefaultBranchContainsFold *string  `json:"defaultBranchContainsFold,omitempty"`

	// "is_template" field predicates.
	IsTemplate    *bool `json:"isTemplate,omitempty"`
	IsTemplateNEQ *bool `json:"isTemplateNEQ,omitempty"`

	// "has_issues" field predicates.
	HasIssues    *bool `json:"hasIssues,omitempty"`
	HasIssuesNEQ *bool `json:"hasIssuesNEQ,omitempty"`

	// "archived" field predicates.
	Archived    *bool `json:"archived,omitempty"`
	ArchivedNEQ *bool `json:"archivedNEQ,omitempty"`

	// "pushed_at" field predicates.
	PushedAt       *time.Time  `json:"pushedAt,omitempty"`
	PushedAtNEQ    *time.Time  `json:"pushedAtNEQ,omitempty"`
	PushedAtIn     []time.Time `json:"pushedAtIn,omitempty"`
	PushedAtNotIn  []time.Time `json:"pushedAtNotIn,omitempty"`
	PushedAtGT     *time.Time  `json:"pushedAtGT,omitempty"`
	PushedAtGTE    *time.Time  `json:"pushedAtGTE,omitempty"`
	PushedAtLT     *time.Time  `json:"pushedAtLT,omitempty"`
	PushedAtLTE    *time.Time  `json:"pushedAtLTE,omitempty"`
	PushedAtIsNil  bool        `json:"pushedAtIsNil,omitempty"`
	PushedAtNotNil bool        `json:"pushedAtNotNil,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "labels" edge predicates.
	HasLabels     *bool              `json:"hasLabels,omitempty"`
	HasLabelsWith []*LabelWhereInput `json:"hasLabelsWith,omitempty"`

	// "releases" edge predicates.
	HasReleases     *bool                      `json:"hasReleases,omitempty"`
	HasReleasesWith []*GithubReleaseWhereInput `json:"hasReleasesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GithubRepositoryWhereInput) AddPredicates(predicates ...predicate.GithubRepository) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GithubRepositoryWhereInput filter on the GithubRepositoryQuery builder.
func (i *GithubRepositoryWhereInput) Filter(q *GithubRepositoryQuery) (*GithubRepositoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering githubrepositories.
// An error is returned if the input is empty or invalid.
func (i *GithubRepositoryWhereInput) P() (predicate.GithubRepository, error) {
	var predicates []predicate.GithubRepository
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, githubrepository.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GithubRepository, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, githubrepository.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GithubRepository, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, githubrepository.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, githubrepository.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, githubrepository.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, githubrepository.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, githubrepository.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, githubrepository.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, githubrepository.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, githubrepository.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, githubrepository.IDLTE(*i.IDLTE))
	}
	if i.RepoID != nil {
		predicates = append(predicates, githubrepository.RepoIDEQ(*i.RepoID))
	}
	if i.RepoIDNEQ != nil {
		predicates = append(predicates, githubrepository.RepoIDNEQ(*i.RepoIDNEQ))
	}
	if len(i.RepoIDIn) > 0 {
		predicates = append(predicates, githubrepository.RepoIDIn(i.RepoIDIn...))
	}
	if len(i.RepoIDNotIn) > 0 {
		predicates = append(predicates, githubrepository.RepoIDNotIn(i.RepoIDNotIn...))
	}
	if i.RepoIDGT != nil {
		predicates = append(predicates, githubrepository.RepoIDGT(*i.RepoIDGT))
	}
	if i.RepoIDGTE != nil {
		predicates = append(predicates, githubrepository.RepoIDGTE(*i.RepoIDGTE))
	}
	if i.RepoIDLT != nil {
		predicates = append(predicates, githubrepository.RepoIDLT(*i.RepoIDLT))
	}
	if i.RepoIDLTE != nil {
		predicates = append(predicates, githubrepository.RepoIDLTE(*i.RepoIDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, githubrepository.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, githubrepository.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, githubrepository.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, githubrepository.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, githubrepository.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, githubrepository.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, githubrepository.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, githubrepository.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, githubrepository.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, githubrepository.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, githubrepository.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, githubrepository.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, githubrepository.NameContainsFold(*i.NameContainsFold))
	}
	if i.FullName != nil {
		predicates = append(predicates, githubrepository.FullNameEQ(*i.FullName))
	}
	if i.FullNameNEQ != nil {
		predicates = append(predicates, githubrepository.FullNameNEQ(*i.FullNameNEQ))
	}
	if len(i.FullNameIn) > 0 {
		predicates = append(predicates, githubrepository.FullNameIn(i.FullNameIn...))
	}
	if len(i.FullNameNotIn) > 0 {
		predicates = append(predicates, githubrepository.FullNameNotIn(i.FullNameNotIn...))
	}
	if i.FullNameGT != nil {
		predicates = append(predicates, githubrepository.FullNameGT(*i.FullNameGT))
	}
	if i.FullNameGTE != nil {
		predicates = append(predicates, githubrepository.FullNameGTE(*i.FullNameGTE))
	}
	if i.FullNameLT != nil {
		predicates = append(predicates, githubrepository.FullNameLT(*i.FullNameLT))
	}
	if i.FullNameLTE != nil {
		predicates = append(predicates, githubrepository.FullNameLTE(*i.FullNameLTE))
	}
	if i.FullNameContains != nil {
		predicates = append(predicates, githubrepository.FullNameContains(*i.FullNameContains))
	}
	if i.FullNameHasPrefix != nil {
		predicates = append(predicates, githubrepository.FullNameHasPrefix(*i.FullNameHasPrefix))
	}
	if i.FullNameHasSuffix != nil {
		predicates = append(predicates, githubrepository.FullNameHasSuffix(*i.FullNameHasSuffix))
	}
	if i.FullNameEqualFold != nil {
		predicates = append(predicates, githubrepository.FullNameEqualFold(*i.FullNameEqualFold))
	}
	if i.FullNameContainsFold != nil {
		predicates = append(predicates, githubrepository.FullNameContainsFold(*i.FullNameContainsFold))
	}
	if i.OwnerLogin != nil {
		predicates = append(predicates, githubrepository.OwnerLoginEQ(*i.OwnerLogin))
	}
	if i.OwnerLoginNEQ != nil {
		predicates = append(predicates, githubrepository.OwnerLoginNEQ(*i.OwnerLoginNEQ))
	}
	if len(i.OwnerLoginIn) > 0 {
		predicates = append(predicates, githubrepository.OwnerLoginIn(i.OwnerLoginIn...))
	}
	if len(i.OwnerLoginNotIn) > 0 {
		predicates = append(predicates, githubrepository.OwnerLoginNotIn(i.OwnerLoginNotIn...))
	}
	if i.OwnerLoginGT != nil {
		predicates = append(predicates, githubrepository.OwnerLoginGT(*i.OwnerLoginGT))
	}
	if i.OwnerLoginGTE != nil {
		predicates = append(predicates, githubrepository.OwnerLoginGTE(*i.OwnerLoginGTE))
	}
	if i.OwnerLoginLT != nil {
		predicates = append(predicates, githubrepository.OwnerLoginLT(*i.OwnerLoginLT))
	}
	if i.OwnerLoginLTE != nil {
		predicates = append(predicates, githubrepository.OwnerLoginLTE(*i.OwnerLoginLTE))
	}
	if i.OwnerLoginContains != nil {
		predicates = append(predicates, githubrepository.OwnerLoginContains(*i.OwnerLoginContains))
	}
	if i.OwnerLoginHasPrefix != nil {
		predicates = append(predicates, githubrepository.OwnerLoginHasPrefix(*i.OwnerLoginHasPrefix))
	}
	if i.OwnerLoginHasSuffix != nil {
		predicates = append(predicates, githubrepository.OwnerLoginHasSuffix(*i.OwnerLoginHasSuffix))
	}
	if i.OwnerLoginEqualFold != nil {
		predicates = append(predicates, githubrepository.OwnerLoginEqualFold(*i.OwnerLoginEqualFold))
	}
	if i.OwnerLoginContainsFold != nil {
		predicates = append(predicates, githubrepository.OwnerLoginContainsFold(*i.OwnerLoginContainsFold))
	}
	if i.Public != nil {
		predicates = append(predicates, githubrepository.PublicEQ(*i.Public))
	}
	if i.PublicNEQ != nil {
		predicates = append(predicates, githubrepository.PublicNEQ(*i.PublicNEQ))
	}
	if i.HTMLURL != nil {
		predicates = append(predicates, githubrepository.HTMLURLEQ(*i.HTMLURL))
	}
	if i.HTMLURLNEQ != nil {
		predicates = append(predicates, githubrepository.HTMLURLNEQ(*i.HTMLURLNEQ))
	}
	if len(i.HTMLURLIn) > 0 {
		predicates = append(predicates, githubrepository.HTMLURLIn(i.HTMLURLIn...))
	}
	if len(i.HTMLURLNotIn) > 0 {
		predicates = append(predicates, githubrepository.HTMLURLNotIn(i.HTMLURLNotIn...))
	}
	if i.HTMLURLGT != nil {
		predicates = append(predicates, githubrepository.HTMLURLGT(*i.HTMLURLGT))
	}
	if i.HTMLURLGTE != nil {
		predicates = append(predicates, githubrepository.HTMLURLGTE(*i.HTMLURLGTE))
	}
	if i.HTMLURLLT != nil {
		predicates = append(predicates, githubrepository.HTMLURLLT(*i.HTMLURLLT))
	}
	if i.HTMLURLLTE != nil {
		predicates = append(predicates, githubrepository.HTMLURLLTE(*i.HTMLURLLTE))
	}
	if i.HTMLURLContains != nil {
		predicates = append(predicates, githubrepository.HTMLURLContains(*i.HTMLURLContains))
	}
	if i.HTMLURLHasPrefix != nil {
		predicates = append(predicates, githubrepository.HTMLURLHasPrefix(*i.HTMLURLHasPrefix))
	}
	if i.HTMLURLHasSuffix != nil {
		predicates = append(predicates, githubrepository.HTMLURLHasSuffix(*i.HTMLURLHasSuffix))
	}
	if i.HTMLURLEqualFold != nil {
		predicates = append(predicates, githubrepository.HTMLURLEqualFold(*i.HTMLURLEqualFold))
	}
	if i.HTMLURLContainsFold != nil {
		predicates = append(predicates, githubrepository.HTMLURLContainsFold(*i.HTMLURLContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, githubrepository.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, githubrepository.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, githubrepository.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, githubrepository.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, githubrepository.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, githubrepository.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, githubrepository.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, githubrepository.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, githubrepository.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, githubrepository.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, githubrepository.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, githubrepository.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, githubrepository.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, githubrepository.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, githubrepository.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Fork != nil {
		predicates = append(predicates, githubrepository.ForkEQ(*i.Fork))
	}
	if i.ForkNEQ != nil {
		predicates = append(predicates, githubrepository.ForkNEQ(*i.ForkNEQ))
	}
	if i.Homepage != nil {
		predicates = append(predicates, githubrepository.HomepageEQ(*i.Homepage))
	}
	if i.HomepageNEQ != nil {
		predicates = append(predicates, githubrepository.HomepageNEQ(*i.HomepageNEQ))
	}
	if len(i.HomepageIn) > 0 {
		predicates = append(predicates, githubrepository.HomepageIn(i.HomepageIn...))
	}
	if len(i.HomepageNotIn) > 0 {
		predicates = append(predicates, githubrepository.HomepageNotIn(i.HomepageNotIn...))
	}
	if i.HomepageGT != nil {
		predicates = append(predicates, githubrepository.HomepageGT(*i.HomepageGT))
	}
	if i.HomepageGTE != nil {
		predicates = append(predicates, githubrepository.HomepageGTE(*i.HomepageGTE))
	}
	if i.HomepageLT != nil {
		predicates = append(predicates, githubrepository.HomepageLT(*i.HomepageLT))
	}
	if i.HomepageLTE != nil {
		predicates = append(predicates, githubrepository.HomepageLTE(*i.HomepageLTE))
	}
	if i.HomepageContains != nil {
		predicates = append(predicates, githubrepository.HomepageContains(*i.HomepageContains))
	}
	if i.HomepageHasPrefix != nil {
		predicates = append(predicates, githubrepository.HomepageHasPrefix(*i.HomepageHasPrefix))
	}
	if i.HomepageHasSuffix != nil {
		predicates = append(predicates, githubrepository.HomepageHasSuffix(*i.HomepageHasSuffix))
	}
	if i.HomepageIsNil {
		predicates = append(predicates, githubrepository.HomepageIsNil())
	}
	if i.HomepageNotNil {
		predicates = append(predicates, githubrepository.HomepageNotNil())
	}
	if i.HomepageEqualFold != nil {
		predicates = append(predicates, githubrepository.HomepageEqualFold(*i.HomepageEqualFold))
	}
	if i.HomepageContainsFold != nil {
		predicates = append(predicates, githubrepository.HomepageContainsFold(*i.HomepageContainsFold))
	}
	if i.StarCount != nil {
		predicates = append(predicates, githubrepository.StarCountEQ(*i.StarCount))
	}
	if i.StarCountNEQ != nil {
		predicates = append(predicates, githubrepository.StarCountNEQ(*i.StarCountNEQ))
	}
	if len(i.StarCountIn) > 0 {
		predicates = append(predicates, githubrepository.StarCountIn(i.StarCountIn...))
	}
	if len(i.StarCountNotIn) > 0 {
		predicates = append(predicates, githubrepository.StarCountNotIn(i.StarCountNotIn...))
	}
	if i.StarCountGT != nil {
		predicates = append(predicates, githubrepository.StarCountGT(*i.StarCountGT))
	}
	if i.StarCountGTE != nil {
		predicates = append(predicates, githubrepository.StarCountGTE(*i.StarCountGTE))
	}
	if i.StarCountLT != nil {
		predicates = append(predicates, githubrepository.StarCountLT(*i.StarCountLT))
	}
	if i.StarCountLTE != nil {
		predicates = append(predicates, githubrepository.StarCountLTE(*i.StarCountLTE))
	}
	if i.DefaultBranch != nil {
		predicates = append(predicates, githubrepository.DefaultBranchEQ(*i.DefaultBranch))
	}
	if i.DefaultBranchNEQ != nil {
		predicates = append(predicates, githubrepository.DefaultBranchNEQ(*i.DefaultBranchNEQ))
	}
	if len(i.DefaultBranchIn) > 0 {
		predicates = append(predicates, githubrepository.DefaultBranchIn(i.DefaultBranchIn...))
	}
	if len(i.DefaultBranchNotIn) > 0 {
		predicates = append(predicates, githubrepository.DefaultBranchNotIn(i.DefaultBranchNotIn...))
	}
	if i.DefaultBranchGT != nil {
		predicates = append(predicates, githubrepository.DefaultBranchGT(*i.DefaultBranchGT))
	}
	if i.DefaultBranchGTE != nil {
		predicates = append(predicates, githubrepository.DefaultBranchGTE(*i.DefaultBranchGTE))
	}
	if i.DefaultBranchLT != nil {
		predicates = append(predicates, githubrepository.DefaultBranchLT(*i.DefaultBranchLT))
	}
	if i.DefaultBranchLTE != nil {
		predicates = append(predicates, githubrepository.DefaultBranchLTE(*i.DefaultBranchLTE))
	}
	if i.DefaultBranchContains != nil {
		predicates = append(predicates, githubrepository.DefaultBranchContains(*i.DefaultBranchContains))
	}
	if i.DefaultBranchHasPrefix != nil {
		predicates = append(predicates, githubrepository.DefaultBranchHasPrefix(*i.DefaultBranchHasPrefix))
	}
	if i.DefaultBranchHasSuffix != nil {
		predicates = append(predicates, githubrepository.DefaultBranchHasSuffix(*i.DefaultBranchHasSuffix))
	}
	if i.DefaultBranchEqualFold != nil {
		predicates = append(predicates, githubrepository.DefaultBranchEqualFold(*i.DefaultBranchEqualFold))
	}
	if i.DefaultBranchContainsFold != nil {
		predicates = append(predicates, githubrepository.DefaultBranchContainsFold(*i.DefaultBranchContainsFold))
	}
	if i.IsTemplate != nil {
		predicates = append(predicates, githubrepository.IsTemplateEQ(*i.IsTemplate))
	}
	if i.IsTemplateNEQ != nil {
		predicates = append(predicates, githubrepository.IsTemplateNEQ(*i.IsTemplateNEQ))
	}
	if i.HasIssues != nil {
		predicates = append(predicates, githubrepository.HasIssuesEQ(*i.HasIssues))
	}
	if i.HasIssuesNEQ != nil {
		predicates = append(predicates, githubrepository.HasIssuesNEQ(*i.HasIssuesNEQ))
	}
	if i.Archived != nil {
		predicates = append(predicates, githubrepository.ArchivedEQ(*i.Archived))
	}
	if i.ArchivedNEQ != nil {
		predicates = append(predicates, githubrepository.ArchivedNEQ(*i.ArchivedNEQ))
	}
	if i.PushedAt != nil {
		predicates = append(predicates, githubrepository.PushedAtEQ(*i.PushedAt))
	}
	if i.PushedAtNEQ != nil {
		predicates = append(predicates, githubrepository.PushedAtNEQ(*i.PushedAtNEQ))
	}
	if len(i.PushedAtIn) > 0 {
		predicates = append(predicates, githubrepository.PushedAtIn(i.PushedAtIn...))
	}
	if len(i.PushedAtNotIn) > 0 {
		predicates = append(predicates, githubrepository.PushedAtNotIn(i.PushedAtNotIn...))
	}
	if i.PushedAtGT != nil {
		predicates = append(predicates, githubrepository.PushedAtGT(*i.PushedAtGT))
	}
	if i.PushedAtGTE != nil {
		predicates = append(predicates, githubrepository.PushedAtGTE(*i.PushedAtGTE))
	}
	if i.PushedAtLT != nil {
		predicates = append(predicates, githubrepository.PushedAtLT(*i.PushedAtLT))
	}
	if i.PushedAtLTE != nil {
		predicates = append(predicates, githubrepository.PushedAtLTE(*i.PushedAtLTE))
	}
	if i.PushedAtIsNil {
		predicates = append(predicates, githubrepository.PushedAtIsNil())
	}
	if i.PushedAtNotNil {
		predicates = append(predicates, githubrepository.PushedAtNotNil())
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, githubrepository.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, githubrepository.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, githubrepository.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, githubrepository.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, githubrepository.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, githubrepository.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, githubrepository.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, githubrepository.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, githubrepository.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, githubrepository.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, githubrepository.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, githubrepository.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, githubrepository.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, githubrepository.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, githubrepository.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, githubrepository.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, githubrepository.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, githubrepository.UpdatedAtNotNil())
	}

	if i.HasLabels != nil {
		p := githubrepository.HasLabels()
		if !*i.HasLabels {
			p = githubrepository.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLabelsWith) > 0 {
		with := make([]predicate.Label, 0, len(i.HasLabelsWith))
		for _, w := range i.HasLabelsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubrepository.HasLabelsWith(with...))
	}
	if i.HasReleases != nil {
		p := githubrepository.HasReleases()
		if !*i.HasReleases {
			p = githubrepository.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReleasesWith) > 0 {
		with := make([]predicate.GithubRelease, 0, len(i.HasReleasesWith))
		for _, w := range i.HasReleasesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, githubrepository.HasReleasesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate GithubRepositoryWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return githubrepository.And(predicates...), nil
	}
}

// LabelWhereInput represents a where input for filtering Label queries.
type LabelWhereInput struct {
	Predicates []predicate.Label  `json:"-"`
	Not        *LabelWhereInput   `json:"not,omitempty"`
	Or         []*LabelWhereInput `json:"or,omitempty"`
	And        []*LabelWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "github_repositories" edge predicates.
	HasGithubRepositories     *bool                         `json:"hasGithubRepositories,omitempty"`
	HasGithubRepositoriesWith []*GithubRepositoryWhereInput `json:"hasGithubRepositoriesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LabelWhereInput) AddPredicates(predicates ...predicate.Label) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LabelWhereInput filter on the LabelQuery builder.
func (i *LabelWhereInput) Filter(q *LabelQuery) (*LabelQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering labels.
// An error is returned if the input is empty or invalid.
func (i *LabelWhereInput) P() (predicate.Label, error) {
	var predicates []predicate.Label
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, label.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Label, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, label.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Label, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, label.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, label.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, label.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, label.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, label.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, label.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, label.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, label.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, label.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, label.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, label.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, label.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, label.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, label.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, label.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, label.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, label.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, label.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, label.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, label.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, label.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, label.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, label.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, label.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, label.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, label.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, label.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, label.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, label.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, label.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, label.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, label.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, label.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, label.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, label.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, label.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, label.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, label.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasPosts != nil {
		p := label.HasPosts()
		if !*i.HasPosts {
			p = label.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, label.HasPostsWith(with...))
	}
	if i.HasGithubRepositories != nil {
		p := label.HasGithubRepositories()
		if !*i.HasGithubRepositories {
			p = label.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGithubRepositoriesWith) > 0 {
		with := make([]predicate.GithubRepository, 0, len(i.HasGithubRepositoriesWith))
		for _, w := range i.HasGithubRepositoriesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, label.HasGithubRepositoriesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate LabelWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return label.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "content_html" field predicates.
	ContentHTML             *string  `json:"contentHTML,omitempty"`
	ContentHTMLNEQ          *string  `json:"contentHTMLNEQ,omitempty"`
	ContentHTMLIn           []string `json:"contentHTMLIn,omitempty"`
	ContentHTMLNotIn        []string `json:"contentHTMLNotIn,omitempty"`
	ContentHTMLGT           *string  `json:"contentHTMLGT,omitempty"`
	ContentHTMLGTE          *string  `json:"contentHTMLGTE,omitempty"`
	ContentHTMLLT           *string  `json:"contentHTMLLT,omitempty"`
	ContentHTMLLTE          *string  `json:"contentHTMLLTE,omitempty"`
	ContentHTMLContains     *string  `json:"contentHTMLContains,omitempty"`
	ContentHTMLHasPrefix    *string  `json:"contentHTMLHasPrefix,omitempty"`
	ContentHTMLHasSuffix    *string  `json:"contentHTMLHasSuffix,omitempty"`
	ContentHTMLEqualFold    *string  `json:"contentHTMLEqualFold,omitempty"`
	ContentHTMLContainsFold *string  `json:"contentHTMLContainsFold,omitempty"`

	// "summary" field predicates.
	Summary             *string  `json:"summary,omitempty"`
	SummaryNEQ          *string  `json:"summaryNEQ,omitempty"`
	SummaryIn           []string `json:"summaryIn,omitempty"`
	SummaryNotIn        []string `json:"summaryNotIn,omitempty"`
	SummaryGT           *string  `json:"summaryGT,omitempty"`
	SummaryGTE          *string  `json:"summaryGTE,omitempty"`
	SummaryLT           *string  `json:"summaryLT,omitempty"`
	SummaryLTE          *string  `json:"summaryLTE,omitempty"`
	SummaryContains     *string  `json:"summaryContains,omitempty"`
	SummaryHasPrefix    *string  `json:"summaryHasPrefix,omitempty"`
	SummaryHasSuffix    *string  `json:"summaryHasSuffix,omitempty"`
	SummaryEqualFold    *string  `json:"summaryEqualFold,omitempty"`
	SummaryContainsFold *string  `json:"summaryContainsFold,omitempty"`

	// "published_at" field predicates.
	PublishedAt      *time.Time  `json:"publishedAt,omitempty"`
	PublishedAtNEQ   *time.Time  `json:"publishedAtNEQ,omitempty"`
	PublishedAtIn    []time.Time `json:"publishedAtIn,omitempty"`
	PublishedAtNotIn []time.Time `json:"publishedAtNotIn,omitempty"`
	PublishedAtGT    *time.Time  `json:"publishedAtGT,omitempty"`
	PublishedAtGTE   *time.Time  `json:"publishedAtGTE,omitempty"`
	PublishedAtLT    *time.Time  `json:"publishedAtLT,omitempty"`
	PublishedAtLTE   *time.Time  `json:"publishedAtLTE,omitempty"`

	// "view_count" field predicates.
	ViewCount      *int  `json:"viewCount,omitempty"`
	ViewCountNEQ   *int  `json:"viewCountNEQ,omitempty"`
	ViewCountIn    []int `json:"viewCountIn,omitempty"`
	ViewCountNotIn []int `json:"viewCountNotIn,omitempty"`
	ViewCountGT    *int  `json:"viewCountGT,omitempty"`
	ViewCountGTE   *int  `json:"viewCountGTE,omitempty"`
	ViewCountLT    *int  `json:"viewCountLT,omitempty"`
	ViewCountLTE   *int  `json:"viewCountLTE,omitempty"`

	// "author" edge predicates.
	HasAuthor     *bool             `json:"hasAuthor,omitempty"`
	HasAuthorWith []*UserWhereInput `json:"hasAuthorWith,omitempty"`

	// "labels" edge predicates.
	HasLabels     *bool              `json:"hasLabels,omitempty"`
	HasLabelsWith []*LabelWhereInput `json:"hasLabelsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, post.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, post.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, post.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, post.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, post.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, post.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, post.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, post.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, post.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, post.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, post.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, post.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, post.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, post.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, post.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, post.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Slug != nil {
		predicates = append(predicates, post.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, post.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, post.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, post.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, post.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, post.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, post.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, post.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, post.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, post.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, post.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, post.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, post.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Title != nil {
		predicates = append(predicates, post.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, post.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, post.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, post.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, post.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, post.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, post.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, post.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, post.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, post.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, post.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, post.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, post.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, post.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, post.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, post.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, post.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, post.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, post.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, post.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.ContentHTML != nil {
		predicates = append(predicates, post.ContentHTMLEQ(*i.ContentHTML))
	}
	if i.ContentHTMLNEQ != nil {
		predicates = append(predicates, post.ContentHTMLNEQ(*i.ContentHTMLNEQ))
	}
	if len(i.ContentHTMLIn) > 0 {
		predicates = append(predicates, post.ContentHTMLIn(i.ContentHTMLIn...))
	}
	if len(i.ContentHTMLNotIn) > 0 {
		predicates = append(predicates, post.ContentHTMLNotIn(i.ContentHTMLNotIn...))
	}
	if i.ContentHTMLGT != nil {
		predicates = append(predicates, post.ContentHTMLGT(*i.ContentHTMLGT))
	}
	if i.ContentHTMLGTE != nil {
		predicates = append(predicates, post.ContentHTMLGTE(*i.ContentHTMLGTE))
	}
	if i.ContentHTMLLT != nil {
		predicates = append(predicates, post.ContentHTMLLT(*i.ContentHTMLLT))
	}
	if i.ContentHTMLLTE != nil {
		predicates = append(predicates, post.ContentHTMLLTE(*i.ContentHTMLLTE))
	}
	if i.ContentHTMLContains != nil {
		predicates = append(predicates, post.ContentHTMLContains(*i.ContentHTMLContains))
	}
	if i.ContentHTMLHasPrefix != nil {
		predicates = append(predicates, post.ContentHTMLHasPrefix(*i.ContentHTMLHasPrefix))
	}
	if i.ContentHTMLHasSuffix != nil {
		predicates = append(predicates, post.ContentHTMLHasSuffix(*i.ContentHTMLHasSuffix))
	}
	if i.ContentHTMLEqualFold != nil {
		predicates = append(predicates, post.ContentHTMLEqualFold(*i.ContentHTMLEqualFold))
	}
	if i.ContentHTMLContainsFold != nil {
		predicates = append(predicates, post.ContentHTMLContainsFold(*i.ContentHTMLContainsFold))
	}
	if i.Summary != nil {
		predicates = append(predicates, post.SummaryEQ(*i.Summary))
	}
	if i.SummaryNEQ != nil {
		predicates = append(predicates, post.SummaryNEQ(*i.SummaryNEQ))
	}
	if len(i.SummaryIn) > 0 {
		predicates = append(predicates, post.SummaryIn(i.SummaryIn...))
	}
	if len(i.SummaryNotIn) > 0 {
		predicates = append(predicates, post.SummaryNotIn(i.SummaryNotIn...))
	}
	if i.SummaryGT != nil {
		predicates = append(predicates, post.SummaryGT(*i.SummaryGT))
	}
	if i.SummaryGTE != nil {
		predicates = append(predicates, post.SummaryGTE(*i.SummaryGTE))
	}
	if i.SummaryLT != nil {
		predicates = append(predicates, post.SummaryLT(*i.SummaryLT))
	}
	if i.SummaryLTE != nil {
		predicates = append(predicates, post.SummaryLTE(*i.SummaryLTE))
	}
	if i.SummaryContains != nil {
		predicates = append(predicates, post.SummaryContains(*i.SummaryContains))
	}
	if i.SummaryHasPrefix != nil {
		predicates = append(predicates, post.SummaryHasPrefix(*i.SummaryHasPrefix))
	}
	if i.SummaryHasSuffix != nil {
		predicates = append(predicates, post.SummaryHasSuffix(*i.SummaryHasSuffix))
	}
	if i.SummaryEqualFold != nil {
		predicates = append(predicates, post.SummaryEqualFold(*i.SummaryEqualFold))
	}
	if i.SummaryContainsFold != nil {
		predicates = append(predicates, post.SummaryContainsFold(*i.SummaryContainsFold))
	}
	if i.PublishedAt != nil {
		predicates = append(predicates, post.PublishedAtEQ(*i.PublishedAt))
	}
	if i.PublishedAtNEQ != nil {
		predicates = append(predicates, post.PublishedAtNEQ(*i.PublishedAtNEQ))
	}
	if len(i.PublishedAtIn) > 0 {
		predicates = append(predicates, post.PublishedAtIn(i.PublishedAtIn...))
	}
	if len(i.PublishedAtNotIn) > 0 {
		predicates = append(predicates, post.PublishedAtNotIn(i.PublishedAtNotIn...))
	}
	if i.PublishedAtGT != nil {
		predicates = append(predicates, post.PublishedAtGT(*i.PublishedAtGT))
	}
	if i.PublishedAtGTE != nil {
		predicates = append(predicates, post.PublishedAtGTE(*i.PublishedAtGTE))
	}
	if i.PublishedAtLT != nil {
		predicates = append(predicates, post.PublishedAtLT(*i.PublishedAtLT))
	}
	if i.PublishedAtLTE != nil {
		predicates = append(predicates, post.PublishedAtLTE(*i.PublishedAtLTE))
	}
	if i.ViewCount != nil {
		predicates = append(predicates, post.ViewCountEQ(*i.ViewCount))
	}
	if i.ViewCountNEQ != nil {
		predicates = append(predicates, post.ViewCountNEQ(*i.ViewCountNEQ))
	}
	if len(i.ViewCountIn) > 0 {
		predicates = append(predicates, post.ViewCountIn(i.ViewCountIn...))
	}
	if len(i.ViewCountNotIn) > 0 {
		predicates = append(predicates, post.ViewCountNotIn(i.ViewCountNotIn...))
	}
	if i.ViewCountGT != nil {
		predicates = append(predicates, post.ViewCountGT(*i.ViewCountGT))
	}
	if i.ViewCountGTE != nil {
		predicates = append(predicates, post.ViewCountGTE(*i.ViewCountGTE))
	}
	if i.ViewCountLT != nil {
		predicates = append(predicates, post.ViewCountLT(*i.ViewCountLT))
	}
	if i.ViewCountLTE != nil {
		predicates = append(predicates, post.ViewCountLTE(*i.ViewCountLTE))
	}

	if i.HasAuthor != nil {
		p := post.HasAuthor()
		if !*i.HasAuthor {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasAuthorWith))
		for _, w := range i.HasAuthorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasAuthorWith(with...))
	}
	if i.HasLabels != nil {
		p := post.HasLabels()
		if !*i.HasLabels {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLabelsWith) > 0 {
		with := make([]predicate.Label, 0, len(i.HasLabelsWith))
		for _, w := range i.HasLabelsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasLabelsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate PostWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "user_id" field predicates.
	UserID      *int  `json:"userID,omitempty"`
	UserIDNEQ   *int  `json:"userIDNEQ,omitempty"`
	UserIDIn    []int `json:"userIDIn,omitempty"`
	UserIDNotIn []int `json:"userIDNotIn,omitempty"`
	UserIDGT    *int  `json:"userIDGT,omitempty"`
	UserIDGTE   *int  `json:"userIDGTE,omitempty"`
	UserIDLT    *int  `json:"userIDLT,omitempty"`
	UserIDLTE   *int  `json:"userIDLTE,omitempty"`

	// "login" field predicates.
	Login             *string  `json:"login,omitempty"`
	LoginNEQ          *string  `json:"loginNEQ,omitempty"`
	LoginIn           []string `json:"loginIn,omitempty"`
	LoginNotIn        []string `json:"loginNotIn,omitempty"`
	LoginGT           *string  `json:"loginGT,omitempty"`
	LoginGTE          *string  `json:"loginGTE,omitempty"`
	LoginLT           *string  `json:"loginLT,omitempty"`
	LoginLTE          *string  `json:"loginLTE,omitempty"`
	LoginContains     *string  `json:"loginContains,omitempty"`
	LoginHasPrefix    *string  `json:"loginHasPrefix,omitempty"`
	LoginHasSuffix    *string  `json:"loginHasSuffix,omitempty"`
	LoginEqualFold    *string  `json:"loginEqualFold,omitempty"`
	LoginContainsFold *string  `json:"loginContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLIsNil        bool     `json:"avatarURLIsNil,omitempty"`
	AvatarURLNotNil       bool     `json:"avatarURLNotNil,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "html_url" field predicates.
	HTMLURL             *string  `json:"htmlURL,omitempty"`
	HTMLURLNEQ          *string  `json:"htmlURLNEQ,omitempty"`
	HTMLURLIn           []string `json:"htmlURLIn,omitempty"`
	HTMLURLNotIn        []string `json:"htmlURLNotIn,omitempty"`
	HTMLURLGT           *string  `json:"htmlURLGT,omitempty"`
	HTMLURLGTE          *string  `json:"htmlURLGTE,omitempty"`
	HTMLURLLT           *string  `json:"htmlURLLT,omitempty"`
	HTMLURLLTE          *string  `json:"htmlURLLTE,omitempty"`
	HTMLURLContains     *string  `json:"htmlURLContains,omitempty"`
	HTMLURLHasPrefix    *string  `json:"htmlURLHasPrefix,omitempty"`
	HTMLURLHasSuffix    *string  `json:"htmlURLHasSuffix,omitempty"`
	HTMLURLIsNil        bool     `json:"htmlURLIsNil,omitempty"`
	HTMLURLNotNil       bool     `json:"htmlURLNotNil,omitempty"`
	HTMLURLEqualFold    *string  `json:"htmlURLEqualFold,omitempty"`
	HTMLURLContainsFold *string  `json:"htmlURLContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "location" field predicates.
	Location             *string  `json:"location,omitempty"`
	LocationNEQ          *string  `json:"locationNEQ,omitempty"`
	LocationIn           []string `json:"locationIn,omitempty"`
	LocationNotIn        []string `json:"locationNotIn,omitempty"`
	LocationGT           *string  `json:"locationGT,omitempty"`
	LocationGTE          *string  `json:"locationGTE,omitempty"`
	LocationLT           *string  `json:"locationLT,omitempty"`
	LocationLTE          *string  `json:"locationLTE,omitempty"`
	LocationContains     *string  `json:"locationContains,omitempty"`
	LocationHasPrefix    *string  `json:"locationHasPrefix,omitempty"`
	LocationHasSuffix    *string  `json:"locationHasSuffix,omitempty"`
	LocationIsNil        bool     `json:"locationIsNil,omitempty"`
	LocationNotNil       bool     `json:"locationNotNil,omitempty"`
	LocationEqualFold    *string  `json:"locationEqualFold,omitempty"`
	LocationContainsFold *string  `json:"locationContainsFold,omitempty"`

	// "bio" field predicates.
	Bio             *string  `json:"bio,omitempty"`
	BioNEQ          *string  `json:"bioNEQ,omitempty"`
	BioIn           []string `json:"bioIn,omitempty"`
	BioNotIn        []string `json:"bioNotIn,omitempty"`
	BioGT           *string  `json:"bioGT,omitempty"`
	BioGTE          *string  `json:"bioGTE,omitempty"`
	BioLT           *string  `json:"bioLT,omitempty"`
	BioLTE          *string  `json:"bioLTE,omitempty"`
	BioContains     *string  `json:"bioContains,omitempty"`
	BioHasPrefix    *string  `json:"bioHasPrefix,omitempty"`
	BioHasSuffix    *string  `json:"bioHasSuffix,omitempty"`
	BioIsNil        bool     `json:"bioIsNil,omitempty"`
	BioNotNil       bool     `json:"bioNotNil,omitempty"`
	BioEqualFold    *string  `json:"bioEqualFold,omitempty"`
	BioContainsFold *string  `json:"bioContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, user.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, user.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, user.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, user.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, user.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, user.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, user.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, user.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, user.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, user.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, user.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, user.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, user.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, user.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, user.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, user.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, user.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, user.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, user.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, user.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, user.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, user.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, user.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, user.UserIDLTE(*i.UserIDLTE))
	}
	if i.Login != nil {
		predicates = append(predicates, user.LoginEQ(*i.Login))
	}
	if i.LoginNEQ != nil {
		predicates = append(predicates, user.LoginNEQ(*i.LoginNEQ))
	}
	if len(i.LoginIn) > 0 {
		predicates = append(predicates, user.LoginIn(i.LoginIn...))
	}
	if len(i.LoginNotIn) > 0 {
		predicates = append(predicates, user.LoginNotIn(i.LoginNotIn...))
	}
	if i.LoginGT != nil {
		predicates = append(predicates, user.LoginGT(*i.LoginGT))
	}
	if i.LoginGTE != nil {
		predicates = append(predicates, user.LoginGTE(*i.LoginGTE))
	}
	if i.LoginLT != nil {
		predicates = append(predicates, user.LoginLT(*i.LoginLT))
	}
	if i.LoginLTE != nil {
		predicates = append(predicates, user.LoginLTE(*i.LoginLTE))
	}
	if i.LoginContains != nil {
		predicates = append(predicates, user.LoginContains(*i.LoginContains))
	}
	if i.LoginHasPrefix != nil {
		predicates = append(predicates, user.LoginHasPrefix(*i.LoginHasPrefix))
	}
	if i.LoginHasSuffix != nil {
		predicates = append(predicates, user.LoginHasSuffix(*i.LoginHasSuffix))
	}
	if i.LoginEqualFold != nil {
		predicates = append(predicates, user.LoginEqualFold(*i.LoginEqualFold))
	}
	if i.LoginContainsFold != nil {
		predicates = append(predicates, user.LoginContainsFold(*i.LoginContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, user.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, user.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLIsNil {
		predicates = append(predicates, user.AvatarURLIsNil())
	}
	if i.AvatarURLNotNil {
		predicates = append(predicates, user.AvatarURLNotNil())
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}
	if i.HTMLURL != nil {
		predicates = append(predicates, user.HTMLURLEQ(*i.HTMLURL))
	}
	if i.HTMLURLNEQ != nil {
		predicates = append(predicates, user.HTMLURLNEQ(*i.HTMLURLNEQ))
	}
	if len(i.HTMLURLIn) > 0 {
		predicates = append(predicates, user.HTMLURLIn(i.HTMLURLIn...))
	}
	if len(i.HTMLURLNotIn) > 0 {
		predicates = append(predicates, user.HTMLURLNotIn(i.HTMLURLNotIn...))
	}
	if i.HTMLURLGT != nil {
		predicates = append(predicates, user.HTMLURLGT(*i.HTMLURLGT))
	}
	if i.HTMLURLGTE != nil {
		predicates = append(predicates, user.HTMLURLGTE(*i.HTMLURLGTE))
	}
	if i.HTMLURLLT != nil {
		predicates = append(predicates, user.HTMLURLLT(*i.HTMLURLLT))
	}
	if i.HTMLURLLTE != nil {
		predicates = append(predicates, user.HTMLURLLTE(*i.HTMLURLLTE))
	}
	if i.HTMLURLContains != nil {
		predicates = append(predicates, user.HTMLURLContains(*i.HTMLURLContains))
	}
	if i.HTMLURLHasPrefix != nil {
		predicates = append(predicates, user.HTMLURLHasPrefix(*i.HTMLURLHasPrefix))
	}
	if i.HTMLURLHasSuffix != nil {
		predicates = append(predicates, user.HTMLURLHasSuffix(*i.HTMLURLHasSuffix))
	}
	if i.HTMLURLIsNil {
		predicates = append(predicates, user.HTMLURLIsNil())
	}
	if i.HTMLURLNotNil {
		predicates = append(predicates, user.HTMLURLNotNil())
	}
	if i.HTMLURLEqualFold != nil {
		predicates = append(predicates, user.HTMLURLEqualFold(*i.HTMLURLEqualFold))
	}
	if i.HTMLURLContainsFold != nil {
		predicates = append(predicates, user.HTMLURLContainsFold(*i.HTMLURLContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, user.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, user.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Location != nil {
		predicates = append(predicates, user.LocationEQ(*i.Location))
	}
	if i.LocationNEQ != nil {
		predicates = append(predicates, user.LocationNEQ(*i.LocationNEQ))
	}
	if len(i.LocationIn) > 0 {
		predicates = append(predicates, user.LocationIn(i.LocationIn...))
	}
	if len(i.LocationNotIn) > 0 {
		predicates = append(predicates, user.LocationNotIn(i.LocationNotIn...))
	}
	if i.LocationGT != nil {
		predicates = append(predicates, user.LocationGT(*i.LocationGT))
	}
	if i.LocationGTE != nil {
		predicates = append(predicates, user.LocationGTE(*i.LocationGTE))
	}
	if i.LocationLT != nil {
		predicates = append(predicates, user.LocationLT(*i.LocationLT))
	}
	if i.LocationLTE != nil {
		predicates = append(predicates, user.LocationLTE(*i.LocationLTE))
	}
	if i.LocationContains != nil {
		predicates = append(predicates, user.LocationContains(*i.LocationContains))
	}
	if i.LocationHasPrefix != nil {
		predicates = append(predicates, user.LocationHasPrefix(*i.LocationHasPrefix))
	}
	if i.LocationHasSuffix != nil {
		predicates = append(predicates, user.LocationHasSuffix(*i.LocationHasSuffix))
	}
	if i.LocationIsNil {
		predicates = append(predicates, user.LocationIsNil())
	}
	if i.LocationNotNil {
		predicates = append(predicates, user.LocationNotNil())
	}
	if i.LocationEqualFold != nil {
		predicates = append(predicates, user.LocationEqualFold(*i.LocationEqualFold))
	}
	if i.LocationContainsFold != nil {
		predicates = append(predicates, user.LocationContainsFold(*i.LocationContainsFold))
	}
	if i.Bio != nil {
		predicates = append(predicates, user.BioEQ(*i.Bio))
	}
	if i.BioNEQ != nil {
		predicates = append(predicates, user.BioNEQ(*i.BioNEQ))
	}
	if len(i.BioIn) > 0 {
		predicates = append(predicates, user.BioIn(i.BioIn...))
	}
	if len(i.BioNotIn) > 0 {
		predicates = append(predicates, user.BioNotIn(i.BioNotIn...))
	}
	if i.BioGT != nil {
		predicates = append(predicates, user.BioGT(*i.BioGT))
	}
	if i.BioGTE != nil {
		predicates = append(predicates, user.BioGTE(*i.BioGTE))
	}
	if i.BioLT != nil {
		predicates = append(predicates, user.BioLT(*i.BioLT))
	}
	if i.BioLTE != nil {
		predicates = append(predicates, user.BioLTE(*i.BioLTE))
	}
	if i.BioContains != nil {
		predicates = append(predicates, user.BioContains(*i.BioContains))
	}
	if i.BioHasPrefix != nil {
		predicates = append(predicates, user.BioHasPrefix(*i.BioHasPrefix))
	}
	if i.BioHasSuffix != nil {
		predicates = append(predicates, user.BioHasSuffix(*i.BioHasSuffix))
	}
	if i.BioIsNil {
		predicates = append(predicates, user.BioIsNil())
	}
	if i.BioNotNil {
		predicates = append(predicates, user.BioNotNil())
	}
	if i.BioEqualFold != nil {
		predicates = append(predicates, user.BioEqualFold(*i.BioEqualFold))
	}
	if i.BioContainsFold != nil {
		predicates = append(predicates, user.BioContainsFold(*i.BioContainsFold))
	}

	if i.HasPosts != nil {
		p := user.HasPosts()
		if !*i.HasPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPostsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("empty predicate UserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
