// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"time"
)

// CreateLabelInput represents a mutation input for creating labels.
type CreateLabelInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Name       string
	PostIDs    []int
}

// Mutate applies the CreateLabelInput on the LabelCreate builder.
func (i *CreateLabelInput) Mutate(m *LabelCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if ids := i.PostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateLabelInput on the create builder.
func (c *LabelCreate) SetInput(i CreateLabelInput) *LabelCreate {
	i.Mutate(c)
	return c
}

// UpdateLabelInput represents a mutation input for updating labels.
type UpdateLabelInput struct {
	UpdateTime    *time.Time
	Name          *string
	AddPostIDs    []int
	RemovePostIDs []int
}

// Mutate applies the UpdateLabelInput on the LabelMutation.
func (i *UpdateLabelInput) Mutate(m *LabelMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddPostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
	if ids := i.RemovePostIDs; len(ids) > 0 {
		m.RemovePostIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateLabelInput on the update builder.
func (u *LabelUpdate) SetInput(i UpdateLabelInput) *LabelUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateLabelInput on the update-one builder.
func (u *LabelUpdateOne) SetInput(i UpdateLabelInput) *LabelUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	CreateTime  *time.Time
	UpdateTime  *time.Time
	Slug        string
	Title       string
	Content     string
	PublishedAt *time.Time
	AuthorID    int
	LabelIDs    []int
}

// Mutate applies the CreatePostInput on the PostCreate builder.
func (i *CreatePostInput) Mutate(m *PostCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetSlug(i.Slug)
	m.SetTitle(i.Title)
	m.SetContent(i.Content)
	if v := i.PublishedAt; v != nil {
		m.SetPublishedAt(*v)
	}
	m.SetAuthorID(i.AuthorID)
	if ids := i.LabelIDs; len(ids) > 0 {
		m.AddLabelIDs(ids...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the create builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c)
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	UpdateTime     *time.Time
	Slug           *string
	Title          *string
	Content        *string
	PublishedAt    *time.Time
	AuthorID       *int
	ClearAuthor    bool
	AddLabelIDs    []int
	RemoveLabelIDs []int
}

// Mutate applies the UpdatePostInput on the PostMutation.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.PublishedAt; v != nil {
		m.SetPublishedAt(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if ids := i.AddLabelIDs; len(ids) > 0 {
		m.AddLabelIDs(ids...)
	}
	if ids := i.RemoveLabelIDs; len(ids) > 0 {
		m.RemoveLabelIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the update builder.
func (u *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdatePostInput on the update-one builder.
func (u *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	UserID     int
	Login      string
	Name       *string
	AvatarURL  *string
	Email      *string
	Location   *string
	Bio        *string
	PostIDs    []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetUserID(i.UserID)
	m.SetLogin(i.Login)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if v := i.Bio; v != nil {
		m.SetBio(*v)
	}
	if ids := i.PostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdateTime     *time.Time
	Login          *string
	Name           *string
	ClearName      bool
	AvatarURL      *string
	ClearAvatarURL bool
	Email          *string
	ClearEmail     bool
	Location       *string
	ClearLocation  bool
	Bio            *string
	ClearBio       bool
	AddPostIDs     []int
	RemovePostIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Login; v != nil {
		m.SetLogin(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearAvatarURL {
		m.ClearAvatarURL()
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearLocation {
		m.ClearLocation()
	}
	if v := i.Location; v != nil {
		m.SetLocation(*v)
	}
	if i.ClearBio {
		m.ClearBio()
	}
	if v := i.Bio; v != nil {
		m.SetBio(*v)
	}
	if ids := i.AddPostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
	if ids := i.RemovePostIDs; len(ids) > 0 {
		m.RemovePostIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
