// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/lrstanley/liam.sh/internal/ent/label"
	"github.com/lrstanley/liam.sh/internal/ent/post"
	"github.com/lrstanley/liam.sh/internal/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ge *GithubEventQuery) CollectFields(ctx context.Context, satisfies ...string) (*GithubEventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ge, nil
	}
	if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ge, nil
}

func (ge *GithubEventQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type githubeventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GithubEventPaginateOption
}

func newGithubEventPaginateArgs(rv map[string]interface{}) *githubeventPaginateArgs {
	args := &githubeventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GithubEventOrder{Field: &GithubEventOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGithubEventOrder(order))
			}
		case *GithubEventOrder:
			if v != nil {
				args.opts = append(args.opts, WithGithubEventOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GithubEventWhereInput); ok {
		args.opts = append(args.opts, WithGithubEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LabelQuery) CollectFields(ctx context.Context, satisfies ...string) (*LabelQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *LabelQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "posts":
			var (
				path  = append(path, field.Name)
				query = &PostQuery{config: l.config}
			)
			args := newPostPaginateArgs(fieldArgs(ctx, new(PostWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newPostPager(args.opts)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			if !hasCollectedField(ctx, append(path, edgesField)...) || args.first != nil && *args.first == 0 || args.last != nil && *args.last == 0 {
				if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
					query := query.Clone()
					l.loadTotal = append(l.loadTotal, func(ctx context.Context, nodes []*Label) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"label_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(label.PostsTable)
							s.Join(joinT).On(s.C(post.FieldID), joinT.C(label.PostsPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(label.PostsPrimaryKey[0]), ids...))
							s.Select(joinT.C(label.PostsPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(label.PostsPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							nodes[i].Edges.totalCount[0] = &n
						}
						return nil
					})
				}
				continue
			}
			if (args.after != nil || args.first != nil || args.before != nil || args.last != nil) && hasCollectedField(ctx, append(path, totalCountField)...) {
				query := query.Clone()
				l.loadTotal = append(l.loadTotal, func(ctx context.Context, nodes []*Label) error {
					ids := make([]driver.Value, len(nodes))
					for i := range nodes {
						ids[i] = nodes[i].ID
					}
					var v []struct {
						NodeID int `sql:"label_id"`
						Count  int `sql:"count"`
					}
					query.Where(func(s *sql.Selector) {
						joinT := sql.Table(label.PostsTable)
						s.Join(joinT).On(s.C(post.FieldID), joinT.C(label.PostsPrimaryKey[1]))
						s.Where(sql.InValues(joinT.C(label.PostsPrimaryKey[0]), ids...))
						s.Select(joinT.C(label.PostsPrimaryKey[0]), sql.Count("*"))
						s.GroupBy(joinT.C(label.PostsPrimaryKey[0]))
					})
					if err := query.Select().Scan(ctx, &v); err != nil {
						return err
					}
					m := make(map[int]int, len(v))
					for i := range v {
						m[v[i].NodeID] = v[i].Count
					}
					for i := range nodes {
						n := m[nodes[i].ID]
						nodes[i].Edges.totalCount[0] = &n
					}
					return nil
				})
			} else {
				l.loadTotal = append(l.loadTotal, func(_ context.Context, nodes []*Label) error {
					for i := range nodes {
						n := len(nodes[i].Edges.Posts)
						nodes[i].Edges.totalCount[0] = &n
					}
					return nil
				})
			}
			query = pager.applyCursors(query, args.after, args.before)
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(label.PostsPrimaryKey[0], limit, pager.orderExpr(args.last != nil))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query, args.last != nil)
			}
			path = append(path, edgesField, nodeField)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			l.withPosts = query
		}
	}
	return nil
}

type labelPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LabelPaginateOption
}

func newLabelPaginateArgs(rv map[string]interface{}) *labelPaginateArgs {
	args := &labelPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &LabelOrder{Field: &LabelOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithLabelOrder(order))
			}
		case *LabelOrder:
			if v != nil {
				args.opts = append(args.opts, WithLabelOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*LabelWhereInput); ok {
		args.opts = append(args.opts, WithLabelFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PostQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return po, nil
	}
	if err := po.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return po, nil
}

func (po *PostQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "author":
			var (
				path  = append(path, field.Name)
				query = &UserQuery{config: po.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			po.withAuthor = query
		case "labels":
			var (
				path  = append(path, field.Name)
				query = &LabelQuery{config: po.config}
			)
			args := newLabelPaginateArgs(fieldArgs(ctx, new(LabelWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newLabelPager(args.opts)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			if !hasCollectedField(ctx, append(path, edgesField)...) || args.first != nil && *args.first == 0 || args.last != nil && *args.last == 0 {
				if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
					query := query.Clone()
					po.loadTotal = append(po.loadTotal, func(ctx context.Context, nodes []*Post) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"post_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(post.LabelsTable)
							s.Join(joinT).On(s.C(label.FieldID), joinT.C(post.LabelsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(post.LabelsPrimaryKey[1]), ids...))
							s.Select(joinT.C(post.LabelsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(post.LabelsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							nodes[i].Edges.totalCount[1] = &n
						}
						return nil
					})
				}
				continue
			}
			if (args.after != nil || args.first != nil || args.before != nil || args.last != nil) && hasCollectedField(ctx, append(path, totalCountField)...) {
				query := query.Clone()
				po.loadTotal = append(po.loadTotal, func(ctx context.Context, nodes []*Post) error {
					ids := make([]driver.Value, len(nodes))
					for i := range nodes {
						ids[i] = nodes[i].ID
					}
					var v []struct {
						NodeID int `sql:"post_id"`
						Count  int `sql:"count"`
					}
					query.Where(func(s *sql.Selector) {
						joinT := sql.Table(post.LabelsTable)
						s.Join(joinT).On(s.C(label.FieldID), joinT.C(post.LabelsPrimaryKey[0]))
						s.Where(sql.InValues(joinT.C(post.LabelsPrimaryKey[1]), ids...))
						s.Select(joinT.C(post.LabelsPrimaryKey[1]), sql.Count("*"))
						s.GroupBy(joinT.C(post.LabelsPrimaryKey[1]))
					})
					if err := query.Select().Scan(ctx, &v); err != nil {
						return err
					}
					m := make(map[int]int, len(v))
					for i := range v {
						m[v[i].NodeID] = v[i].Count
					}
					for i := range nodes {
						n := m[nodes[i].ID]
						nodes[i].Edges.totalCount[1] = &n
					}
					return nil
				})
			} else {
				po.loadTotal = append(po.loadTotal, func(_ context.Context, nodes []*Post) error {
					for i := range nodes {
						n := len(nodes[i].Edges.Labels)
						nodes[i].Edges.totalCount[1] = &n
					}
					return nil
				})
			}
			query = pager.applyCursors(query, args.after, args.before)
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(post.LabelsPrimaryKey[1], limit, pager.orderExpr(args.last != nil))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query, args.last != nil)
			}
			path = append(path, edgesField, nodeField)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			po.withLabels = query
		}
	}
	return nil
}

type postPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostPaginateOption
}

func newPostPaginateArgs(rv map[string]interface{}) *postPaginateArgs {
	args := &postPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &PostOrder{Field: &PostOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostOrder(order))
			}
		case *PostOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostWhereInput); ok {
		args.opts = append(args.opts, WithPostFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "posts":
			var (
				path  = append(path, field.Name)
				query = &PostQuery{config: u.config}
			)
			args := newPostPaginateArgs(fieldArgs(ctx, new(PostWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newPostPager(args.opts)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			if !hasCollectedField(ctx, append(path, edgesField)...) || args.first != nil && *args.first == 0 || args.last != nil && *args.last == 0 {
				if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"user_posts"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(user.PostsColumn, ids...))
						})
						if err := query.GroupBy(user.PostsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							nodes[i].Edges.totalCount[0] = &n
						}
						return nil
					})
				}
				continue
			}
			if (args.after != nil || args.first != nil || args.before != nil || args.last != nil) && hasCollectedField(ctx, append(path, totalCountField)...) {
				query := query.Clone()
				u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
					ids := make([]driver.Value, len(nodes))
					for i := range nodes {
						ids[i] = nodes[i].ID
					}
					var v []struct {
						NodeID int `sql:"user_posts"`
						Count  int `sql:"count"`
					}
					query.Where(func(s *sql.Selector) {
						s.Where(sql.InValues(user.PostsColumn, ids...))
					})
					if err := query.GroupBy(user.PostsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
						return err
					}
					m := make(map[int]int, len(v))
					for i := range v {
						m[v[i].NodeID] = v[i].Count
					}
					for i := range nodes {
						n := m[nodes[i].ID]
						nodes[i].Edges.totalCount[0] = &n
					}
					return nil
				})
			} else {
				u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
					for i := range nodes {
						n := len(nodes[i].Edges.Posts)
						nodes[i].Edges.totalCount[0] = &n
					}
					return nil
				})
			}
			query = pager.applyCursors(query, args.after, args.before)
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.PostsColumn, limit, pager.orderExpr(args.last != nil))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query, args.last != nil)
			}
			path = append(path, edgesField, nodeField)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.withPosts = query
		}
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Name == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = &c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
