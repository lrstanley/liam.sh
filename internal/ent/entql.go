// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"github.com/lrstanley/liam.sh/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime: {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUserID:     {Type: field.TypeInt, Column: user.FieldUserID},
			user.FieldLogin:      {Type: field.TypeString, Column: user.FieldLogin},
			user.FieldName:       {Type: field.TypeString, Column: user.FieldName},
			user.FieldAvatarURL:  {Type: field.TypeString, Column: user.FieldAvatarURL},
			user.FieldEmail:      {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldLocation:   {Type: field.TypeString, Column: user.FieldLocation},
			user.FieldBio:        {Type: field.TypeString, Column: user.FieldBio},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq.config, uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m.config, m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *UserFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(user.FieldUserID))
}

// WhereLogin applies the entql string predicate on the login field.
func (f *UserFilter) WhereLogin(p entql.StringP) {
	f.Where(p.Field(user.FieldLogin))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereAvatarURL applies the entql string predicate on the avatar_url field.
func (f *UserFilter) WhereAvatarURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarURL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereLocation applies the entql string predicate on the location field.
func (f *UserFilter) WhereLocation(p entql.StringP) {
	f.Where(p.Field(user.FieldLocation))
}

// WhereBio applies the entql string predicate on the bio field.
func (f *UserFilter) WhereBio(p entql.StringP) {
	f.Where(p.Field(user.FieldBio))
}
