// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package githubrelease

import (
	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the githubrelease type in the database.
	Label = "github_release"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReleaseID holds the string denoting the release_id field in the database.
	FieldReleaseID = "release_id"
	// FieldHTMLURL holds the string denoting the html_url field in the database.
	FieldHTMLURL = "html_url"
	// FieldTagName holds the string denoting the tag_name field in the database.
	FieldTagName = "tag_name"
	// FieldTargetCommitish holds the string denoting the target_commitish field in the database.
	FieldTargetCommitish = "target_commitish"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDraft holds the string denoting the draft field in the database.
	FieldDraft = "draft"
	// FieldPrerelease holds the string denoting the prerelease field in the database.
	FieldPrerelease = "prerelease"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgeAssets holds the string denoting the assets edge name in mutations.
	EdgeAssets = "assets"
	// Table holds the table name of the githubrelease in the database.
	Table = "github_releases"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "github_releases"
	// RepositoryInverseTable is the table name for the GithubRepository entity.
	// It exists in this package in order to avoid circular dependency with the "githubrepository" package.
	RepositoryInverseTable = "github_repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "github_repository_releases"
	// AssetsTable is the table that holds the assets relation/edge.
	AssetsTable = "github_assets"
	// AssetsInverseTable is the table name for the GithubAsset entity.
	// It exists in this package in order to avoid circular dependency with the "githubasset" package.
	AssetsInverseTable = "github_assets"
	// AssetsColumn is the table column denoting the assets relation/edge.
	AssetsColumn = "github_release_assets"
)

// Columns holds all SQL columns for githubrelease fields.
var Columns = []string{
	FieldID,
	FieldReleaseID,
	FieldHTMLURL,
	FieldTagName,
	FieldTargetCommitish,
	FieldName,
	FieldDraft,
	FieldPrerelease,
	FieldCreatedAt,
	FieldPublishedAt,
	FieldAuthor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "github_releases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"github_repository_releases",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/lrstanley/liam.sh/internal/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// ReleaseIDValidator is a validator for the "release_id" field. It is called by the builders before save.
	ReleaseIDValidator func(int64) error
	// HTMLURLValidator is a validator for the "html_url" field. It is called by the builders before save.
	HTMLURLValidator func(string) error
	// TagNameValidator is a validator for the "tag_name" field. It is called by the builders before save.
	TagNameValidator func(string) error
	// TargetCommitishValidator is a validator for the "target_commitish" field. It is called by the builders before save.
	TargetCommitishValidator func(string) error
)
