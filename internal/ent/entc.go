//go:build ignore

package main

import (
	"log"

	"ariga.io/ogent"
	"entgo.io/contrib/entoas"
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	"github.com/ogen-go/ogen"
)

const header = `// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.`

func checkError(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	spec := ogen.NewSpec().AddServers(
		&ogen.Server{
			Description: "development server",
			URL:         "http://localhost:8080/api/query",
		},
		&ogen.Server{
			Description: "production server",
			URL:         "https://liam.sh/api/query",
		},
	)
	oas, err := entoas.NewExtension(entoas.Spec(spec))
	checkError(err)

	ogent, err := ogent.NewExtension(spec)
	checkError(err)

	// egq, err := entgql.NewExtension(
	// 	entgql.WithWhereFilters(true),
	// 	entgql.WithSchemaPath("../handlers/graphql/ent.graphql"),
	// 	entgql.WithConfigPath("../handlers/graphql/gqlgen.yml"),
	// )
	// checkError(err)

	err = entc.Generate(
		"./schema",
		&gen.Config{
			Header: header,
			Features: []gen.Feature{
				gen.FeaturePrivacy,
				gen.FeatureEntQL,
				gen.FeatureSnapshot,
				gen.FeatureUpsert,
			},
		},
		entc.Extensions(ogent, oas),
	)
	checkError(err)
}
