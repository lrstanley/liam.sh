//go:build ignore

package main

import (
	"log"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
)

const header = `// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.`

func checkError(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	egq, err := entgql.NewExtension(
		entgql.WithConfigPath("./database/graphql/gqlgen.yml"),
		entgql.WithSchemaGenerator(),
		entgql.WithSchemaPath("./database/graphql/schema/ent.gql"),
		entgql.WithWhereInputs(true),
	)
	checkError(err)

	err = entc.Generate(
		"./database/schema",
		&gen.Config{
			Target:  "./ent/",
			Schema:  "github.com/lrstanley/liam.sh/internal/database/schema",
			Package: "github.com/lrstanley/liam.sh/internal/ent",
			Header:  header,
			Features: []gen.Feature{
				gen.FeaturePrivacy,
				gen.FeatureEntQL,
				gen.FeatureSnapshot,
				gen.FeatureUpsert,
			},
		},
		entc.Extensions(egq),
	)
	checkError(err)
}
