// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package githubgist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/liam.sh/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GistID applies equality check predicate on the "gist_id" field. It's identical to GistIDEQ.
func GistID(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGistID), v))
	})
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublic), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// RawURL applies equality check predicate on the "raw_url" field. It's identical to RawURLEQ.
func RawURL(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawURL), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// GistIDEQ applies the EQ predicate on the "gist_id" field.
func GistIDEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGistID), v))
	})
}

// GistIDNEQ applies the NEQ predicate on the "gist_id" field.
func GistIDNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGistID), v))
	})
}

// GistIDIn applies the In predicate on the "gist_id" field.
func GistIDIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGistID), v...))
	})
}

// GistIDNotIn applies the NotIn predicate on the "gist_id" field.
func GistIDNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGistID), v...))
	})
}

// GistIDGT applies the GT predicate on the "gist_id" field.
func GistIDGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGistID), v))
	})
}

// GistIDGTE applies the GTE predicate on the "gist_id" field.
func GistIDGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGistID), v))
	})
}

// GistIDLT applies the LT predicate on the "gist_id" field.
func GistIDLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGistID), v))
	})
}

// GistIDLTE applies the LTE predicate on the "gist_id" field.
func GistIDLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGistID), v))
	})
}

// GistIDContains applies the Contains predicate on the "gist_id" field.
func GistIDContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGistID), v))
	})
}

// GistIDHasPrefix applies the HasPrefix predicate on the "gist_id" field.
func GistIDHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGistID), v))
	})
}

// GistIDHasSuffix applies the HasSuffix predicate on the "gist_id" field.
func GistIDHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGistID), v))
	})
}

// GistIDEqualFold applies the EqualFold predicate on the "gist_id" field.
func GistIDEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGistID), v))
	})
}

// GistIDContainsFold applies the ContainsFold predicate on the "gist_id" field.
func GistIDContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGistID), v))
	})
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTMLURL), v))
	})
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublic), v))
	})
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublic), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLanguage)))
	})
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLanguage)))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSize), v))
	})
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSize), v...))
	})
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSize), v...))
	})
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSize), v))
	})
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSize), v))
	})
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSize), v))
	})
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSize), v))
	})
}

// RawURLEQ applies the EQ predicate on the "raw_url" field.
func RawURLEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRawURL), v))
	})
}

// RawURLNEQ applies the NEQ predicate on the "raw_url" field.
func RawURLNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRawURL), v))
	})
}

// RawURLIn applies the In predicate on the "raw_url" field.
func RawURLIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRawURL), v...))
	})
}

// RawURLNotIn applies the NotIn predicate on the "raw_url" field.
func RawURLNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRawURL), v...))
	})
}

// RawURLGT applies the GT predicate on the "raw_url" field.
func RawURLGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRawURL), v))
	})
}

// RawURLGTE applies the GTE predicate on the "raw_url" field.
func RawURLGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRawURL), v))
	})
}

// RawURLLT applies the LT predicate on the "raw_url" field.
func RawURLLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRawURL), v))
	})
}

// RawURLLTE applies the LTE predicate on the "raw_url" field.
func RawURLLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRawURL), v))
	})
}

// RawURLContains applies the Contains predicate on the "raw_url" field.
func RawURLContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRawURL), v))
	})
}

// RawURLHasPrefix applies the HasPrefix predicate on the "raw_url" field.
func RawURLHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRawURL), v))
	})
}

// RawURLHasSuffix applies the HasSuffix predicate on the "raw_url" field.
func RawURLHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRawURL), v))
	})
}

// RawURLEqualFold applies the EqualFold predicate on the "raw_url" field.
func RawURLEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRawURL), v))
	})
}

// RawURLContainsFold applies the ContainsFold predicate on the "raw_url" field.
func RawURLContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRawURL), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.GithubGist {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GithubGist) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GithubGist) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GithubGist) predicate.GithubGist {
	return predicate.GithubGist(func(s *sql.Selector) {
		p(s.Not())
	})
}
