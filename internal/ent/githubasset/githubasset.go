// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package githubasset

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the githubasset type in the database.
	Label = "github_asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAssetID holds the string denoting the asset_id field in the database.
	FieldAssetID = "asset_id"
	// FieldBrowserDownloadURL holds the string denoting the browser_download_url field in the database.
	FieldBrowserDownloadURL = "browser_download_url"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldDownloadCount holds the string denoting the download_count field in the database.
	FieldDownloadCount = "download_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUploader holds the string denoting the uploader field in the database.
	FieldUploader = "uploader"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// Table holds the table name of the githubasset in the database.
	Table = "github_assets"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "github_assets"
	// ReleaseInverseTable is the table name for the GithubRelease entity.
	// It exists in this package in order to avoid circular dependency with the "githubrelease" package.
	ReleaseInverseTable = "github_releases"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "github_release_assets"
)

// Columns holds all SQL columns for githubasset fields.
var Columns = []string{
	FieldID,
	FieldAssetID,
	FieldBrowserDownloadURL,
	FieldName,
	FieldLabel,
	FieldState,
	FieldContentType,
	FieldSize,
	FieldDownloadCount,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUploader,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "github_assets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"github_release_assets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/lrstanley/liam.sh/internal/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// AssetIDValidator is a validator for the "asset_id" field. It is called by the builders before save.
	AssetIDValidator func(int64) error
	// BrowserDownloadURLValidator is a validator for the "browser_download_url" field. It is called by the builders before save.
	BrowserDownloadURLValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the GithubAsset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAssetID orders the results by the asset_id field.
func ByAssetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetID, opts...).ToFunc()
}

// ByBrowserDownloadURL orders the results by the browser_download_url field.
func ByBrowserDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowserDownloadURL, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByDownloadCount orders the results by the download_count field.
func ByDownloadCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByReleaseField orders the results by release field.
func ByReleaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseStep(), sql.OrderByField(field, opts...))
	}
}
func newReleaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReleaseTable, ReleaseColumn),
	)
}
