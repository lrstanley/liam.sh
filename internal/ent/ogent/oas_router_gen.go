// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleDeletePostRequest([1]string{
					args[0],
				}, w, r)

				return
			}
			switch elem[0] {
			case 'l': // Prefix: "labels/"
				if l := len("labels/"); len(elem) >= l && elem[0:l] == "labels/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteLabel
					s.handleDeleteLabelRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'p': // Prefix: "posts/"
				if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeletePost
					s.handleDeletePostRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteUser
					s.handleDeleteUserRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleListPostRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'l': // Prefix: "labels"
				if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListLabelRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadLabelRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/posts"
						if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ListLabelPosts
							s.handleListLabelPostsRequest([1]string{
								args[0],
							}, w, r)

							return
						}
					}
				}
			case 'p': // Prefix: "posts"
				if l := len("posts"); len(elem) >= l && elem[0:l] == "posts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListPostRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadPostRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleReadPostAuthorRequest([1]string{
								args[0],
							}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "author"
							if l := len("author"); len(elem) >= l && elem[0:l] == "author" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ReadPostAuthor
								s.handleReadPostAuthorRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'l': // Prefix: "labels"
							if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListPostLabels
								s.handleListPostLabelsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListUserRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadUserRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/posts"
						if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ListUserPosts
							s.handleListUserPostsRequest([1]string{
								args[0],
							}, w, r)

							return
						}
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleUpdatePostRequest([1]string{
					args[0],
				}, w, r)

				return
			}
			switch elem[0] {
			case 'l': // Prefix: "labels/"
				if l := len("labels/"); len(elem) >= l && elem[0:l] == "labels/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateLabel
					s.handleUpdateLabelRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'p': // Prefix: "posts/"
				if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdatePost
					s.handleUpdatePostRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateUser
					s.handleUpdateUserRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleCreatePostRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'l': // Prefix: "labels"
				if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateLabel
					s.handleCreateLabelRequest([0]string{}, w, r)

					return
				}
			case 'p': // Prefix: "posts"
				if l := len("posts"); len(elem) >= l && elem[0:l] == "posts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreatePost
					s.handleCreatePostRequest([0]string{}, w, r)

					return
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateUser
					s.handleCreateUserRequest([0]string{}, w, r)

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [1]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "DeletePost"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'l': // Prefix: "labels/"
				if l := len("labels/"); len(elem) >= l && elem[0:l] == "labels/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteLabel
					r.name = "DeleteLabel"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'p': // Prefix: "posts/"
				if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeletePost
					r.name = "DeletePost"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteUser
					r.name = "DeleteUser"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "ListPost"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'l': // Prefix: "labels"
				if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListLabel"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadLabel"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/posts"
						if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ListLabelPosts
							r.name = "ListLabelPosts"
							r.args = args
							r.count = 1
							return r, true
						}
					}
				}
			case 'p': // Prefix: "posts"
				if l := len("posts"); len(elem) >= l && elem[0:l] == "posts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListPost"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadPost"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "ReadPostAuthor"
							r.args = args
							r.count = 1
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "author"
							if l := len("author"); len(elem) >= l && elem[0:l] == "author" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ReadPostAuthor
								r.name = "ReadPostAuthor"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'l': // Prefix: "labels"
							if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListPostLabels
								r.name = "ListPostLabels"
								r.args = args
								r.count = 1
								return r, true
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListUser"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadUser"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/posts"
						if l := len("/posts"); len(elem) >= l && elem[0:l] == "/posts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: ListUserPosts
							r.name = "ListUserPosts"
							r.args = args
							r.count = 1
							return r, true
						}
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "UpdatePost"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'l': // Prefix: "labels/"
				if l := len("labels/"); len(elem) >= l && elem[0:l] == "labels/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateLabel
					r.name = "UpdateLabel"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'p': // Prefix: "posts/"
				if l := len("posts/"); len(elem) >= l && elem[0:l] == "posts/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdatePost
					r.name = "UpdatePost"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateUser
					r.name = "UpdateUser"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "CreatePost"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'l': // Prefix: "labels"
				if l := len("labels"); len(elem) >= l && elem[0:l] == "labels" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateLabel
					r.name = "CreateLabel"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'p': // Prefix: "posts"
				if l := len("posts"); len(elem) >= l && elem[0:l] == "posts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreatePost
					r.name = "CreatePost"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateUser
					r.name = "CreateUser"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	}
	return r, false
}
