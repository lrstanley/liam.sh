// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/go-github/v44/github"
	"github.com/lrstanley/liam.sh/internal/ent/githubevent"
)

// GithubEvent is the model entity for the GithubEvent schema.
type GithubEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// ActorID holds the value of the "actor_id" field.
	ActorID int64 `json:"actor_id,omitempty"`
	// Actor holds the value of the "actor" field.
	Actor *github.User `json:"actor,omitempty"`
	// RepoID holds the value of the "repo_id" field.
	RepoID int64 `json:"repo_id,omitempty"`
	// Repo holds the value of the "repo" field.
	Repo *github.Repository `json:"repo,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GithubEvent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case githubevent.FieldActor, githubevent.FieldRepo, githubevent.FieldPayload:
			values[i] = new([]byte)
		case githubevent.FieldPublic:
			values[i] = new(sql.NullBool)
		case githubevent.FieldID, githubevent.FieldActorID, githubevent.FieldRepoID:
			values[i] = new(sql.NullInt64)
		case githubevent.FieldEventID, githubevent.FieldEventType:
			values[i] = new(sql.NullString)
		case githubevent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GithubEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GithubEvent fields.
func (ge *GithubEvent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case githubevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ge.ID = int(value.Int64)
		case githubevent.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				ge.EventID = value.String
			}
		case githubevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				ge.EventType = value.String
			}
		case githubevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ge.CreatedAt = value.Time
			}
		case githubevent.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				ge.Public = value.Bool
			}
		case githubevent.FieldActorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field actor_id", values[i])
			} else if value.Valid {
				ge.ActorID = value.Int64
			}
		case githubevent.FieldActor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field actor", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ge.Actor); err != nil {
					return fmt.Errorf("unmarshal field actor: %w", err)
				}
			}
		case githubevent.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				ge.RepoID = value.Int64
			}
		case githubevent.FieldRepo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field repo", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ge.Repo); err != nil {
					return fmt.Errorf("unmarshal field repo: %w", err)
				}
			}
		case githubevent.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ge.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GithubEvent.
// Note that you need to call GithubEvent.Unwrap() before calling this method if this GithubEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *GithubEvent) Update() *GithubEventUpdateOne {
	return (&GithubEventClient{config: ge.config}).UpdateOne(ge)
}

// Unwrap unwraps the GithubEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ge *GithubEvent) Unwrap() *GithubEvent {
	tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: GithubEvent is not a transactional entity")
	}
	ge.config.driver = tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *GithubEvent) String() string {
	var builder strings.Builder
	builder.WriteString("GithubEvent(")
	builder.WriteString(fmt.Sprintf("id=%v", ge.ID))
	builder.WriteString(", event_id=")
	builder.WriteString(ge.EventID)
	builder.WriteString(", event_type=")
	builder.WriteString(ge.EventType)
	builder.WriteString(", created_at=")
	builder.WriteString(ge.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", public=")
	builder.WriteString(fmt.Sprintf("%v", ge.Public))
	builder.WriteString(", actor_id=")
	builder.WriteString(fmt.Sprintf("%v", ge.ActorID))
	builder.WriteString(", actor=")
	builder.WriteString(fmt.Sprintf("%v", ge.Actor))
	builder.WriteString(", repo_id=")
	builder.WriteString(fmt.Sprintf("%v", ge.RepoID))
	builder.WriteString(", repo=")
	builder.WriteString(fmt.Sprintf("%v", ge.Repo))
	builder.WriteString(", payload=")
	builder.WriteString(fmt.Sprintf("%v", ge.Payload))
	builder.WriteByte(')')
	return builder.String()
}

// GithubEvents is a parsable slice of GithubEvent.
type GithubEvents []*GithubEvent

func (ge GithubEvents) config(cfg config) {
	for _i := range ge {
		ge[_i].config = cfg
	}
}
