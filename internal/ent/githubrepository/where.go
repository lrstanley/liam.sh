// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package githubrepository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lrstanley/liam.sh/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RepoID applies equality check predicate on the "repo_id" field. It's identical to RepoIDEQ.
func RepoID(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullName), v))
	})
}

// OwnerLogin applies equality check predicate on the "owner_login" field. It's identical to OwnerLoginEQ.
func OwnerLogin(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerLogin), v))
	})
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublic), v))
	})
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Fork applies equality check predicate on the "fork" field. It's identical to ForkEQ.
func Fork(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFork), v))
	})
}

// Homepage applies equality check predicate on the "homepage" field. It's identical to HomepageEQ.
func Homepage(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomepage), v))
	})
}

// StarCount applies equality check predicate on the "star_count" field. It's identical to StarCountEQ.
func StarCount(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarCount), v))
	})
}

// DefaultBranch applies equality check predicate on the "default_branch" field. It's identical to DefaultBranchEQ.
func DefaultBranch(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultBranch), v))
	})
}

// IsTemplate applies equality check predicate on the "is_template" field. It's identical to IsTemplateEQ.
func IsTemplate(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTemplate), v))
	})
}

// HasIssues applies equality check predicate on the "has_issues" field. It's identical to HasIssuesEQ.
func HasIssues(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasIssues), v))
	})
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchived), v))
	})
}

// PushedAt applies equality check predicate on the "pushed_at" field. It's identical to PushedAtEQ.
func PushedAt(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// RepoIDEQ applies the EQ predicate on the "repo_id" field.
func RepoIDEQ(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoID), v))
	})
}

// RepoIDNEQ applies the NEQ predicate on the "repo_id" field.
func RepoIDNEQ(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoID), v))
	})
}

// RepoIDIn applies the In predicate on the "repo_id" field.
func RepoIDIn(vs ...int64) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepoID), v...))
	})
}

// RepoIDNotIn applies the NotIn predicate on the "repo_id" field.
func RepoIDNotIn(vs ...int64) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepoID), v...))
	})
}

// RepoIDGT applies the GT predicate on the "repo_id" field.
func RepoIDGT(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepoID), v))
	})
}

// RepoIDGTE applies the GTE predicate on the "repo_id" field.
func RepoIDGTE(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepoID), v))
	})
}

// RepoIDLT applies the LT predicate on the "repo_id" field.
func RepoIDLT(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepoID), v))
	})
}

// RepoIDLTE applies the LTE predicate on the "repo_id" field.
func RepoIDLTE(v int64) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepoID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFullName), v))
	})
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFullName), v))
	})
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFullName), v...))
	})
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFullName), v...))
	})
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFullName), v))
	})
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFullName), v))
	})
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFullName), v))
	})
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFullName), v))
	})
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFullName), v))
	})
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFullName), v))
	})
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFullName), v))
	})
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFullName), v))
	})
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFullName), v))
	})
}

// OwnerLoginEQ applies the EQ predicate on the "owner_login" field.
func OwnerLoginEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginNEQ applies the NEQ predicate on the "owner_login" field.
func OwnerLoginNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginIn applies the In predicate on the "owner_login" field.
func OwnerLoginIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerLogin), v...))
	})
}

// OwnerLoginNotIn applies the NotIn predicate on the "owner_login" field.
func OwnerLoginNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerLogin), v...))
	})
}

// OwnerLoginGT applies the GT predicate on the "owner_login" field.
func OwnerLoginGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginGTE applies the GTE predicate on the "owner_login" field.
func OwnerLoginGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginLT applies the LT predicate on the "owner_login" field.
func OwnerLoginLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginLTE applies the LTE predicate on the "owner_login" field.
func OwnerLoginLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginContains applies the Contains predicate on the "owner_login" field.
func OwnerLoginContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginHasPrefix applies the HasPrefix predicate on the "owner_login" field.
func OwnerLoginHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginHasSuffix applies the HasSuffix predicate on the "owner_login" field.
func OwnerLoginHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginEqualFold applies the EqualFold predicate on the "owner_login" field.
func OwnerLoginEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerLogin), v))
	})
}

// OwnerLoginContainsFold applies the ContainsFold predicate on the "owner_login" field.
func OwnerLoginContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerLogin), v))
	})
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublic), v))
	})
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublic), v))
	})
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHTMLURL), v...))
	})
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTMLURL), v))
	})
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTMLURL), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ForkEQ applies the EQ predicate on the "fork" field.
func ForkEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFork), v))
	})
}

// ForkNEQ applies the NEQ predicate on the "fork" field.
func ForkNEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFork), v))
	})
}

// HomepageEQ applies the EQ predicate on the "homepage" field.
func HomepageEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHomepage), v))
	})
}

// HomepageNEQ applies the NEQ predicate on the "homepage" field.
func HomepageNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHomepage), v))
	})
}

// HomepageIn applies the In predicate on the "homepage" field.
func HomepageIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHomepage), v...))
	})
}

// HomepageNotIn applies the NotIn predicate on the "homepage" field.
func HomepageNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHomepage), v...))
	})
}

// HomepageGT applies the GT predicate on the "homepage" field.
func HomepageGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHomepage), v))
	})
}

// HomepageGTE applies the GTE predicate on the "homepage" field.
func HomepageGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHomepage), v))
	})
}

// HomepageLT applies the LT predicate on the "homepage" field.
func HomepageLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHomepage), v))
	})
}

// HomepageLTE applies the LTE predicate on the "homepage" field.
func HomepageLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHomepage), v))
	})
}

// HomepageContains applies the Contains predicate on the "homepage" field.
func HomepageContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHomepage), v))
	})
}

// HomepageHasPrefix applies the HasPrefix predicate on the "homepage" field.
func HomepageHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHomepage), v))
	})
}

// HomepageHasSuffix applies the HasSuffix predicate on the "homepage" field.
func HomepageHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHomepage), v))
	})
}

// HomepageIsNil applies the IsNil predicate on the "homepage" field.
func HomepageIsNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHomepage)))
	})
}

// HomepageNotNil applies the NotNil predicate on the "homepage" field.
func HomepageNotNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHomepage)))
	})
}

// HomepageEqualFold applies the EqualFold predicate on the "homepage" field.
func HomepageEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHomepage), v))
	})
}

// HomepageContainsFold applies the ContainsFold predicate on the "homepage" field.
func HomepageContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHomepage), v))
	})
}

// StarCountEQ applies the EQ predicate on the "star_count" field.
func StarCountEQ(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarCount), v))
	})
}

// StarCountNEQ applies the NEQ predicate on the "star_count" field.
func StarCountNEQ(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStarCount), v))
	})
}

// StarCountIn applies the In predicate on the "star_count" field.
func StarCountIn(vs ...int) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStarCount), v...))
	})
}

// StarCountNotIn applies the NotIn predicate on the "star_count" field.
func StarCountNotIn(vs ...int) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStarCount), v...))
	})
}

// StarCountGT applies the GT predicate on the "star_count" field.
func StarCountGT(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStarCount), v))
	})
}

// StarCountGTE applies the GTE predicate on the "star_count" field.
func StarCountGTE(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStarCount), v))
	})
}

// StarCountLT applies the LT predicate on the "star_count" field.
func StarCountLT(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStarCount), v))
	})
}

// StarCountLTE applies the LTE predicate on the "star_count" field.
func StarCountLTE(v int) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStarCount), v))
	})
}

// DefaultBranchEQ applies the EQ predicate on the "default_branch" field.
func DefaultBranchEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchNEQ applies the NEQ predicate on the "default_branch" field.
func DefaultBranchNEQ(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchIn applies the In predicate on the "default_branch" field.
func DefaultBranchIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultBranch), v...))
	})
}

// DefaultBranchNotIn applies the NotIn predicate on the "default_branch" field.
func DefaultBranchNotIn(vs ...string) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultBranch), v...))
	})
}

// DefaultBranchGT applies the GT predicate on the "default_branch" field.
func DefaultBranchGT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchGTE applies the GTE predicate on the "default_branch" field.
func DefaultBranchGTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchLT applies the LT predicate on the "default_branch" field.
func DefaultBranchLT(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchLTE applies the LTE predicate on the "default_branch" field.
func DefaultBranchLTE(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchContains applies the Contains predicate on the "default_branch" field.
func DefaultBranchContains(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchHasPrefix applies the HasPrefix predicate on the "default_branch" field.
func DefaultBranchHasPrefix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchHasSuffix applies the HasSuffix predicate on the "default_branch" field.
func DefaultBranchHasSuffix(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchEqualFold applies the EqualFold predicate on the "default_branch" field.
func DefaultBranchEqualFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultBranch), v))
	})
}

// DefaultBranchContainsFold applies the ContainsFold predicate on the "default_branch" field.
func DefaultBranchContainsFold(v string) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultBranch), v))
	})
}

// IsTemplateEQ applies the EQ predicate on the "is_template" field.
func IsTemplateEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTemplate), v))
	})
}

// IsTemplateNEQ applies the NEQ predicate on the "is_template" field.
func IsTemplateNEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsTemplate), v))
	})
}

// HasIssuesEQ applies the EQ predicate on the "has_issues" field.
func HasIssuesEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHasIssues), v))
	})
}

// HasIssuesNEQ applies the NEQ predicate on the "has_issues" field.
func HasIssuesNEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHasIssues), v))
	})
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchived), v))
	})
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArchived), v))
	})
}

// PushedAtEQ applies the EQ predicate on the "pushed_at" field.
func PushedAtEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushedAt), v))
	})
}

// PushedAtNEQ applies the NEQ predicate on the "pushed_at" field.
func PushedAtNEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPushedAt), v))
	})
}

// PushedAtIn applies the In predicate on the "pushed_at" field.
func PushedAtIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPushedAt), v...))
	})
}

// PushedAtNotIn applies the NotIn predicate on the "pushed_at" field.
func PushedAtNotIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPushedAt), v...))
	})
}

// PushedAtGT applies the GT predicate on the "pushed_at" field.
func PushedAtGT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPushedAt), v))
	})
}

// PushedAtGTE applies the GTE predicate on the "pushed_at" field.
func PushedAtGTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPushedAt), v))
	})
}

// PushedAtLT applies the LT predicate on the "pushed_at" field.
func PushedAtLT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPushedAt), v))
	})
}

// PushedAtLTE applies the LTE predicate on the "pushed_at" field.
func PushedAtLTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPushedAt), v))
	})
}

// PushedAtIsNil applies the IsNil predicate on the "pushed_at" field.
func PushedAtIsNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPushedAt)))
	})
}

// PushedAtNotNil applies the NotNil predicate on the "pushed_at" field.
func PushedAtNotNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPushedAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GithubRepository {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GithubRepository(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// LicenseIsNil applies the IsNil predicate on the "license" field.
func LicenseIsNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLicense)))
	})
}

// LicenseNotNil applies the NotNil predicate on the "license" field.
func LicenseNotNil() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLicense)))
	})
}

// HasLabels applies the HasEdge predicate on the "labels" edge.
func HasLabels() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LabelsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LabelsTable, LabelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabelsWith applies the HasEdge predicate on the "labels" edge with a given conditions (other predicates).
func HasLabelsWith(preds ...predicate.Label) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LabelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LabelsTable, LabelsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReleases applies the HasEdge predicate on the "releases" edge.
func HasReleases() predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReleasesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReleasesTable, ReleasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleasesWith applies the HasEdge predicate on the "releases" edge with a given conditions (other predicates).
func HasReleasesWith(preds ...predicate.GithubRelease) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReleasesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReleasesTable, ReleasesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GithubRepository) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GithubRepository) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GithubRepository) predicate.GithubRepository {
	return predicate.GithubRepository(func(s *sql.Selector) {
		p(s.Not())
	})
}
